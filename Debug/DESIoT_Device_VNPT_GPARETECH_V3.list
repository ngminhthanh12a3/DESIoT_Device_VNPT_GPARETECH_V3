
DESIoT_Device_VNPT_GPARETECH_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007710  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001c0  08007820  08007820  00017820  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080079e0  080079e0  00020274  2**0
                  CONTENTS
  4 .ARM          00000000  080079e0  080079e0  00020274  2**0
                  CONTENTS
  5 .preinit_array 00000000  080079e0  080079e0  00020274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080079e0  080079e0  000179e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080079e4  080079e4  000179e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000274  20000000  080079e8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009cc  20000274  08007c5c  00020274  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c40  08007c5c  00020c40  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010910  00000000  00000000  0002029d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000028ab  00000000  00000000  00030bad  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010c0  00000000  00000000  00033458  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe0  00000000  00000000  00034518  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019859  00000000  00000000  000354f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000114c7  00000000  00000000  0004ed51  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092995  00000000  00000000  00060218  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f2bad  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054c4  00000000  00000000  000f2c00  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000274 	.word	0x20000274
 800012c:	00000000 	.word	0x00000000
 8000130:	08007808 	.word	0x08007808

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000278 	.word	0x20000278
 800014c:	08007808 	.word	0x08007808

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2f>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a40:	bf24      	itt	cs
 8000a42:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a46:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a4a:	d90d      	bls.n	8000a68 <__aeabi_d2f+0x30>
 8000a4c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a50:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a54:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a58:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a5c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a60:	bf08      	it	eq
 8000a62:	f020 0001 	biceq.w	r0, r0, #1
 8000a66:	4770      	bx	lr
 8000a68:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a6c:	d121      	bne.n	8000ab2 <__aeabi_d2f+0x7a>
 8000a6e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a72:	bfbc      	itt	lt
 8000a74:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	4770      	bxlt	lr
 8000a7a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a7e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a82:	f1c2 0218 	rsb	r2, r2, #24
 8000a86:	f1c2 0c20 	rsb	ip, r2, #32
 8000a8a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a8e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a92:	bf18      	it	ne
 8000a94:	f040 0001 	orrne.w	r0, r0, #1
 8000a98:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a9c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000aa0:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000aa4:	ea40 000c 	orr.w	r0, r0, ip
 8000aa8:	fa23 f302 	lsr.w	r3, r3, r2
 8000aac:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ab0:	e7cc      	b.n	8000a4c <__aeabi_d2f+0x14>
 8000ab2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000ab6:	d107      	bne.n	8000ac8 <__aeabi_d2f+0x90>
 8000ab8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000abc:	bf1e      	ittt	ne
 8000abe:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ac2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ac6:	4770      	bxne	lr
 8000ac8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000acc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ad0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ad4:	4770      	bx	lr
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_frsub>:
 8000ad8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000adc:	e002      	b.n	8000ae4 <__addsf3>
 8000ade:	bf00      	nop

08000ae0 <__aeabi_fsub>:
 8000ae0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ae4 <__addsf3>:
 8000ae4:	0042      	lsls	r2, r0, #1
 8000ae6:	bf1f      	itttt	ne
 8000ae8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000aec:	ea92 0f03 	teqne	r2, r3
 8000af0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000af4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000af8:	d06a      	beq.n	8000bd0 <__addsf3+0xec>
 8000afa:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000afe:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b02:	bfc1      	itttt	gt
 8000b04:	18d2      	addgt	r2, r2, r3
 8000b06:	4041      	eorgt	r1, r0
 8000b08:	4048      	eorgt	r0, r1
 8000b0a:	4041      	eorgt	r1, r0
 8000b0c:	bfb8      	it	lt
 8000b0e:	425b      	neglt	r3, r3
 8000b10:	2b19      	cmp	r3, #25
 8000b12:	bf88      	it	hi
 8000b14:	4770      	bxhi	lr
 8000b16:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b1a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b1e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4240      	negne	r0, r0
 8000b26:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b2a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b2e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b32:	bf18      	it	ne
 8000b34:	4249      	negne	r1, r1
 8000b36:	ea92 0f03 	teq	r2, r3
 8000b3a:	d03f      	beq.n	8000bbc <__addsf3+0xd8>
 8000b3c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b40:	fa41 fc03 	asr.w	ip, r1, r3
 8000b44:	eb10 000c 	adds.w	r0, r0, ip
 8000b48:	f1c3 0320 	rsb	r3, r3, #32
 8000b4c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b50:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b54:	d502      	bpl.n	8000b5c <__addsf3+0x78>
 8000b56:	4249      	negs	r1, r1
 8000b58:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b5c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b60:	d313      	bcc.n	8000b8a <__addsf3+0xa6>
 8000b62:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b66:	d306      	bcc.n	8000b76 <__addsf3+0x92>
 8000b68:	0840      	lsrs	r0, r0, #1
 8000b6a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b6e:	f102 0201 	add.w	r2, r2, #1
 8000b72:	2afe      	cmp	r2, #254	; 0xfe
 8000b74:	d251      	bcs.n	8000c1a <__addsf3+0x136>
 8000b76:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b7a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b7e:	bf08      	it	eq
 8000b80:	f020 0001 	biceq.w	r0, r0, #1
 8000b84:	ea40 0003 	orr.w	r0, r0, r3
 8000b88:	4770      	bx	lr
 8000b8a:	0049      	lsls	r1, r1, #1
 8000b8c:	eb40 0000 	adc.w	r0, r0, r0
 8000b90:	3a01      	subs	r2, #1
 8000b92:	bf28      	it	cs
 8000b94:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b98:	d2ed      	bcs.n	8000b76 <__addsf3+0x92>
 8000b9a:	fab0 fc80 	clz	ip, r0
 8000b9e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000ba2:	ebb2 020c 	subs.w	r2, r2, ip
 8000ba6:	fa00 f00c 	lsl.w	r0, r0, ip
 8000baa:	bfaa      	itet	ge
 8000bac:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bb0:	4252      	neglt	r2, r2
 8000bb2:	4318      	orrge	r0, r3
 8000bb4:	bfbc      	itt	lt
 8000bb6:	40d0      	lsrlt	r0, r2
 8000bb8:	4318      	orrlt	r0, r3
 8000bba:	4770      	bx	lr
 8000bbc:	f092 0f00 	teq	r2, #0
 8000bc0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bc4:	bf06      	itte	eq
 8000bc6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bca:	3201      	addeq	r2, #1
 8000bcc:	3b01      	subne	r3, #1
 8000bce:	e7b5      	b.n	8000b3c <__addsf3+0x58>
 8000bd0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bd4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bd8:	bf18      	it	ne
 8000bda:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bde:	d021      	beq.n	8000c24 <__addsf3+0x140>
 8000be0:	ea92 0f03 	teq	r2, r3
 8000be4:	d004      	beq.n	8000bf0 <__addsf3+0x10c>
 8000be6:	f092 0f00 	teq	r2, #0
 8000bea:	bf08      	it	eq
 8000bec:	4608      	moveq	r0, r1
 8000bee:	4770      	bx	lr
 8000bf0:	ea90 0f01 	teq	r0, r1
 8000bf4:	bf1c      	itt	ne
 8000bf6:	2000      	movne	r0, #0
 8000bf8:	4770      	bxne	lr
 8000bfa:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bfe:	d104      	bne.n	8000c0a <__addsf3+0x126>
 8000c00:	0040      	lsls	r0, r0, #1
 8000c02:	bf28      	it	cs
 8000c04:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c08:	4770      	bx	lr
 8000c0a:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c0e:	bf3c      	itt	cc
 8000c10:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c14:	4770      	bxcc	lr
 8000c16:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c1a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c1e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c22:	4770      	bx	lr
 8000c24:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c28:	bf16      	itet	ne
 8000c2a:	4608      	movne	r0, r1
 8000c2c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c30:	4601      	movne	r1, r0
 8000c32:	0242      	lsls	r2, r0, #9
 8000c34:	bf06      	itte	eq
 8000c36:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c3a:	ea90 0f01 	teqeq	r0, r1
 8000c3e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c42:	4770      	bx	lr

08000c44 <__aeabi_ui2f>:
 8000c44:	f04f 0300 	mov.w	r3, #0
 8000c48:	e004      	b.n	8000c54 <__aeabi_i2f+0x8>
 8000c4a:	bf00      	nop

08000c4c <__aeabi_i2f>:
 8000c4c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c50:	bf48      	it	mi
 8000c52:	4240      	negmi	r0, r0
 8000c54:	ea5f 0c00 	movs.w	ip, r0
 8000c58:	bf08      	it	eq
 8000c5a:	4770      	bxeq	lr
 8000c5c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c60:	4601      	mov	r1, r0
 8000c62:	f04f 0000 	mov.w	r0, #0
 8000c66:	e01c      	b.n	8000ca2 <__aeabi_l2f+0x2a>

08000c68 <__aeabi_ul2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f04f 0300 	mov.w	r3, #0
 8000c74:	e00a      	b.n	8000c8c <__aeabi_l2f+0x14>
 8000c76:	bf00      	nop

08000c78 <__aeabi_l2f>:
 8000c78:	ea50 0201 	orrs.w	r2, r0, r1
 8000c7c:	bf08      	it	eq
 8000c7e:	4770      	bxeq	lr
 8000c80:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c84:	d502      	bpl.n	8000c8c <__aeabi_l2f+0x14>
 8000c86:	4240      	negs	r0, r0
 8000c88:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c8c:	ea5f 0c01 	movs.w	ip, r1
 8000c90:	bf02      	ittt	eq
 8000c92:	4684      	moveq	ip, r0
 8000c94:	4601      	moveq	r1, r0
 8000c96:	2000      	moveq	r0, #0
 8000c98:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c9c:	bf08      	it	eq
 8000c9e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000ca2:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000ca6:	fabc f28c 	clz	r2, ip
 8000caa:	3a08      	subs	r2, #8
 8000cac:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cb0:	db10      	blt.n	8000cd4 <__aeabi_l2f+0x5c>
 8000cb2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cb6:	4463      	add	r3, ip
 8000cb8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cbc:	f1c2 0220 	rsb	r2, r2, #32
 8000cc0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cc4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cc8:	eb43 0002 	adc.w	r0, r3, r2
 8000ccc:	bf08      	it	eq
 8000cce:	f020 0001 	biceq.w	r0, r0, #1
 8000cd2:	4770      	bx	lr
 8000cd4:	f102 0220 	add.w	r2, r2, #32
 8000cd8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cdc:	f1c2 0220 	rsb	r2, r2, #32
 8000ce0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000ce4:	fa21 f202 	lsr.w	r2, r1, r2
 8000ce8:	eb43 0002 	adc.w	r0, r3, r2
 8000cec:	bf08      	it	eq
 8000cee:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000cf2:	4770      	bx	lr

08000cf4 <__aeabi_fmul>:
 8000cf4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000cf8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cfc:	bf1e      	ittt	ne
 8000cfe:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d02:	ea92 0f0c 	teqne	r2, ip
 8000d06:	ea93 0f0c 	teqne	r3, ip
 8000d0a:	d06f      	beq.n	8000dec <__aeabi_fmul+0xf8>
 8000d0c:	441a      	add	r2, r3
 8000d0e:	ea80 0c01 	eor.w	ip, r0, r1
 8000d12:	0240      	lsls	r0, r0, #9
 8000d14:	bf18      	it	ne
 8000d16:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d1a:	d01e      	beq.n	8000d5a <__aeabi_fmul+0x66>
 8000d1c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d20:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d24:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d28:	fba0 3101 	umull	r3, r1, r0, r1
 8000d2c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d30:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d34:	bf3e      	ittt	cc
 8000d36:	0049      	lslcc	r1, r1, #1
 8000d38:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d3c:	005b      	lslcc	r3, r3, #1
 8000d3e:	ea40 0001 	orr.w	r0, r0, r1
 8000d42:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d46:	2afd      	cmp	r2, #253	; 0xfd
 8000d48:	d81d      	bhi.n	8000d86 <__aeabi_fmul+0x92>
 8000d4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d4e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d52:	bf08      	it	eq
 8000d54:	f020 0001 	biceq.w	r0, r0, #1
 8000d58:	4770      	bx	lr
 8000d5a:	f090 0f00 	teq	r0, #0
 8000d5e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d62:	bf08      	it	eq
 8000d64:	0249      	lsleq	r1, r1, #9
 8000d66:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d6a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d6e:	3a7f      	subs	r2, #127	; 0x7f
 8000d70:	bfc2      	ittt	gt
 8000d72:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d76:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d7a:	4770      	bxgt	lr
 8000d7c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d80:	f04f 0300 	mov.w	r3, #0
 8000d84:	3a01      	subs	r2, #1
 8000d86:	dc5d      	bgt.n	8000e44 <__aeabi_fmul+0x150>
 8000d88:	f112 0f19 	cmn.w	r2, #25
 8000d8c:	bfdc      	itt	le
 8000d8e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d92:	4770      	bxle	lr
 8000d94:	f1c2 0200 	rsb	r2, r2, #0
 8000d98:	0041      	lsls	r1, r0, #1
 8000d9a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d9e:	f1c2 0220 	rsb	r2, r2, #32
 8000da2:	fa00 fc02 	lsl.w	ip, r0, r2
 8000da6:	ea5f 0031 	movs.w	r0, r1, rrx
 8000daa:	f140 0000 	adc.w	r0, r0, #0
 8000dae:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000db2:	bf08      	it	eq
 8000db4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000db8:	4770      	bx	lr
 8000dba:	f092 0f00 	teq	r2, #0
 8000dbe:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000dc2:	bf02      	ittt	eq
 8000dc4:	0040      	lsleq	r0, r0, #1
 8000dc6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dca:	3a01      	subeq	r2, #1
 8000dcc:	d0f9      	beq.n	8000dc2 <__aeabi_fmul+0xce>
 8000dce:	ea40 000c 	orr.w	r0, r0, ip
 8000dd2:	f093 0f00 	teq	r3, #0
 8000dd6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dda:	bf02      	ittt	eq
 8000ddc:	0049      	lsleq	r1, r1, #1
 8000dde:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000de2:	3b01      	subeq	r3, #1
 8000de4:	d0f9      	beq.n	8000dda <__aeabi_fmul+0xe6>
 8000de6:	ea41 010c 	orr.w	r1, r1, ip
 8000dea:	e78f      	b.n	8000d0c <__aeabi_fmul+0x18>
 8000dec:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000df0:	ea92 0f0c 	teq	r2, ip
 8000df4:	bf18      	it	ne
 8000df6:	ea93 0f0c 	teqne	r3, ip
 8000dfa:	d00a      	beq.n	8000e12 <__aeabi_fmul+0x11e>
 8000dfc:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000e00:	bf18      	it	ne
 8000e02:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000e06:	d1d8      	bne.n	8000dba <__aeabi_fmul+0xc6>
 8000e08:	ea80 0001 	eor.w	r0, r0, r1
 8000e0c:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e10:	4770      	bx	lr
 8000e12:	f090 0f00 	teq	r0, #0
 8000e16:	bf17      	itett	ne
 8000e18:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e1c:	4608      	moveq	r0, r1
 8000e1e:	f091 0f00 	teqne	r1, #0
 8000e22:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e26:	d014      	beq.n	8000e52 <__aeabi_fmul+0x15e>
 8000e28:	ea92 0f0c 	teq	r2, ip
 8000e2c:	d101      	bne.n	8000e32 <__aeabi_fmul+0x13e>
 8000e2e:	0242      	lsls	r2, r0, #9
 8000e30:	d10f      	bne.n	8000e52 <__aeabi_fmul+0x15e>
 8000e32:	ea93 0f0c 	teq	r3, ip
 8000e36:	d103      	bne.n	8000e40 <__aeabi_fmul+0x14c>
 8000e38:	024b      	lsls	r3, r1, #9
 8000e3a:	bf18      	it	ne
 8000e3c:	4608      	movne	r0, r1
 8000e3e:	d108      	bne.n	8000e52 <__aeabi_fmul+0x15e>
 8000e40:	ea80 0001 	eor.w	r0, r0, r1
 8000e44:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e48:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e4c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e50:	4770      	bx	lr
 8000e52:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e56:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e5a:	4770      	bx	lr

08000e5c <__aeabi_fdiv>:
 8000e5c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e60:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e64:	bf1e      	ittt	ne
 8000e66:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e6a:	ea92 0f0c 	teqne	r2, ip
 8000e6e:	ea93 0f0c 	teqne	r3, ip
 8000e72:	d069      	beq.n	8000f48 <__aeabi_fdiv+0xec>
 8000e74:	eba2 0203 	sub.w	r2, r2, r3
 8000e78:	ea80 0c01 	eor.w	ip, r0, r1
 8000e7c:	0249      	lsls	r1, r1, #9
 8000e7e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e82:	d037      	beq.n	8000ef4 <__aeabi_fdiv+0x98>
 8000e84:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e88:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e8c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e90:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e94:	428b      	cmp	r3, r1
 8000e96:	bf38      	it	cc
 8000e98:	005b      	lslcc	r3, r3, #1
 8000e9a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e9e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	bf24      	itt	cs
 8000ea6:	1a5b      	subcs	r3, r3, r1
 8000ea8:	ea40 000c 	orrcs.w	r0, r0, ip
 8000eac:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000eb0:	bf24      	itt	cs
 8000eb2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eb6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eba:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ebe:	bf24      	itt	cs
 8000ec0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ec4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000ec8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ecc:	bf24      	itt	cs
 8000ece:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ed2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ed6:	011b      	lsls	r3, r3, #4
 8000ed8:	bf18      	it	ne
 8000eda:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ede:	d1e0      	bne.n	8000ea2 <__aeabi_fdiv+0x46>
 8000ee0:	2afd      	cmp	r2, #253	; 0xfd
 8000ee2:	f63f af50 	bhi.w	8000d86 <__aeabi_fmul+0x92>
 8000ee6:	428b      	cmp	r3, r1
 8000ee8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000eec:	bf08      	it	eq
 8000eee:	f020 0001 	biceq.w	r0, r0, #1
 8000ef2:	4770      	bx	lr
 8000ef4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ef8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000efc:	327f      	adds	r2, #127	; 0x7f
 8000efe:	bfc2      	ittt	gt
 8000f00:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000f04:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f08:	4770      	bxgt	lr
 8000f0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000f0e:	f04f 0300 	mov.w	r3, #0
 8000f12:	3a01      	subs	r2, #1
 8000f14:	e737      	b.n	8000d86 <__aeabi_fmul+0x92>
 8000f16:	f092 0f00 	teq	r2, #0
 8000f1a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f1e:	bf02      	ittt	eq
 8000f20:	0040      	lsleq	r0, r0, #1
 8000f22:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f26:	3a01      	subeq	r2, #1
 8000f28:	d0f9      	beq.n	8000f1e <__aeabi_fdiv+0xc2>
 8000f2a:	ea40 000c 	orr.w	r0, r0, ip
 8000f2e:	f093 0f00 	teq	r3, #0
 8000f32:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f36:	bf02      	ittt	eq
 8000f38:	0049      	lsleq	r1, r1, #1
 8000f3a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f3e:	3b01      	subeq	r3, #1
 8000f40:	d0f9      	beq.n	8000f36 <__aeabi_fdiv+0xda>
 8000f42:	ea41 010c 	orr.w	r1, r1, ip
 8000f46:	e795      	b.n	8000e74 <__aeabi_fdiv+0x18>
 8000f48:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f4c:	ea92 0f0c 	teq	r2, ip
 8000f50:	d108      	bne.n	8000f64 <__aeabi_fdiv+0x108>
 8000f52:	0242      	lsls	r2, r0, #9
 8000f54:	f47f af7d 	bne.w	8000e52 <__aeabi_fmul+0x15e>
 8000f58:	ea93 0f0c 	teq	r3, ip
 8000f5c:	f47f af70 	bne.w	8000e40 <__aeabi_fmul+0x14c>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e776      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f64:	ea93 0f0c 	teq	r3, ip
 8000f68:	d104      	bne.n	8000f74 <__aeabi_fdiv+0x118>
 8000f6a:	024b      	lsls	r3, r1, #9
 8000f6c:	f43f af4c 	beq.w	8000e08 <__aeabi_fmul+0x114>
 8000f70:	4608      	mov	r0, r1
 8000f72:	e76e      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f74:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f78:	bf18      	it	ne
 8000f7a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f7e:	d1ca      	bne.n	8000f16 <__aeabi_fdiv+0xba>
 8000f80:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f84:	f47f af5c 	bne.w	8000e40 <__aeabi_fmul+0x14c>
 8000f88:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f8c:	f47f af3c 	bne.w	8000e08 <__aeabi_fmul+0x114>
 8000f90:	e75f      	b.n	8000e52 <__aeabi_fmul+0x15e>
 8000f92:	bf00      	nop

08000f94 <DESIoT_loop>:
#include "DESIoT_device.h"

DESIoT_Frame_Hander_t hFrame = {.index = 0};
DESIoT_CBUF_t hGatewayCBuffer = {.start = 0, .end = 0};

void DESIoT_loop() {
 8000f94:	b580      	push	{r7, lr}
 8000f96:	af00      	add	r7, sp, #0
	DESIoT_frameArbitrating();
 8000f98:	f000 f83c 	bl	8001014 <DESIoT_frameArbitrating>
	DESIoT_frameProssessLoop();
 8000f9c:	f000 f802 	bl	8000fa4 <DESIoT_frameProssessLoop>
}
 8000fa0:	bf00      	nop
 8000fa2:	bd80      	pop	{r7, pc}

08000fa4 <DESIoT_frameProssessLoop>:

void DESIoT_frameProssessLoop()
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0
	while (DESIOT_IS_FRAME_ON_PROCESS_STATUS(hFrame.status))
 8000faa:	e014      	b.n	8000fd6 <DESIoT_frameProssessLoop+0x32>
	{
		DESIoT_frameTimeoutHandler();
 8000fac:	f000 fc86 	bl	80018bc <DESIoT_frameTimeoutHandler>

		uint8_t rx;
		if (DESIoT_CBUF_getByte(hFrame.curCBuf, &rx) == DESIOT_CBUF_OK)
 8000fb0:	4b16      	ldr	r3, [pc, #88]	; (800100c <DESIoT_frameProssessLoop+0x68>)
 8000fb2:	f8d3 3440 	ldr.w	r3, [r3, #1088]	; 0x440
 8000fb6:	1dfa      	adds	r2, r7, #7
 8000fb8:	4611      	mov	r1, r2
 8000fba:	4618      	mov	r0, r3
 8000fbc:	f000 fa9a 	bl	80014f4 <DESIoT_CBUF_getByte>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d107      	bne.n	8000fd6 <DESIoT_frameProssessLoop+0x32>
			DESIoT_FRAME_parsing(&hFrame, rx, hFrame.curCBuf);
 8000fc6:	79fb      	ldrb	r3, [r7, #7]
 8000fc8:	4a10      	ldr	r2, [pc, #64]	; (800100c <DESIoT_frameProssessLoop+0x68>)
 8000fca:	f8d2 2440 	ldr.w	r2, [r2, #1088]	; 0x440
 8000fce:	4619      	mov	r1, r3
 8000fd0:	480e      	ldr	r0, [pc, #56]	; (800100c <DESIoT_frameProssessLoop+0x68>)
 8000fd2:	f000 fadd 	bl	8001590 <DESIoT_FRAME_parsing>
	while (DESIOT_IS_FRAME_ON_PROCESS_STATUS(hFrame.status))
 8000fd6:	4b0d      	ldr	r3, [pc, #52]	; (800100c <DESIoT_frameProssessLoop+0x68>)
 8000fd8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d00d      	beq.n	8000ffc <DESIoT_frameProssessLoop+0x58>
 8000fe0:	4b0a      	ldr	r3, [pc, #40]	; (800100c <DESIoT_frameProssessLoop+0x68>)
 8000fe2:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8000fe6:	4b0a      	ldr	r3, [pc, #40]	; (8001010 <DESIoT_frameProssessLoop+0x6c>)
 8000fe8:	fba3 1302 	umull	r1, r3, r3, r2
 8000fec:	0859      	lsrs	r1, r3, #1
 8000fee:	460b      	mov	r3, r1
 8000ff0:	005b      	lsls	r3, r3, #1
 8000ff2:	440b      	add	r3, r1
 8000ff4:	1ad3      	subs	r3, r2, r3
 8000ff6:	b2db      	uxtb	r3, r3
 8000ff8:	2b00      	cmp	r3, #0
 8000ffa:	d0d7      	beq.n	8000fac <DESIoT_frameProssessLoop+0x8>
	}
	DESIoT_frameFailedHandler();
 8000ffc:	f000 fbd2 	bl	80017a4 <DESIoT_frameFailedHandler>
	DESIoT_frameSuccessHandler();
 8001000:	f000 fbe0 	bl	80017c4 <DESIoT_frameSuccessHandler>
}
 8001004:	bf00      	nop
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}
 800100c:	20000290 	.word	0x20000290
 8001010:	aaaaaaab 	.word	0xaaaaaaab

08001014 <DESIoT_frameArbitrating>:

void DESIoT_frameArbitrating()
{
 8001014:	b580      	push	{r7, lr}
 8001016:	af00      	add	r7, sp, #0
	// arbitrating for Gateway
	if (hFrame.status == DESIOT_FRAME_IDLE)
 8001018:	4b0a      	ldr	r3, [pc, #40]	; (8001044 <DESIoT_frameArbitrating+0x30>)
 800101a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800101e:	2b00      	cmp	r3, #0
 8001020:	d10d      	bne.n	800103e <DESIoT_frameArbitrating+0x2a>
	{
		if (!DESIoT_CBUF_isEmpty(&hGatewayCBuffer))
 8001022:	4809      	ldr	r0, [pc, #36]	; (8001048 <DESIoT_frameArbitrating+0x34>)
 8001024:	f000 fa4e 	bl	80014c4 <DESIoT_CBUF_isEmpty>
 8001028:	4603      	mov	r3, r0
 800102a:	2b00      	cmp	r3, #0
 800102c:	d107      	bne.n	800103e <DESIoT_frameArbitrating+0x2a>
		{
			hFrame.status = DESIOT_FRAME_IN_GATEWAY_PROGRESS;
 800102e:	4b05      	ldr	r3, [pc, #20]	; (8001044 <DESIoT_frameArbitrating+0x30>)
 8001030:	2203      	movs	r2, #3
 8001032:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			DESIoT_setUpStartOfParsing(&hFrame, &hGatewayCBuffer);
 8001036:	4904      	ldr	r1, [pc, #16]	; (8001048 <DESIoT_frameArbitrating+0x34>)
 8001038:	4802      	ldr	r0, [pc, #8]	; (8001044 <DESIoT_frameArbitrating+0x30>)
 800103a:	f000 fa88 	bl	800154e <DESIoT_setUpStartOfParsing>
		}
	}
}
 800103e:	bf00      	nop
 8001040:	bd80      	pop	{r7, pc}
 8001042:	bf00      	nop
 8001044:	20000290 	.word	0x20000290
 8001048:	200006d4 	.word	0x200006d4

0800104c <DESIOT_Rx1byte>:

void DESIOT_Rx1byte(uint8_t rxByte)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	b082      	sub	sp, #8
 8001050:	af00      	add	r7, sp, #0
 8001052:	4603      	mov	r3, r0
 8001054:	71fb      	strb	r3, [r7, #7]
	DESIoT_CBUF_putByte(&hGatewayCBuffer, rxByte);
 8001056:	79fb      	ldrb	r3, [r7, #7]
 8001058:	4619      	mov	r1, r3
 800105a:	4803      	ldr	r0, [pc, #12]	; (8001068 <DESIOT_Rx1byte+0x1c>)
 800105c:	f000 fa14 	bl	8001488 <DESIoT_CBUF_putByte>
}
 8001060:	bf00      	nop
 8001062:	3708      	adds	r7, #8
 8001064:	46bd      	mov	sp, r7
 8001066:	bd80      	pop	{r7, pc}
 8001068:	200006d4 	.word	0x200006d4

0800106c <DESIoT_assignInt>:

/**
 * Send a data packet requiring to assign an integer to the gateway.
 */
void DESIoT_assignInt(uint8_t VS, size_t integer)
{
 800106c:	b580      	push	{r7, lr}
 800106e:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8001072:	af00      	add	r7, sp, #0
 8001074:	4602      	mov	r2, r0
 8001076:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800107a:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 800107e:	6019      	str	r1, [r3, #0]
 8001080:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001084:	f2a3 4309 	subw	r3, r3, #1033	; 0x409
 8001088:	701a      	strb	r2, [r3, #0]
	DESIoT_dataPacket_t dataPacket;
	dataPacket.cmd = DESIOT_CMD_ASSIGN_VIRTUAL_STORAGE;
 800108a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800108e:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8001092:	2200      	movs	r2, #0
 8001094:	701a      	strb	r2, [r3, #0]
	dataPacket.dataLen = DESIOT_ADDITIONAL_DATA_SIZE + sizeof(VS) + sizeof(integer); // add bytes of additional data
 8001096:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800109a:	f2a3 4204 	subw	r2, r3, #1028	; 0x404
 800109e:	6813      	ldr	r3, [r2, #0]
 80010a0:	2137      	movs	r1, #55	; 0x37
 80010a2:	f361 2311 	bfi	r3, r1, #8, #10
 80010a6:	6013      	str	r3, [r2, #0]

	// ignore 12-byte data for device ID
	dataPacket.data[DESIOT_ADDITIONAL_DATA_SIZE] = VS;
 80010a8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80010ac:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80010b0:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80010b4:	f2a2 4209 	subw	r2, r2, #1033	; 0x409
 80010b8:	7812      	ldrb	r2, [r2, #0]
 80010ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	memcpy(dataPacket.data + DESIOT_ADDITIONAL_DATA_SIZE + 1, &integer, sizeof(integer));
 80010be:	f107 030c 	add.w	r3, r7, #12
 80010c2:	3303      	adds	r3, #3
 80010c4:	3333      	adds	r3, #51	; 0x33
 80010c6:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80010ca:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
 80010ce:	6812      	ldr	r2, [r2, #0]
 80010d0:	601a      	str	r2, [r3, #0]

	DESIoT_sendDataPacket(DESIOT_CMD_LEN + DESIOT_DATALEN_LEN + dataPacket.dataLen,
 80010d2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80010d6:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	f3c3 2309 	ubfx	r3, r3, #8, #10
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	3303      	adds	r3, #3
 80010e4:	f107 020c 	add.w	r2, r7, #12
 80010e8:	4611      	mov	r1, r2
 80010ea:	4618      	mov	r0, r3
 80010ec:	f000 f8e2 	bl	80012b4 <DESIoT_sendDataPacket>
			(uint8_t*)&dataPacket);
}
 80010f0:	bf00      	nop
 80010f2:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}

080010fa <DESIoT_assignFloat>:

void DESIoT_assignFloat(uint8_t VS, float fNumber)
{
 80010fa:	b580      	push	{r7, lr}
 80010fc:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8001100:	af00      	add	r7, sp, #0
 8001102:	4602      	mov	r2, r0
 8001104:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001108:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 800110c:	6019      	str	r1, [r3, #0]
 800110e:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001112:	f2a3 4309 	subw	r3, r3, #1033	; 0x409
 8001116:	701a      	strb	r2, [r3, #0]
	DESIoT_dataPacket_t dataPacket;
	dataPacket.cmd = DESIOT_CMD_ASSIGN_VIRTUAL_STORAGE;
 8001118:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800111c:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8001120:	2200      	movs	r2, #0
 8001122:	701a      	strb	r2, [r3, #0]
	dataPacket.dataLen = DESIOT_ADDITIONAL_DATA_SIZE + sizeof(VS) + sizeof(fNumber); // add bytes of additional data
 8001124:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001128:	f2a3 4204 	subw	r2, r3, #1028	; 0x404
 800112c:	6813      	ldr	r3, [r2, #0]
 800112e:	2137      	movs	r1, #55	; 0x37
 8001130:	f361 2311 	bfi	r3, r1, #8, #10
 8001134:	6013      	str	r3, [r2, #0]

	// ignore 12-byte data for device ID
	dataPacket.data[DESIOT_ADDITIONAL_DATA_SIZE] = VS;
 8001136:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800113a:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800113e:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8001142:	f2a2 4209 	subw	r2, r2, #1033	; 0x409
 8001146:	7812      	ldrb	r2, [r2, #0]
 8001148:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	memcpy(dataPacket.data + DESIOT_ADDITIONAL_DATA_SIZE + 1, &fNumber, sizeof(fNumber));
 800114c:	f107 030c 	add.w	r3, r7, #12
 8001150:	3303      	adds	r3, #3
 8001152:	3333      	adds	r3, #51	; 0x33
 8001154:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8001158:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
 800115c:	6812      	ldr	r2, [r2, #0]
 800115e:	601a      	str	r2, [r3, #0]

	DESIoT_sendDataPacket(DESIOT_CMD_LEN + DESIOT_DATALEN_LEN + dataPacket.dataLen,
 8001160:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001164:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8001168:	681b      	ldr	r3, [r3, #0]
 800116a:	f3c3 2309 	ubfx	r3, r3, #8, #10
 800116e:	b29b      	uxth	r3, r3
 8001170:	3303      	adds	r3, #3
 8001172:	f107 020c 	add.w	r2, r7, #12
 8001176:	4611      	mov	r1, r2
 8001178:	4618      	mov	r0, r3
 800117a:	f000 f89b 	bl	80012b4 <DESIoT_sendDataPacket>
			(uint8_t*)&dataPacket);
}
 800117e:	bf00      	nop
 8001180:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 8001184:	46bd      	mov	sp, r7
 8001186:	bd80      	pop	{r7, pc}

08001188 <DESIoT_assignString>:

void DESIoT_assignString(uint8_t VS, const char *str)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 800118e:	af00      	add	r7, sp, #0
 8001190:	4602      	mov	r2, r0
 8001192:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001196:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 800119a:	6019      	str	r1, [r3, #0]
 800119c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80011a0:	f2a3 4309 	subw	r3, r3, #1033	; 0x409
 80011a4:	701a      	strb	r2, [r3, #0]
	DESIoT_dataPacket_t dataPacket;
	const size_t strLength = strlen(str) + 1;
 80011a6:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80011aa:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80011ae:	6818      	ldr	r0, [r3, #0]
 80011b0:	f7fe ffce 	bl	8000150 <strlen>
 80011b4:	4603      	mov	r3, r0
 80011b6:	3301      	adds	r3, #1
 80011b8:	f8c7 340c 	str.w	r3, [r7, #1036]	; 0x40c
	dataPacket.cmd = DESIOT_CMD_ASSIGN_VIRTUAL_STORAGE;
 80011bc:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80011c0:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80011c4:	2200      	movs	r2, #0
 80011c6:	701a      	strb	r2, [r3, #0]
	dataPacket.dataLen = DESIOT_ADDITIONAL_DATA_SIZE + sizeof(VS) + strLength; // add bytes of additional data. + 1 null
 80011c8:	f8d7 340c 	ldr.w	r3, [r7, #1036]	; 0x40c
 80011cc:	b29b      	uxth	r3, r3
 80011ce:	3333      	adds	r3, #51	; 0x33
 80011d0:	b29b      	uxth	r3, r3
 80011d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80011d6:	b299      	uxth	r1, r3
 80011d8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80011dc:	f5a3 6281 	sub.w	r2, r3, #1032	; 0x408
 80011e0:	6813      	ldr	r3, [r2, #0]
 80011e2:	f361 2311 	bfi	r3, r1, #8, #10
 80011e6:	6013      	str	r3, [r2, #0]

	// ignore 12-byte data for device ID
	dataPacket.data[DESIOT_ADDITIONAL_DATA_SIZE] = VS;
 80011e8:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80011ec:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 80011f0:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80011f4:	f2a2 4209 	subw	r2, r2, #1033	; 0x409
 80011f8:	7812      	ldrb	r2, [r2, #0]
 80011fa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	memcpy(dataPacket.data + DESIOT_ADDITIONAL_DATA_SIZE + 1, str, strLength);
 80011fe:	f107 0308 	add.w	r3, r7, #8
 8001202:	3303      	adds	r3, #3
 8001204:	3333      	adds	r3, #51	; 0x33
 8001206:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 800120a:	f5a2 6182 	sub.w	r1, r2, #1040	; 0x410
 800120e:	f8d7 240c 	ldr.w	r2, [r7, #1036]	; 0x40c
 8001212:	6809      	ldr	r1, [r1, #0]
 8001214:	4618      	mov	r0, r3
 8001216:	f005 f801 	bl	800621c <memcpy>

	DESIoT_sendDataPacket(DESIOT_CMD_LEN + DESIOT_DATALEN_LEN + dataPacket.dataLen,
 800121a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800121e:	f5a3 6381 	sub.w	r3, r3, #1032	; 0x408
 8001222:	681b      	ldr	r3, [r3, #0]
 8001224:	f3c3 2309 	ubfx	r3, r3, #8, #10
 8001228:	b29b      	uxth	r3, r3
 800122a:	3303      	adds	r3, #3
 800122c:	f107 0208 	add.w	r2, r7, #8
 8001230:	4611      	mov	r1, r2
 8001232:	4618      	mov	r0, r3
 8001234:	f000 f83e 	bl	80012b4 <DESIoT_sendDataPacket>
			(uint8_t*)&dataPacket);
}
 8001238:	bf00      	nop
 800123a:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 800123e:	46bd      	mov	sp, r7
 8001240:	bd80      	pop	{r7, pc}

08001242 <DESIoT_readVS>:

void DESIoT_readVS(uint8_t VS)
{
 8001242:	b580      	push	{r7, lr}
 8001244:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8001248:	af00      	add	r7, sp, #0
 800124a:	4602      	mov	r2, r0
 800124c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001250:	f2a3 4309 	subw	r3, r3, #1033	; 0x409
 8001254:	701a      	strb	r2, [r3, #0]
	DESIoT_dataPacket_t dataPacket;
	dataPacket.cmd = DESIOT_CMD_READ_VIRTUAL_STORAGE;
 8001256:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800125a:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800125e:	2202      	movs	r2, #2
 8001260:	701a      	strb	r2, [r3, #0]
	dataPacket.dataLen = DESIOT_ADDITIONAL_DATA_SIZE + sizeof(VS); // add bytes of additional data
 8001262:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001266:	f2a3 4204 	subw	r2, r3, #1028	; 0x404
 800126a:	6813      	ldr	r3, [r2, #0]
 800126c:	2133      	movs	r1, #51	; 0x33
 800126e:	f361 2311 	bfi	r3, r1, #8, #10
 8001272:	6013      	str	r3, [r2, #0]

	// ignore 12-byte data for device ID
	dataPacket.data[DESIOT_ADDITIONAL_DATA_SIZE] = VS;
 8001274:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001278:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800127c:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8001280:	f2a2 4209 	subw	r2, r2, #1033	; 0x409
 8001284:	7812      	ldrb	r2, [r2, #0]
 8001286:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	DESIoT_sendDataPacket(DESIOT_CMD_LEN + DESIOT_DATALEN_LEN + dataPacket.dataLen,
 800128a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800128e:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	f3c3 2309 	ubfx	r3, r3, #8, #10
 8001298:	b29b      	uxth	r3, r3
 800129a:	3303      	adds	r3, #3
 800129c:	f107 020c 	add.w	r2, r7, #12
 80012a0:	4611      	mov	r1, r2
 80012a2:	4618      	mov	r0, r3
 80012a4:	f000 f806 	bl	80012b4 <DESIoT_sendDataPacket>
			(uint8_t*)&dataPacket);
}
 80012a8:	bf00      	nop
 80012aa:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
	...

080012b4 <DESIoT_sendDataPacket>:
extern uint8_t testMode;
/**
 *
 */
void DESIoT_sendDataPacket(const size_t dataLen, uint8_t *data)
{
 80012b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80012b8:	b089      	sub	sp, #36	; 0x24
 80012ba:	af00      	add	r7, sp, #0
 80012bc:	6078      	str	r0, [r7, #4]
 80012be:	6039      	str	r1, [r7, #0]
 80012c0:	466b      	mov	r3, sp
 80012c2:	461e      	mov	r6, r3
	uint8_t frame[DESIOT_HEADERS_LEN + dataLen + DESIOT_CRC_LEN];
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	3305      	adds	r3, #5
 80012c8:	61fb      	str	r3, [r7, #28]
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	3306      	adds	r3, #6
 80012ce:	2200      	movs	r2, #0
 80012d0:	4698      	mov	r8, r3
 80012d2:	4691      	mov	r9, r2
 80012d4:	f04f 0200 	mov.w	r2, #0
 80012d8:	f04f 0300 	mov.w	r3, #0
 80012dc:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80012e0:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80012e4:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	3306      	adds	r3, #6
 80012ec:	2200      	movs	r2, #0
 80012ee:	461c      	mov	r4, r3
 80012f0:	4615      	mov	r5, r2
 80012f2:	f04f 0200 	mov.w	r2, #0
 80012f6:	f04f 0300 	mov.w	r3, #0
 80012fa:	00eb      	lsls	r3, r5, #3
 80012fc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001300:	00e2      	lsls	r2, r4, #3
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	3306      	adds	r3, #6
 8001306:	3307      	adds	r3, #7
 8001308:	08db      	lsrs	r3, r3, #3
 800130a:	00db      	lsls	r3, r3, #3
 800130c:	ebad 0d03 	sub.w	sp, sp, r3
 8001310:	466b      	mov	r3, sp
 8001312:	3300      	adds	r3, #0
 8001314:	61bb      	str	r3, [r7, #24]
	memset(frame, 0, sizeof(frame));
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	3306      	adds	r3, #6
 800131a:	461a      	mov	r2, r3
 800131c:	2100      	movs	r1, #0
 800131e:	69b8      	ldr	r0, [r7, #24]
 8001320:	f004 ff8a 	bl	8006238 <memset>

	DESIoT_headFrame_t *headFrame = (DESIoT_headFrame_t*)frame;
 8001324:	69bb      	ldr	r3, [r7, #24]
 8001326:	617b      	str	r3, [r7, #20]
	DESIoT_trailFrame_t *trailFrame = (DESIoT_trailFrame_t*)(frame + sizeof(frame) - (DESIOT_TRAIL_LEN + DESIOT_CRC_LEN));
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	3302      	adds	r3, #2
 800132c:	69ba      	ldr	r2, [r7, #24]
 800132e:	4413      	add	r3, r2
 8001330:	613b      	str	r3, [r7, #16]

	headFrame->h1 = DESIOT_H1_DEFAULT;
 8001332:	697b      	ldr	r3, [r7, #20]
 8001334:	2207      	movs	r2, #7
 8001336:	701a      	strb	r2, [r3, #0]
	headFrame->h2 = DESIOT_H2_DEFAULT;
 8001338:	697b      	ldr	r3, [r7, #20]
 800133a:	2217      	movs	r2, #23
 800133c:	705a      	strb	r2, [r3, #1]
	trailFrame->t1 = DESIOT_T1_DEFAULT;
 800133e:	693b      	ldr	r3, [r7, #16]
 8001340:	2270      	movs	r2, #112	; 0x70
 8001342:	701a      	strb	r2, [r3, #0]
	trailFrame->t2 = DESIOT_T2_DEFAULT;
 8001344:	693b      	ldr	r3, [r7, #16]
 8001346:	2271      	movs	r2, #113	; 0x71
 8001348:	705a      	strb	r2, [r3, #1]

	{
		size_t i = DESIOT_HEAD_LEN;
 800134a:	2302      	movs	r3, #2
 800134c:	60fb      	str	r3, [r7, #12]
		// set data packet to frame
		memcpy(frame + i, data, dataLen);
 800134e:	69ba      	ldr	r2, [r7, #24]
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	4413      	add	r3, r2
 8001354:	687a      	ldr	r2, [r7, #4]
 8001356:	6839      	ldr	r1, [r7, #0]
 8001358:	4618      	mov	r0, r3
 800135a:	f004 ff5f 	bl	800621c <memcpy>

		// set config ID
		i += (DESIOT_CMD_LEN + DESIOT_DATALEN_LEN);
 800135e:	68fb      	ldr	r3, [r7, #12]
 8001360:	3303      	adds	r3, #3
 8001362:	60fb      	str	r3, [r7, #12]
		memcpy(frame + i, hFrame.config_id, DESIOT_CONFIG_ID_SIZE);
 8001364:	69ba      	ldr	r2, [r7, #24]
 8001366:	68fb      	ldr	r3, [r7, #12]
 8001368:	441a      	add	r2, r3
 800136a:	4b2d      	ldr	r3, [pc, #180]	; (8001420 <DESIoT_sendDataPacket+0x16c>)
 800136c:	3319      	adds	r3, #25
 800136e:	6818      	ldr	r0, [r3, #0]
 8001370:	6859      	ldr	r1, [r3, #4]
 8001372:	689d      	ldr	r5, [r3, #8]
 8001374:	68dc      	ldr	r4, [r3, #12]
 8001376:	6010      	str	r0, [r2, #0]
 8001378:	6051      	str	r1, [r2, #4]
 800137a:	6095      	str	r5, [r2, #8]
 800137c:	60d4      	str	r4, [r2, #12]
 800137e:	6918      	ldr	r0, [r3, #16]
 8001380:	6959      	ldr	r1, [r3, #20]
 8001382:	6110      	str	r0, [r2, #16]
 8001384:	6151      	str	r1, [r2, #20]
 8001386:	7e1b      	ldrb	r3, [r3, #24]
 8001388:	7613      	strb	r3, [r2, #24]
		// set device ID
		i += DESIOT_CONFIG_ID_SIZE;
 800138a:	68fb      	ldr	r3, [r7, #12]
 800138c:	3319      	adds	r3, #25
 800138e:	60fb      	str	r3, [r7, #12]
		memcpy(frame + i, hFrame.device_id, DESIOT_DEVICE_ID_SIZE);
 8001390:	69ba      	ldr	r2, [r7, #24]
 8001392:	68fb      	ldr	r3, [r7, #12]
 8001394:	4413      	add	r3, r2
 8001396:	4a22      	ldr	r2, [pc, #136]	; (8001420 <DESIoT_sendDataPacket+0x16c>)
 8001398:	461d      	mov	r5, r3
 800139a:	4614      	mov	r4, r2
 800139c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800139e:	6028      	str	r0, [r5, #0]
 80013a0:	6069      	str	r1, [r5, #4]
 80013a2:	60aa      	str	r2, [r5, #8]
 80013a4:	60eb      	str	r3, [r5, #12]
 80013a6:	cc03      	ldmia	r4!, {r0, r1}
 80013a8:	6128      	str	r0, [r5, #16]
 80013aa:	6169      	str	r1, [r5, #20]
 80013ac:	7823      	ldrb	r3, [r4, #0]
 80013ae:	762b      	strb	r3, [r5, #24]
	}


	trailFrame->crc = DESIoT_Compute_CRC16(frame + DESIOT_HEAD_LEN, dataLen);
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	3302      	adds	r3, #2
 80013b4:	687a      	ldr	r2, [r7, #4]
 80013b6:	4611      	mov	r1, r2
 80013b8:	4618      	mov	r0, r3
 80013ba:	f000 f835 	bl	8001428 <DESIoT_Compute_CRC16>
 80013be:	4603      	mov	r3, r0
 80013c0:	461a      	mov	r2, r3
 80013c2:	693b      	ldr	r3, [r7, #16]
 80013c4:	805a      	strh	r2, [r3, #2]

	if(testMode && !data[3 + DESIOT_ADDITIONAL_DATA_SIZE])
 80013c6:	4b17      	ldr	r3, [pc, #92]	; (8001424 <DESIoT_sendDataPacket+0x170>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d01c      	beq.n	8001408 <DESIoT_sendDataPacket+0x154>
 80013ce:	683b      	ldr	r3, [r7, #0]
 80013d0:	3335      	adds	r3, #53	; 0x35
 80013d2:	781b      	ldrb	r3, [r3, #0]
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d117      	bne.n	8001408 <DESIoT_sendDataPacket+0x154>
	{
		uint16_t randByte = rand() % (sizeof(frame) - 1);
 80013d8:	f004 ff36 	bl	8006248 <rand>
 80013dc:	4603      	mov	r3, r0
 80013de:	461a      	mov	r2, r3
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	3305      	adds	r3, #5
 80013e4:	fbb2 f1f3 	udiv	r1, r2, r3
 80013e8:	fb01 f303 	mul.w	r3, r1, r3
 80013ec:	1ad3      	subs	r3, r2, r3
 80013ee:	817b      	strh	r3, [r7, #10]
		frame[randByte] = !frame[randByte];
 80013f0:	897b      	ldrh	r3, [r7, #10]
 80013f2:	69ba      	ldr	r2, [r7, #24]
 80013f4:	5cd3      	ldrb	r3, [r2, r3]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	bf0c      	ite	eq
 80013fa:	2301      	moveq	r3, #1
 80013fc:	2300      	movne	r3, #0
 80013fe:	b2da      	uxtb	r2, r3
 8001400:	897b      	ldrh	r3, [r7, #10]
 8001402:	4611      	mov	r1, r2
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	54d1      	strb	r1, [r2, r3]
	}


	DESIOT_SENDBYTES_F_NAME(sizeof(frame), frame);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	3306      	adds	r3, #6
 800140c:	69b9      	ldr	r1, [r7, #24]
 800140e:	4618      	mov	r0, r3
 8001410:	f001 f89e 	bl	8002550 <DESIoT_sendBytes>
 8001414:	46b5      	mov	sp, r6
}
 8001416:	bf00      	nop
 8001418:	3724      	adds	r7, #36	; 0x24
 800141a:	46bd      	mov	sp, r7
 800141c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001420:	20000290 	.word	0x20000290
 8001424:	20000be8 	.word	0x20000be8

08001428 <DESIoT_Compute_CRC16>:
		crctable16[divident] = curByte;
	}
}

uint16_t DESIoT_Compute_CRC16(uint8_t *bytes, const int32_t BYTES_LEN)
{
 8001428:	b480      	push	{r7}
 800142a:	b087      	sub	sp, #28
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
	uint16_t crc = 0;
 8001432:	2300      	movs	r3, #0
 8001434:	82fb      	strh	r3, [r7, #22]

	for (int32_t i = 0; i < BYTES_LEN; i++)
 8001436:	2300      	movs	r3, #0
 8001438:	613b      	str	r3, [r7, #16]
 800143a:	e019      	b.n	8001470 <DESIoT_Compute_CRC16+0x48>
	{
		uint8_t b = bytes[i];
 800143c:	693b      	ldr	r3, [r7, #16]
 800143e:	687a      	ldr	r2, [r7, #4]
 8001440:	4413      	add	r3, r2
 8001442:	781b      	ldrb	r3, [r3, #0]
 8001444:	73fb      	strb	r3, [r7, #15]

		/* XOR-in next input byte into MSB of crc, that's our new intermediate divident */
		uint8_t pos = (uint8_t)((crc >> 8) ^ b);
 8001446:	8afb      	ldrh	r3, [r7, #22]
 8001448:	0a1b      	lsrs	r3, r3, #8
 800144a:	b29b      	uxth	r3, r3
 800144c:	b2da      	uxtb	r2, r3
 800144e:	7bfb      	ldrb	r3, [r7, #15]
 8001450:	4053      	eors	r3, r2
 8001452:	73bb      	strb	r3, [r7, #14]
		/* Shift out the MSB used for division per lookuptable and XOR with the remainder */
		crc = (uint16_t)((crc << 8) ^ (uint16_t)(crctable16[pos]));
 8001454:	8afb      	ldrh	r3, [r7, #22]
 8001456:	021b      	lsls	r3, r3, #8
 8001458:	b21a      	sxth	r2, r3
 800145a:	7bbb      	ldrb	r3, [r7, #14]
 800145c:	4909      	ldr	r1, [pc, #36]	; (8001484 <DESIoT_Compute_CRC16+0x5c>)
 800145e:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001462:	b21b      	sxth	r3, r3
 8001464:	4053      	eors	r3, r2
 8001466:	b21b      	sxth	r3, r3
 8001468:	82fb      	strh	r3, [r7, #22]
	for (int32_t i = 0; i < BYTES_LEN; i++)
 800146a:	693b      	ldr	r3, [r7, #16]
 800146c:	3301      	adds	r3, #1
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	693a      	ldr	r2, [r7, #16]
 8001472:	683b      	ldr	r3, [r7, #0]
 8001474:	429a      	cmp	r2, r3
 8001476:	dbe1      	blt.n	800143c <DESIoT_Compute_CRC16+0x14>
	}
	//	printf("\nHERE 3");

	return crc;
 8001478:	8afb      	ldrh	r3, [r7, #22]
}
 800147a:	4618      	mov	r0, r3
 800147c:	371c      	adds	r7, #28
 800147e:	46bd      	mov	sp, r7
 8001480:	bc80      	pop	{r7}
 8001482:	4770      	bx	lr
 8001484:	20000000 	.word	0x20000000

08001488 <DESIoT_CBUF_putByte>:

void DESIoT_CBUF_putByte(DESIoT_CBUF_t *hCBuf, uint8_t rx)
{
 8001488:	b480      	push	{r7}
 800148a:	b083      	sub	sp, #12
 800148c:	af00      	add	r7, sp, #0
 800148e:	6078      	str	r0, [r7, #4]
 8001490:	460b      	mov	r3, r1
 8001492:	70fb      	strb	r3, [r7, #3]
	hCBuf->buffer[hCBuf->end++] = rx;
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	885b      	ldrh	r3, [r3, #2]
 8001498:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800149c:	b299      	uxth	r1, r3
 800149e:	1c4b      	adds	r3, r1, #1
 80014a0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014a4:	b298      	uxth	r0, r3
 80014a6:	687a      	ldr	r2, [r7, #4]
 80014a8:	8853      	ldrh	r3, [r2, #2]
 80014aa:	f360 0309 	bfi	r3, r0, #0, #10
 80014ae:	8053      	strh	r3, [r2, #2]
 80014b0:	460a      	mov	r2, r1
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	78fa      	ldrb	r2, [r7, #3]
 80014b8:	719a      	strb	r2, [r3, #6]
}
 80014ba:	bf00      	nop
 80014bc:	370c      	adds	r7, #12
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr

080014c4 <DESIoT_CBUF_isEmpty>:

uint8_t DESIoT_CBUF_isEmpty(DESIoT_CBUF_t *hCBuf) {
 80014c4:	b480      	push	{r7}
 80014c6:	b083      	sub	sp, #12
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	6078      	str	r0, [r7, #4]
	return hCBuf->end == hCBuf->start;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	885b      	ldrh	r3, [r3, #2]
 80014d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014d4:	b29a      	uxth	r2, r3
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	881b      	ldrh	r3, [r3, #0]
 80014da:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014de:	b29b      	uxth	r3, r3
 80014e0:	429a      	cmp	r2, r3
 80014e2:	bf0c      	ite	eq
 80014e4:	2301      	moveq	r3, #1
 80014e6:	2300      	movne	r3, #0
 80014e8:	b2db      	uxtb	r3, r3
}
 80014ea:	4618      	mov	r0, r3
 80014ec:	370c      	adds	r7, #12
 80014ee:	46bd      	mov	sp, r7
 80014f0:	bc80      	pop	{r7}
 80014f2:	4770      	bx	lr

080014f4 <DESIoT_CBUF_getByte>:

uint8_t DESIoT_CBUF_getByte(DESIoT_CBUF_t *hCBuf, uint8_t *rx)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
 80014fc:	6039      	str	r1, [r7, #0]
	if (hCBuf->end != hCBuf->start)
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	885b      	ldrh	r3, [r3, #2]
 8001502:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001506:	b29a      	uxth	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	881b      	ldrh	r3, [r3, #0]
 800150c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001510:	b29b      	uxth	r3, r3
 8001512:	429a      	cmp	r2, r3
 8001514:	d015      	beq.n	8001542 <DESIoT_CBUF_getByte+0x4e>
	{
		*rx = hCBuf->buffer[hCBuf->start++];
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	881b      	ldrh	r3, [r3, #0]
 800151a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800151e:	b299      	uxth	r1, r3
 8001520:	1c4b      	adds	r3, r1, #1
 8001522:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001526:	b298      	uxth	r0, r3
 8001528:	687a      	ldr	r2, [r7, #4]
 800152a:	8813      	ldrh	r3, [r2, #0]
 800152c:	f360 0309 	bfi	r3, r0, #0, #10
 8001530:	8013      	strh	r3, [r2, #0]
 8001532:	460a      	mov	r2, r1
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	4413      	add	r3, r2
 8001538:	799a      	ldrb	r2, [r3, #6]
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	701a      	strb	r2, [r3, #0]
		return DESIOT_CBUF_OK;
 800153e:	2300      	movs	r3, #0
 8001540:	e000      	b.n	8001544 <DESIoT_CBUF_getByte+0x50>
	}

	return DESIOT_CBUF_ERROR;
 8001542:	2301      	movs	r3, #1
}
 8001544:	4618      	mov	r0, r3
 8001546:	370c      	adds	r7, #12
 8001548:	46bd      	mov	sp, r7
 800154a:	bc80      	pop	{r7}
 800154c:	4770      	bx	lr

0800154e <DESIoT_setUpStartOfParsing>:

void DESIoT_setUpStartOfParsing(DESIoT_Frame_Hander_t *hFrame, DESIoT_CBUF_t *curCBuf)
{
 800154e:	b580      	push	{r7, lr}
 8001550:	b082      	sub	sp, #8
 8001552:	af00      	add	r7, sp, #0
 8001554:	6078      	str	r0, [r7, #4]
 8001556:	6039      	str	r1, [r7, #0]
	hFrame->millis = DESIoT_millis();
 8001558:	f001 f812 	bl	8002580 <DESIoT_millis>
 800155c:	4602      	mov	r2, r0
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	635a      	str	r2, [r3, #52]	; 0x34
	hFrame->curCBuf = curCBuf;
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	683a      	ldr	r2, [r7, #0]
 8001566:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
	hFrame->curCBuf->startRestore = hFrame->curCBuf->start;
 800156a:	687b      	ldr	r3, [r7, #4]
 800156c:	f8d3 3440 	ldr.w	r3, [r3, #1088]	; 0x440
 8001570:	687a      	ldr	r2, [r7, #4]
 8001572:	f8d2 2440 	ldr.w	r2, [r2, #1088]	; 0x440
 8001576:	881b      	ldrh	r3, [r3, #0]
 8001578:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800157c:	b299      	uxth	r1, r3
 800157e:	8893      	ldrh	r3, [r2, #4]
 8001580:	f361 0309 	bfi	r3, r1, #0, #10
 8001584:	8093      	strh	r3, [r2, #4]
}
 8001586:	bf00      	nop
 8001588:	3708      	adds	r7, #8
 800158a:	46bd      	mov	sp, r7
 800158c:	bd80      	pop	{r7, pc}
	...

08001590 <DESIoT_FRAME_parsing>:

void DESIoT_FRAME_parsing(DESIoT_Frame_Hander_t *hFrame, uint8_t byte, DESIoT_CBUF_t *curCBuf)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b086      	sub	sp, #24
 8001594:	af00      	add	r7, sp, #0
 8001596:	60f8      	str	r0, [r7, #12]
 8001598:	460b      	mov	r3, r1
 800159a:	607a      	str	r2, [r7, #4]
 800159c:	72fb      	strb	r3, [r7, #11]
	switch (hFrame->index)
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80015a4:	2b04      	cmp	r3, #4
 80015a6:	d84c      	bhi.n	8001642 <DESIoT_FRAME_parsing+0xb2>
 80015a8:	a201      	add	r2, pc, #4	; (adr r2, 80015b0 <DESIoT_FRAME_parsing+0x20>)
 80015aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80015ae:	bf00      	nop
 80015b0:	080015c5 	.word	0x080015c5
 80015b4:	08001603 	.word	0x08001603
 80015b8:	08001625 	.word	0x08001625
 80015bc:	0800162f 	.word	0x0800162f
 80015c0:	08001639 	.word	0x08001639
	{
	case DESIOT_H1_INDEX:
		hFrame->curCBuf->startRestore = hFrame->curCBuf->start;
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	f8d3 3440 	ldr.w	r3, [r3, #1088]	; 0x440
 80015ca:	68fa      	ldr	r2, [r7, #12]
 80015cc:	f8d2 2440 	ldr.w	r2, [r2, #1088]	; 0x440
 80015d0:	881b      	ldrh	r3, [r3, #0]
 80015d2:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80015d6:	b299      	uxth	r1, r3
 80015d8:	8893      	ldrh	r3, [r2, #4]
 80015da:	f361 0309 	bfi	r3, r1, #0, #10
 80015de:	8093      	strh	r3, [r2, #4]
		if (byte == DESIOT_H1_DEFAULT)
 80015e0:	7afb      	ldrb	r3, [r7, #11]
 80015e2:	2b07      	cmp	r3, #7
 80015e4:	d104      	bne.n	80015f0 <DESIoT_FRAME_parsing+0x60>
			hFrame->frame.h1 = byte;
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	7afa      	ldrb	r2, [r7, #11]
 80015ea:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

		else
			DESIOT_SET_FRAME_FAILED_STATUS(hFrame->status);
		break;
 80015ee:	e0cc      	b.n	800178a <DESIoT_FRAME_parsing+0x1fa>
			DESIOT_SET_FRAME_FAILED_STATUS(hFrame->status);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80015f6:	3b01      	subs	r3, #1
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	68fb      	ldr	r3, [r7, #12]
 80015fc:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		break;
 8001600:	e0c3      	b.n	800178a <DESIoT_FRAME_parsing+0x1fa>
	case DESIOT_H2_INDEX:
		if (byte == DESIOT_H2_DEFAULT)
 8001602:	7afb      	ldrb	r3, [r7, #11]
 8001604:	2b17      	cmp	r3, #23
 8001606:	d104      	bne.n	8001612 <DESIoT_FRAME_parsing+0x82>
			hFrame->frame.h2 = byte;
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	7afa      	ldrb	r2, [r7, #11]
 800160c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		else
			DESIOT_SET_FRAME_FAILED_STATUS(hFrame->status);
		break;
 8001610:	e0bb      	b.n	800178a <DESIoT_FRAME_parsing+0x1fa>
			DESIOT_SET_FRAME_FAILED_STATUS(hFrame->status);
 8001612:	68fb      	ldr	r3, [r7, #12]
 8001614:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001618:	3b01      	subs	r3, #1
 800161a:	b2da      	uxtb	r2, r3
 800161c:	68fb      	ldr	r3, [r7, #12]
 800161e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		break;
 8001622:	e0b2      	b.n	800178a <DESIoT_FRAME_parsing+0x1fa>
	case DESIOT_CMD_INDEX:
		hFrame->frame.dataPacket.cmd = byte;
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	7afa      	ldrb	r2, [r7, #11]
 8001628:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		break;
 800162c:	e0ad      	b.n	800178a <DESIoT_FRAME_parsing+0x1fa>
	case DESIOT_DATALEN_INDEX:
		hFrame->frame.dataPacket.dataLenArr[0] = byte;
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	7afa      	ldrb	r2, [r7, #11]
 8001632:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		break;
 8001636:	e0a8      	b.n	800178a <DESIoT_FRAME_parsing+0x1fa>
	case DESIOT_DATALEN_INDEX + 1:
	hFrame->frame.dataPacket.dataLenArr[1] = byte;
 8001638:	68fb      	ldr	r3, [r7, #12]
 800163a:	7afa      	ldrb	r2, [r7, #11]
 800163c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	break;
 8001640:	e0a3      	b.n	800178a <DESIoT_FRAME_parsing+0x1fa>
	default:
		if (hFrame->index == (DESIOT_HEAD_FRAME_LEN + hFrame->frame.dataPacket.dataLen)) // t1
 8001642:	68fb      	ldr	r3, [r7, #12]
 8001644:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001648:	4619      	mov	r1, r3
 800164a:	68fb      	ldr	r3, [r7, #12]
 800164c:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 8001650:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001654:	f003 0303 	and.w	r3, r3, #3
 8001658:	021b      	lsls	r3, r3, #8
 800165a:	4313      	orrs	r3, r2
 800165c:	b29b      	uxth	r3, r3
 800165e:	3305      	adds	r3, #5
 8001660:	4299      	cmp	r1, r3
 8001662:	d110      	bne.n	8001686 <DESIoT_FRAME_parsing+0xf6>
		{
			if (byte == DESIOT_T1_DEFAULT)
 8001664:	7afb      	ldrb	r3, [r7, #11]
 8001666:	2b70      	cmp	r3, #112	; 0x70
 8001668:	d104      	bne.n	8001674 <DESIoT_FRAME_parsing+0xe4>
				hFrame->frame.t1 = byte;
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	7afa      	ldrb	r2, [r7, #11]
 800166e:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
		}
		else
		{
			hFrame->frame.dataPacket.data[hFrame->index - (DESIOT_HEAD_LEN + DESIOT_CMD_LEN + DESIOT_DATALEN_LEN)] = byte;
		}
		break;
 8001672:	e089      	b.n	8001788 <DESIoT_FRAME_parsing+0x1f8>
				DESIOT_SET_FRAME_FAILED_STATUS(hFrame->status);
 8001674:	68fb      	ldr	r3, [r7, #12]
 8001676:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800167a:	3b01      	subs	r3, #1
 800167c:	b2da      	uxtb	r2, r3
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		break;
 8001684:	e080      	b.n	8001788 <DESIoT_FRAME_parsing+0x1f8>
		else if (hFrame->index == (DESIOT_HEAD_FRAME_LEN + hFrame->frame.dataPacket.dataLen + 1)) // t2
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800168c:	4619      	mov	r1, r3
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 8001694:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	021b      	lsls	r3, r3, #8
 800169e:	4313      	orrs	r3, r2
 80016a0:	b29b      	uxth	r3, r3
 80016a2:	3306      	adds	r3, #6
 80016a4:	4299      	cmp	r1, r3
 80016a6:	d110      	bne.n	80016ca <DESIoT_FRAME_parsing+0x13a>
			if (byte == DESIOT_T2_DEFAULT)
 80016a8:	7afb      	ldrb	r3, [r7, #11]
 80016aa:	2b71      	cmp	r3, #113	; 0x71
 80016ac:	d104      	bne.n	80016b8 <DESIoT_FRAME_parsing+0x128>
				hFrame->frame.t2 = byte;
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	7afa      	ldrb	r2, [r7, #11]
 80016b2:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
		break;
 80016b6:	e067      	b.n	8001788 <DESIoT_FRAME_parsing+0x1f8>
				DESIOT_SET_FRAME_FAILED_STATUS(hFrame->status);
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80016be:	3b01      	subs	r3, #1
 80016c0:	b2da      	uxtb	r2, r3
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		break;
 80016c8:	e05e      	b.n	8001788 <DESIoT_FRAME_parsing+0x1f8>
		else if (hFrame->index == (DESIOT_HEAD_FRAME_LEN + hFrame->frame.dataPacket.dataLen + 2)) // crc1
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80016d0:	4619      	mov	r1, r3
 80016d2:	68fb      	ldr	r3, [r7, #12]
 80016d4:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 80016d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016dc:	f003 0303 	and.w	r3, r3, #3
 80016e0:	021b      	lsls	r3, r3, #8
 80016e2:	4313      	orrs	r3, r2
 80016e4:	b29b      	uxth	r3, r3
 80016e6:	3307      	adds	r3, #7
 80016e8:	4299      	cmp	r1, r3
 80016ea:	d104      	bne.n	80016f6 <DESIoT_FRAME_parsing+0x166>
			hFrame->frame.crcArr[0] = byte;
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	7afa      	ldrb	r2, [r7, #11]
 80016f0:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
		break;
 80016f4:	e048      	b.n	8001788 <DESIoT_FRAME_parsing+0x1f8>
		else if (hFrame->index == (DESIOT_HEAD_FRAME_LEN + hFrame->frame.dataPacket.dataLen + 3)) // crc2
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80016fc:	4619      	mov	r1, r3
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 8001704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001708:	f003 0303 	and.w	r3, r3, #3
 800170c:	021b      	lsls	r3, r3, #8
 800170e:	4313      	orrs	r3, r2
 8001710:	b29b      	uxth	r3, r3
 8001712:	3308      	adds	r3, #8
 8001714:	4299      	cmp	r1, r3
 8001716:	d12e      	bne.n	8001776 <DESIoT_FRAME_parsing+0x1e6>
			hFrame->frame.crcArr[1] = byte;
 8001718:	68fb      	ldr	r3, [r7, #12]
 800171a:	7afa      	ldrb	r2, [r7, #11]
 800171c:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
			uint16_t crcCalculate = DESIoT_Compute_CRC16((uint8_t *)&hFrame->frame.dataPacket, DESIOT_CMD_LEN + DESIOT_DATALEN_LEN + hFrame->frame.dataPacket.dataLen);
 8001720:	68fb      	ldr	r3, [r7, #12]
 8001722:	f103 003a 	add.w	r0, r3, #58	; 0x3a
 8001726:	68fb      	ldr	r3, [r7, #12]
 8001728:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 800172c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001730:	f003 0303 	and.w	r3, r3, #3
 8001734:	021b      	lsls	r3, r3, #8
 8001736:	4313      	orrs	r3, r2
 8001738:	b29b      	uxth	r3, r3
 800173a:	3303      	adds	r3, #3
 800173c:	4619      	mov	r1, r3
 800173e:	f7ff fe73 	bl	8001428 <DESIoT_Compute_CRC16>
 8001742:	4603      	mov	r3, r0
 8001744:	82fb      	strh	r3, [r7, #22]
			if (crcCalculate == hFrame->frame.crc)
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f8b3 343e 	ldrh.w	r3, [r3, #1086]	; 0x43e
 800174c:	8afa      	ldrh	r2, [r7, #22]
 800174e:	429a      	cmp	r2, r3
 8001750:	d108      	bne.n	8001764 <DESIoT_FRAME_parsing+0x1d4>
				DESIOT_SET_FRAME_SUCCESS_STATUS(hFrame->status);
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001758:	3b02      	subs	r3, #2
 800175a:	b2da      	uxtb	r2, r3
 800175c:	68fb      	ldr	r3, [r7, #12]
 800175e:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		break;
 8001762:	e011      	b.n	8001788 <DESIoT_FRAME_parsing+0x1f8>
				DESIOT_SET_FRAME_FAILED_STATUS(hFrame->status);
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800176a:	3b01      	subs	r3, #1
 800176c:	b2da      	uxtb	r2, r3
 800176e:	68fb      	ldr	r3, [r7, #12]
 8001770:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		break;
 8001774:	e008      	b.n	8001788 <DESIoT_FRAME_parsing+0x1f8>
			hFrame->frame.dataPacket.data[hFrame->index - (DESIOT_HEAD_LEN + DESIOT_CMD_LEN + DESIOT_DATALEN_LEN)] = byte;
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800177c:	3b05      	subs	r3, #5
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	4413      	add	r3, r2
 8001782:	7afa      	ldrb	r2, [r7, #11]
 8001784:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		break;
 8001788:	bf00      	nop
	}
	hFrame->index++;
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001790:	3301      	adds	r3, #1
 8001792:	b2da      	uxtb	r2, r3
 8001794:	68fb      	ldr	r3, [r7, #12]
 8001796:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 800179a:	bf00      	nop
 800179c:	3718      	adds	r7, #24
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	bf00      	nop

080017a4 <DESIoT_frameFailedHandler>:


void DESIoT_frameFailedHandler()
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	af00      	add	r7, sp, #0
	switch (hFrame.status)
 80017a8:	4b05      	ldr	r3, [pc, #20]	; (80017c0 <DESIoT_frameFailedHandler+0x1c>)
 80017aa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d104      	bne.n	80017bc <DESIoT_frameFailedHandler+0x18>
	{
	case DESIOT_FRAME_GATEWAY_FAILED:
		DESIoT_restartFrameIndexes();
 80017b2:	f000 f819 	bl	80017e8 <DESIoT_restartFrameIndexes>
		DESIoT_restartCBufIndexes();
 80017b6:	f000 f827 	bl	8001808 <DESIoT_restartCBufIndexes>
		break;
 80017ba:	bf00      	nop
	}
}
 80017bc:	bf00      	nop
 80017be:	bd80      	pop	{r7, pc}
 80017c0:	20000290 	.word	0x20000290

080017c4 <DESIoT_frameSuccessHandler>:

void DESIoT_frameSuccessHandler()
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	af00      	add	r7, sp, #0
	switch (hFrame.status)
 80017c8:	4b06      	ldr	r3, [pc, #24]	; (80017e4 <DESIoT_frameSuccessHandler+0x20>)
 80017ca:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80017ce:	2b01      	cmp	r3, #1
 80017d0:	d104      	bne.n	80017dc <DESIoT_frameSuccessHandler+0x18>
	{
	case DESIOT_FRAME_GATEWAY_SUCCESS:

		DESIoT_execSuccessfulFrame();
 80017d2:	f000 f89b 	bl	800190c <DESIoT_execSuccessfulFrame>
		DESIoT_restartFrameIndexes();
 80017d6:	f000 f807 	bl	80017e8 <DESIoT_restartFrameIndexes>

		break;
 80017da:	e000      	b.n	80017de <DESIoT_frameSuccessHandler+0x1a>

	default:
		break;
 80017dc:	bf00      	nop
	}
}
 80017de:	bf00      	nop
 80017e0:	bd80      	pop	{r7, pc}
 80017e2:	bf00      	nop
 80017e4:	20000290 	.word	0x20000290

080017e8 <DESIoT_restartFrameIndexes>:

void DESIoT_restartFrameIndexes()
{
 80017e8:	b480      	push	{r7}
 80017ea:	af00      	add	r7, sp, #0
	hFrame.status = DESIOT_FRAME_IDLE;
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <DESIoT_restartFrameIndexes+0x1c>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	hFrame.index = 0;
 80017f4:	4b03      	ldr	r3, [pc, #12]	; (8001804 <DESIoT_restartFrameIndexes+0x1c>)
 80017f6:	2200      	movs	r2, #0
 80017f8:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 80017fc:	bf00      	nop
 80017fe:	46bd      	mov	sp, r7
 8001800:	bc80      	pop	{r7}
 8001802:	4770      	bx	lr
 8001804:	20000290 	.word	0x20000290

08001808 <DESIoT_restartCBufIndexes>:

void DESIoT_restartCBufIndexes()
{
 8001808:	b480      	push	{r7}
 800180a:	b083      	sub	sp, #12
 800180c:	af00      	add	r7, sp, #0
	hFrame.curCBuf->start = hFrame.curCBuf->startRestore;
 800180e:	4b2a      	ldr	r3, [pc, #168]	; (80018b8 <DESIoT_restartCBufIndexes+0xb0>)
 8001810:	f8d3 3440 	ldr.w	r3, [r3, #1088]	; 0x440
 8001814:	4a28      	ldr	r2, [pc, #160]	; (80018b8 <DESIoT_restartCBufIndexes+0xb0>)
 8001816:	f8d2 2440 	ldr.w	r2, [r2, #1088]	; 0x440
 800181a:	889b      	ldrh	r3, [r3, #4]
 800181c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001820:	b299      	uxth	r1, r3
 8001822:	8813      	ldrh	r3, [r2, #0]
 8001824:	f361 0309 	bfi	r3, r1, #0, #10
 8001828:	8013      	strh	r3, [r2, #0]

	// Flush to next headers
	uint16_t currentCBufEnd = hFrame.curCBuf->end;
 800182a:	4b23      	ldr	r3, [pc, #140]	; (80018b8 <DESIoT_restartCBufIndexes+0xb0>)
 800182c:	f8d3 3440 	ldr.w	r3, [r3, #1088]	; 0x440
 8001830:	885b      	ldrh	r3, [r3, #2]
 8001832:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001836:	b29b      	uxth	r3, r3
 8001838:	80fb      	strh	r3, [r7, #6]
	for (; hFrame.curCBuf->start != currentCBufEnd; hFrame.curCBuf->start++)
 800183a:	e02b      	b.n	8001894 <DESIoT_restartCBufIndexes+0x8c>
	{
		// check for H1 and H2 mathch
		if (hFrame.curCBuf->buffer[hFrame.curCBuf->start] == DESIOT_H1_DEFAULT && hFrame.curCBuf->buffer[hFrame.curCBuf->start + 1] == DESIOT_H2_DEFAULT)
 800183c:	4b1e      	ldr	r3, [pc, #120]	; (80018b8 <DESIoT_restartCBufIndexes+0xb0>)
 800183e:	f8d3 3440 	ldr.w	r3, [r3, #1088]	; 0x440
 8001842:	4a1d      	ldr	r2, [pc, #116]	; (80018b8 <DESIoT_restartCBufIndexes+0xb0>)
 8001844:	f8d2 2440 	ldr.w	r2, [r2, #1088]	; 0x440
 8001848:	8812      	ldrh	r2, [r2, #0]
 800184a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800184e:	b292      	uxth	r2, r2
 8001850:	4413      	add	r3, r2
 8001852:	799b      	ldrb	r3, [r3, #6]
 8001854:	2b07      	cmp	r3, #7
 8001856:	d10e      	bne.n	8001876 <DESIoT_restartCBufIndexes+0x6e>
 8001858:	4b17      	ldr	r3, [pc, #92]	; (80018b8 <DESIoT_restartCBufIndexes+0xb0>)
 800185a:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
 800185e:	4b16      	ldr	r3, [pc, #88]	; (80018b8 <DESIoT_restartCBufIndexes+0xb0>)
 8001860:	f8d3 3440 	ldr.w	r3, [r3, #1088]	; 0x440
 8001864:	881b      	ldrh	r3, [r3, #0]
 8001866:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800186a:	b29b      	uxth	r3, r3
 800186c:	3301      	adds	r3, #1
 800186e:	4413      	add	r3, r2
 8001870:	799b      	ldrb	r3, [r3, #6]
 8001872:	2b17      	cmp	r3, #23
 8001874:	d01a      	beq.n	80018ac <DESIoT_restartCBufIndexes+0xa4>
	for (; hFrame.curCBuf->start != currentCBufEnd; hFrame.curCBuf->start++)
 8001876:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <DESIoT_restartCBufIndexes+0xb0>)
 8001878:	f8d3 3440 	ldr.w	r3, [r3, #1088]	; 0x440
 800187c:	881a      	ldrh	r2, [r3, #0]
 800187e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001882:	b292      	uxth	r2, r2
 8001884:	3201      	adds	r2, #1
 8001886:	f3c2 0209 	ubfx	r2, r2, #0, #10
 800188a:	b291      	uxth	r1, r2
 800188c:	881a      	ldrh	r2, [r3, #0]
 800188e:	f361 0209 	bfi	r2, r1, #0, #10
 8001892:	801a      	strh	r2, [r3, #0]
 8001894:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <DESIoT_restartCBufIndexes+0xb0>)
 8001896:	f8d3 3440 	ldr.w	r3, [r3, #1088]	; 0x440
 800189a:	881b      	ldrh	r3, [r3, #0]
 800189c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80018a0:	b29b      	uxth	r3, r3
 80018a2:	461a      	mov	r2, r3
 80018a4:	88fb      	ldrh	r3, [r7, #6]
 80018a6:	429a      	cmp	r2, r3
 80018a8:	d1c8      	bne.n	800183c <DESIoT_restartCBufIndexes+0x34>
			break;
	}
}
 80018aa:	e000      	b.n	80018ae <DESIoT_restartCBufIndexes+0xa6>
			break;
 80018ac:	bf00      	nop
}
 80018ae:	bf00      	nop
 80018b0:	370c      	adds	r7, #12
 80018b2:	46bd      	mov	sp, r7
 80018b4:	bc80      	pop	{r7}
 80018b6:	4770      	bx	lr
 80018b8:	20000290 	.word	0x20000290

080018bc <DESIoT_frameTimeoutHandler>:

void DESIoT_frameTimeoutHandler()
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	af00      	add	r7, sp, #0
	if (DESIOT_IS_FRAME_ON_PROCESS_STATUS(hFrame.status))
 80018c0:	4b10      	ldr	r3, [pc, #64]	; (8001904 <DESIoT_frameTimeoutHandler+0x48>)
 80018c2:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80018c6:	2b00      	cmp	r3, #0
 80018c8:	d01a      	beq.n	8001900 <DESIoT_frameTimeoutHandler+0x44>
 80018ca:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <DESIoT_frameTimeoutHandler+0x48>)
 80018cc:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 80018d0:	4b0d      	ldr	r3, [pc, #52]	; (8001908 <DESIoT_frameTimeoutHandler+0x4c>)
 80018d2:	fba3 1302 	umull	r1, r3, r3, r2
 80018d6:	0859      	lsrs	r1, r3, #1
 80018d8:	460b      	mov	r3, r1
 80018da:	005b      	lsls	r3, r3, #1
 80018dc:	440b      	add	r3, r1
 80018de:	1ad3      	subs	r3, r2, r3
 80018e0:	b2db      	uxtb	r3, r3
 80018e2:	2b00      	cmp	r3, #0
 80018e4:	d10c      	bne.n	8001900 <DESIoT_frameTimeoutHandler+0x44>
		if (DESIOT_MILLIS_F_NAME() - hFrame.millis > DESIOT_TIMEOUT_DURATION)
 80018e6:	f000 fe4b 	bl	8002580 <DESIoT_millis>
 80018ea:	4602      	mov	r2, r0
 80018ec:	4b05      	ldr	r3, [pc, #20]	; (8001904 <DESIoT_frameTimeoutHandler+0x48>)
 80018ee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80018f0:	1ad3      	subs	r3, r2, r3
 80018f2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80018f6:	d903      	bls.n	8001900 <DESIoT_frameTimeoutHandler+0x44>
		{
			DESIoT_restartFrameIndexes();
 80018f8:	f7ff ff76 	bl	80017e8 <DESIoT_restartFrameIndexes>
			DESIoT_restartCBufIndexes();
 80018fc:	f7ff ff84 	bl	8001808 <DESIoT_restartCBufIndexes>
		}
}
 8001900:	bf00      	nop
 8001902:	bd80      	pop	{r7, pc}
 8001904:	20000290 	.word	0x20000290
 8001908:	aaaaaaab 	.word	0xaaaaaaab

0800190c <DESIoT_execSuccessfulFrame>:

void DESIoT_execSuccessfulFrame() {
 800190c:	b580      	push	{r7, lr}
 800190e:	af00      	add	r7, sp, #0
	switch (hFrame.frame.dataPacket.cmd) {
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <DESIoT_execSuccessfulFrame+0x1c>)
 8001912:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 8001916:	2b01      	cmp	r3, #1
 8001918:	d102      	bne.n	8001920 <DESIoT_execSuccessfulFrame+0x14>
	case DESIOT_CMD_SYNC_VIRTUAL_STORAGE:
		DESIoT_execVSyncWF();
 800191a:	f000 f807 	bl	800192c <DESIoT_execVSyncWF>
		break;
 800191e:	e000      	b.n	8001922 <DESIoT_execSuccessfulFrame+0x16>
	default:
		break;
 8001920:	bf00      	nop
	}
}
 8001922:	bf00      	nop
 8001924:	bd80      	pop	{r7, pc}
 8001926:	bf00      	nop
 8001928:	20000290 	.word	0x20000290

0800192c <DESIoT_execVSyncWF>:

void DESIoT_execVSyncWF() {
 800192c:	b580      	push	{r7, lr}
 800192e:	b0c2      	sub	sp, #264	; 0x108
 8001930:	af00      	add	r7, sp, #0
	char payload[DESIOT_MAX_VSSYNC_PAYLOAD_SIZE];
	uint8_t VSID = hFrame.frame.dataPacket.data[0];
 8001932:	4ba3      	ldr	r3, [pc, #652]	; (8001bc0 <DESIoT_execVSyncWF+0x294>)
 8001934:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001938:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	size_t len = hFrame.frame.dataPacket.dataLen - sizeof(VSID);
 800193c:	4ba0      	ldr	r3, [pc, #640]	; (8001bc0 <DESIoT_execVSyncWF+0x294>)
 800193e:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 8001942:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001946:	f003 0303 	and.w	r3, r3, #3
 800194a:	021b      	lsls	r3, r3, #8
 800194c:	4313      	orrs	r3, r2
 800194e:	b29b      	uxth	r3, r3
 8001950:	3b01      	subs	r3, #1
 8001952:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

	memcpy(payload,hFrame.frame.dataPacket.data + 1, len);
 8001956:	499b      	ldr	r1, [pc, #620]	; (8001bc4 <DESIoT_execVSyncWF+0x298>)
 8001958:	463b      	mov	r3, r7
 800195a:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 800195e:	4618      	mov	r0, r3
 8001960:	f004 fc5c 	bl	800621c <memcpy>

	switch (VSID) {
 8001964:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 8001968:	2b1f      	cmp	r3, #31
 800196a:	f200 8123 	bhi.w	8001bb4 <DESIoT_execVSyncWF+0x288>
 800196e:	a201      	add	r2, pc, #4	; (adr r2, 8001974 <DESIoT_execVSyncWF+0x48>)
 8001970:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001974:	080019f5 	.word	0x080019f5
 8001978:	08001a03 	.word	0x08001a03
 800197c:	08001a11 	.word	0x08001a11
 8001980:	08001a1f 	.word	0x08001a1f
 8001984:	08001a2d 	.word	0x08001a2d
 8001988:	08001a3b 	.word	0x08001a3b
 800198c:	08001a49 	.word	0x08001a49
 8001990:	08001a57 	.word	0x08001a57
 8001994:	08001a65 	.word	0x08001a65
 8001998:	08001a73 	.word	0x08001a73
 800199c:	08001a81 	.word	0x08001a81
 80019a0:	08001a8f 	.word	0x08001a8f
 80019a4:	08001a9d 	.word	0x08001a9d
 80019a8:	08001aab 	.word	0x08001aab
 80019ac:	08001ab9 	.word	0x08001ab9
 80019b0:	08001ac7 	.word	0x08001ac7
 80019b4:	08001ad5 	.word	0x08001ad5
 80019b8:	08001ae3 	.word	0x08001ae3
 80019bc:	08001af1 	.word	0x08001af1
 80019c0:	08001aff 	.word	0x08001aff
 80019c4:	08001b0d 	.word	0x08001b0d
 80019c8:	08001b1b 	.word	0x08001b1b
 80019cc:	08001b29 	.word	0x08001b29
 80019d0:	08001b37 	.word	0x08001b37
 80019d4:	08001b45 	.word	0x08001b45
 80019d8:	08001b53 	.word	0x08001b53
 80019dc:	08001b61 	.word	0x08001b61
 80019e0:	08001b6f 	.word	0x08001b6f
 80019e4:	08001b7d 	.word	0x08001b7d
 80019e8:	08001b8b 	.word	0x08001b8b
 80019ec:	08001b99 	.word	0x08001b99
 80019f0:	08001ba7 	.word	0x08001ba7
	case DESIOT_VS0:
		DESIOT_EXEC_SYNC(DESIOT_VS0, payload, len);
 80019f4:	463b      	mov	r3, r7
 80019f6:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 80019fa:	4618      	mov	r0, r3
 80019fc:	f000 f8e4 	bl	8001bc8 <DESIoT_execSyncDESIOT_VS0>
		break;
 8001a00:	e0d8      	b.n	8001bb4 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS1:
		DESIOT_EXEC_SYNC(DESIOT_VS1, payload, len);
 8001a02:	463b      	mov	r3, r7
 8001a04:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f000 fdc1 	bl	8002590 <DESIoT_execSyncDESIOT_VS1>
		break;
 8001a0e:	e0d1      	b.n	8001bb4 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS2:
		DESIOT_EXEC_SYNC(DESIOT_VS2, payload, len);
 8001a10:	463b      	mov	r3, r7
 8001a12:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001a16:	4618      	mov	r0, r3
 8001a18:	f000 f8e0 	bl	8001bdc <DESIoT_execSyncDESIOT_VS2>
		break;
 8001a1c:	e0ca      	b.n	8001bb4 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS3:
		DESIOT_EXEC_SYNC(DESIOT_VS3, payload, len);
 8001a1e:	463b      	mov	r3, r7
 8001a20:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001a24:	4618      	mov	r0, r3
 8001a26:	f000 fdc3 	bl	80025b0 <DESIoT_execSyncDESIOT_VS3>
		break;
 8001a2a:	e0c3      	b.n	8001bb4 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS4:
		DESIOT_EXEC_SYNC(DESIOT_VS4, payload, len);
 8001a2c:	463b      	mov	r3, r7
 8001a2e:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001a32:	4618      	mov	r0, r3
 8001a34:	f000 fddc 	bl	80025f0 <DESIoT_execSyncDESIOT_VS4>
		break;
 8001a38:	e0bc      	b.n	8001bb4 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS5:
		DESIOT_EXEC_SYNC(DESIOT_VS5, payload, len);
 8001a3a:	463b      	mov	r3, r7
 8001a3c:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001a40:	4618      	mov	r0, r3
 8001a42:	f000 f8d5 	bl	8001bf0 <DESIoT_execSyncDESIOT_VS5>
		break;
 8001a46:	e0b5      	b.n	8001bb4 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS6:
		DESIOT_EXEC_SYNC(DESIOT_VS6, payload, len);
 8001a48:	463b      	mov	r3, r7
 8001a4a:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f000 f8d8 	bl	8001c04 <DESIoT_execSyncDESIOT_VS6>
		break;
 8001a54:	e0ae      	b.n	8001bb4 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS7:
		DESIOT_EXEC_SYNC(DESIOT_VS7, payload, len);
 8001a56:	463b      	mov	r3, r7
 8001a58:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001a5c:	4618      	mov	r0, r3
 8001a5e:	f000 f8db 	bl	8001c18 <DESIoT_execSyncDESIOT_VS7>
		break;
 8001a62:	e0a7      	b.n	8001bb4 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS8:
		DESIOT_EXEC_SYNC(DESIOT_VS8, payload, len);
 8001a64:	463b      	mov	r3, r7
 8001a66:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	f000 f8de 	bl	8001c2c <DESIoT_execSyncDESIOT_VS8>
		break;
 8001a70:	e0a0      	b.n	8001bb4 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS9:
		DESIOT_EXEC_SYNC(DESIOT_VS9, payload, len);
 8001a72:	463b      	mov	r3, r7
 8001a74:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 f8e1 	bl	8001c40 <DESIoT_execSyncDESIOT_VS9>
		break;
 8001a7e:	e099      	b.n	8001bb4 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS10:
		DESIOT_EXEC_SYNC(DESIOT_VS10, payload, len);
 8001a80:	463b      	mov	r3, r7
 8001a82:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001a86:	4618      	mov	r0, r3
 8001a88:	f000 f8e4 	bl	8001c54 <DESIoT_execSyncDESIOT_VS10>
		break;
 8001a8c:	e092      	b.n	8001bb4 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS11:
		DESIOT_EXEC_SYNC(DESIOT_VS11, payload, len);
 8001a8e:	463b      	mov	r3, r7
 8001a90:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001a94:	4618      	mov	r0, r3
 8001a96:	f000 f8e7 	bl	8001c68 <DESIoT_execSyncDESIOT_VS11>
		break;
 8001a9a:	e08b      	b.n	8001bb4 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS12:
		DESIOT_EXEC_SYNC(DESIOT_VS12, payload, len);
 8001a9c:	463b      	mov	r3, r7
 8001a9e:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	f000 f8ea 	bl	8001c7c <DESIoT_execSyncDESIOT_VS12>
		break;
 8001aa8:	e084      	b.n	8001bb4 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS13:
		DESIOT_EXEC_SYNC(DESIOT_VS13, payload, len);
 8001aaa:	463b      	mov	r3, r7
 8001aac:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001ab0:	4618      	mov	r0, r3
 8001ab2:	f000 f8ed 	bl	8001c90 <DESIoT_execSyncDESIOT_VS13>
		break;
 8001ab6:	e07d      	b.n	8001bb4 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS14:
		DESIOT_EXEC_SYNC(DESIOT_VS14, payload, len);
 8001ab8:	463b      	mov	r3, r7
 8001aba:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f000 f8f0 	bl	8001ca4 <DESIoT_execSyncDESIOT_VS14>
		break;
 8001ac4:	e076      	b.n	8001bb4 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS15:
		DESIOT_EXEC_SYNC(DESIOT_VS15, payload, len);
 8001ac6:	463b      	mov	r3, r7
 8001ac8:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001acc:	4618      	mov	r0, r3
 8001ace:	f000 f8f3 	bl	8001cb8 <DESIoT_execSyncDESIOT_VS15>
		break;
 8001ad2:	e06f      	b.n	8001bb4 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS16:
		DESIOT_EXEC_SYNC(DESIOT_VS16, payload, len);
 8001ad4:	463b      	mov	r3, r7
 8001ad6:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001ada:	4618      	mov	r0, r3
 8001adc:	f000 f8f6 	bl	8001ccc <DESIoT_execSyncDESIOT_VS16>
		break;
 8001ae0:	e068      	b.n	8001bb4 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS17:
		DESIOT_EXEC_SYNC(DESIOT_VS17, payload, len);
 8001ae2:	463b      	mov	r3, r7
 8001ae4:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f000 f8f9 	bl	8001ce0 <DESIoT_execSyncDESIOT_VS17>
		break;
 8001aee:	e061      	b.n	8001bb4 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS18:
		DESIOT_EXEC_SYNC(DESIOT_VS18, payload, len);
 8001af0:	463b      	mov	r3, r7
 8001af2:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001af6:	4618      	mov	r0, r3
 8001af8:	f000 f8fc 	bl	8001cf4 <DESIoT_execSyncDESIOT_VS18>
		break;
 8001afc:	e05a      	b.n	8001bb4 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS19:
		DESIOT_EXEC_SYNC(DESIOT_VS19, payload, len);
 8001afe:	463b      	mov	r3, r7
 8001b00:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001b04:	4618      	mov	r0, r3
 8001b06:	f000 f8ff 	bl	8001d08 <DESIoT_execSyncDESIOT_VS19>
		break;
 8001b0a:	e053      	b.n	8001bb4 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS20:
		DESIOT_EXEC_SYNC(DESIOT_VS20, payload, len);
 8001b0c:	463b      	mov	r3, r7
 8001b0e:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001b12:	4618      	mov	r0, r3
 8001b14:	f000 f902 	bl	8001d1c <DESIoT_execSyncDESIOT_VS20>
		break;
 8001b18:	e04c      	b.n	8001bb4 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS21:
		DESIOT_EXEC_SYNC(DESIOT_VS21, payload, len);
 8001b1a:	463b      	mov	r3, r7
 8001b1c:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001b20:	4618      	mov	r0, r3
 8001b22:	f000 f905 	bl	8001d30 <DESIoT_execSyncDESIOT_VS21>
		break;
 8001b26:	e045      	b.n	8001bb4 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS22:
		DESIOT_EXEC_SYNC(DESIOT_VS22, payload, len);
 8001b28:	463b      	mov	r3, r7
 8001b2a:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f000 f908 	bl	8001d44 <DESIoT_execSyncDESIOT_VS22>
		break;
 8001b34:	e03e      	b.n	8001bb4 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS23:
		DESIOT_EXEC_SYNC(DESIOT_VS23, payload, len);
 8001b36:	463b      	mov	r3, r7
 8001b38:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f000 f90b 	bl	8001d58 <DESIoT_execSyncDESIOT_VS23>
		break;
 8001b42:	e037      	b.n	8001bb4 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS24:
		DESIOT_EXEC_SYNC(DESIOT_VS24, payload, len);
 8001b44:	463b      	mov	r3, r7
 8001b46:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001b4a:	4618      	mov	r0, r3
 8001b4c:	f000 f90e 	bl	8001d6c <DESIoT_execSyncDESIOT_VS24>
		break;
 8001b50:	e030      	b.n	8001bb4 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS25:
		DESIOT_EXEC_SYNC(DESIOT_VS25, payload, len);
 8001b52:	463b      	mov	r3, r7
 8001b54:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f000 f911 	bl	8001d80 <DESIoT_execSyncDESIOT_VS25>
		break;
 8001b5e:	e029      	b.n	8001bb4 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS26:
		DESIOT_EXEC_SYNC(DESIOT_VS26, payload, len);
 8001b60:	463b      	mov	r3, r7
 8001b62:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001b66:	4618      	mov	r0, r3
 8001b68:	f000 f914 	bl	8001d94 <DESIoT_execSyncDESIOT_VS26>
		break;
 8001b6c:	e022      	b.n	8001bb4 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS27:
		DESIOT_EXEC_SYNC(DESIOT_VS27, payload, len);
 8001b6e:	463b      	mov	r3, r7
 8001b70:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001b74:	4618      	mov	r0, r3
 8001b76:	f000 f917 	bl	8001da8 <DESIoT_execSyncDESIOT_VS27>
		break;
 8001b7a:	e01b      	b.n	8001bb4 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS28:
		DESIOT_EXEC_SYNC(DESIOT_VS28, payload, len);
 8001b7c:	463b      	mov	r3, r7
 8001b7e:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001b82:	4618      	mov	r0, r3
 8001b84:	f000 f91a 	bl	8001dbc <DESIoT_execSyncDESIOT_VS28>
		break;
 8001b88:	e014      	b.n	8001bb4 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS29:
		DESIOT_EXEC_SYNC(DESIOT_VS29, payload, len);
 8001b8a:	463b      	mov	r3, r7
 8001b8c:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001b90:	4618      	mov	r0, r3
 8001b92:	f000 f91d 	bl	8001dd0 <DESIoT_execSyncDESIOT_VS29>
		break;
 8001b96:	e00d      	b.n	8001bb4 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS30:
		DESIOT_EXEC_SYNC(DESIOT_VS30, payload, len);
 8001b98:	463b      	mov	r3, r7
 8001b9a:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f000 f920 	bl	8001de4 <DESIoT_execSyncDESIOT_VS30>
		break;
 8001ba4:	e006      	b.n	8001bb4 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS31:
		DESIOT_EXEC_SYNC(DESIOT_VS31, payload, len);
 8001ba6:	463b      	mov	r3, r7
 8001ba8:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001bac:	4618      	mov	r0, r3
 8001bae:	f000 f923 	bl	8001df8 <DESIoT_execSyncDESIOT_VS31>
		break;
 8001bb2:	bf00      	nop
	}

}
 8001bb4:	bf00      	nop
 8001bb6:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}
 8001bbe:	bf00      	nop
 8001bc0:	20000290 	.word	0x20000290
 8001bc4:	200002ce 	.word	0x200002ce

08001bc8 <DESIoT_execSyncDESIOT_VS0>:

DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS0) {}
 8001bc8:	b480      	push	{r7}
 8001bca:	b083      	sub	sp, #12
 8001bcc:	af00      	add	r7, sp, #0
 8001bce:	6078      	str	r0, [r7, #4]
 8001bd0:	6039      	str	r1, [r7, #0]
 8001bd2:	bf00      	nop
 8001bd4:	370c      	adds	r7, #12
 8001bd6:	46bd      	mov	sp, r7
 8001bd8:	bc80      	pop	{r7}
 8001bda:	4770      	bx	lr

08001bdc <DESIoT_execSyncDESIOT_VS2>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS1) {}
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS2) {}
 8001bdc:	b480      	push	{r7}
 8001bde:	b083      	sub	sp, #12
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	6078      	str	r0, [r7, #4]
 8001be4:	6039      	str	r1, [r7, #0]
 8001be6:	bf00      	nop
 8001be8:	370c      	adds	r7, #12
 8001bea:	46bd      	mov	sp, r7
 8001bec:	bc80      	pop	{r7}
 8001bee:	4770      	bx	lr

08001bf0 <DESIoT_execSyncDESIOT_VS5>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS3) {}
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS4) {}
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS5) {}
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
 8001bf8:	6039      	str	r1, [r7, #0]
 8001bfa:	bf00      	nop
 8001bfc:	370c      	adds	r7, #12
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	bc80      	pop	{r7}
 8001c02:	4770      	bx	lr

08001c04 <DESIoT_execSyncDESIOT_VS6>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS6) {}
 8001c04:	b480      	push	{r7}
 8001c06:	b083      	sub	sp, #12
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
 8001c0e:	bf00      	nop
 8001c10:	370c      	adds	r7, #12
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bc80      	pop	{r7}
 8001c16:	4770      	bx	lr

08001c18 <DESIoT_execSyncDESIOT_VS7>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS7) {}
 8001c18:	b480      	push	{r7}
 8001c1a:	b083      	sub	sp, #12
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
 8001c22:	bf00      	nop
 8001c24:	370c      	adds	r7, #12
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <DESIoT_execSyncDESIOT_VS8>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS8) {}
 8001c2c:	b480      	push	{r7}
 8001c2e:	b083      	sub	sp, #12
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
 8001c34:	6039      	str	r1, [r7, #0]
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bc80      	pop	{r7}
 8001c3e:	4770      	bx	lr

08001c40 <DESIoT_execSyncDESIOT_VS9>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS9) {}
 8001c40:	b480      	push	{r7}
 8001c42:	b083      	sub	sp, #12
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	bc80      	pop	{r7}
 8001c52:	4770      	bx	lr

08001c54 <DESIoT_execSyncDESIOT_VS10>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS10) {}
 8001c54:	b480      	push	{r7}
 8001c56:	b083      	sub	sp, #12
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
 8001c5c:	6039      	str	r1, [r7, #0]
 8001c5e:	bf00      	nop
 8001c60:	370c      	adds	r7, #12
 8001c62:	46bd      	mov	sp, r7
 8001c64:	bc80      	pop	{r7}
 8001c66:	4770      	bx	lr

08001c68 <DESIoT_execSyncDESIOT_VS11>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS11) {}
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	6039      	str	r1, [r7, #0]
 8001c72:	bf00      	nop
 8001c74:	370c      	adds	r7, #12
 8001c76:	46bd      	mov	sp, r7
 8001c78:	bc80      	pop	{r7}
 8001c7a:	4770      	bx	lr

08001c7c <DESIoT_execSyncDESIOT_VS12>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS12) {}
 8001c7c:	b480      	push	{r7}
 8001c7e:	b083      	sub	sp, #12
 8001c80:	af00      	add	r7, sp, #0
 8001c82:	6078      	str	r0, [r7, #4]
 8001c84:	6039      	str	r1, [r7, #0]
 8001c86:	bf00      	nop
 8001c88:	370c      	adds	r7, #12
 8001c8a:	46bd      	mov	sp, r7
 8001c8c:	bc80      	pop	{r7}
 8001c8e:	4770      	bx	lr

08001c90 <DESIoT_execSyncDESIOT_VS13>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS13) {}
 8001c90:	b480      	push	{r7}
 8001c92:	b083      	sub	sp, #12
 8001c94:	af00      	add	r7, sp, #0
 8001c96:	6078      	str	r0, [r7, #4]
 8001c98:	6039      	str	r1, [r7, #0]
 8001c9a:	bf00      	nop
 8001c9c:	370c      	adds	r7, #12
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bc80      	pop	{r7}
 8001ca2:	4770      	bx	lr

08001ca4 <DESIoT_execSyncDESIOT_VS14>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS14) {}
 8001ca4:	b480      	push	{r7}
 8001ca6:	b083      	sub	sp, #12
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
 8001cac:	6039      	str	r1, [r7, #0]
 8001cae:	bf00      	nop
 8001cb0:	370c      	adds	r7, #12
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bc80      	pop	{r7}
 8001cb6:	4770      	bx	lr

08001cb8 <DESIoT_execSyncDESIOT_VS15>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS15) {}
 8001cb8:	b480      	push	{r7}
 8001cba:	b083      	sub	sp, #12
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
 8001cc2:	bf00      	nop
 8001cc4:	370c      	adds	r7, #12
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr

08001ccc <DESIoT_execSyncDESIOT_VS16>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS16) {}
 8001ccc:	b480      	push	{r7}
 8001cce:	b083      	sub	sp, #12
 8001cd0:	af00      	add	r7, sp, #0
 8001cd2:	6078      	str	r0, [r7, #4]
 8001cd4:	6039      	str	r1, [r7, #0]
 8001cd6:	bf00      	nop
 8001cd8:	370c      	adds	r7, #12
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr

08001ce0 <DESIoT_execSyncDESIOT_VS17>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS17) {}
 8001ce0:	b480      	push	{r7}
 8001ce2:	b083      	sub	sp, #12
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
 8001ce8:	6039      	str	r1, [r7, #0]
 8001cea:	bf00      	nop
 8001cec:	370c      	adds	r7, #12
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	bc80      	pop	{r7}
 8001cf2:	4770      	bx	lr

08001cf4 <DESIoT_execSyncDESIOT_VS18>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS18) {}
 8001cf4:	b480      	push	{r7}
 8001cf6:	b083      	sub	sp, #12
 8001cf8:	af00      	add	r7, sp, #0
 8001cfa:	6078      	str	r0, [r7, #4]
 8001cfc:	6039      	str	r1, [r7, #0]
 8001cfe:	bf00      	nop
 8001d00:	370c      	adds	r7, #12
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bc80      	pop	{r7}
 8001d06:	4770      	bx	lr

08001d08 <DESIoT_execSyncDESIOT_VS19>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS19) {}
 8001d08:	b480      	push	{r7}
 8001d0a:	b083      	sub	sp, #12
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
 8001d10:	6039      	str	r1, [r7, #0]
 8001d12:	bf00      	nop
 8001d14:	370c      	adds	r7, #12
 8001d16:	46bd      	mov	sp, r7
 8001d18:	bc80      	pop	{r7}
 8001d1a:	4770      	bx	lr

08001d1c <DESIoT_execSyncDESIOT_VS20>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS20) {}
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
 8001d24:	6039      	str	r1, [r7, #0]
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr

08001d30 <DESIoT_execSyncDESIOT_VS21>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS21) {}
 8001d30:	b480      	push	{r7}
 8001d32:	b083      	sub	sp, #12
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
 8001d38:	6039      	str	r1, [r7, #0]
 8001d3a:	bf00      	nop
 8001d3c:	370c      	adds	r7, #12
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bc80      	pop	{r7}
 8001d42:	4770      	bx	lr

08001d44 <DESIoT_execSyncDESIOT_VS22>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS22) {}
 8001d44:	b480      	push	{r7}
 8001d46:	b083      	sub	sp, #12
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
 8001d4c:	6039      	str	r1, [r7, #0]
 8001d4e:	bf00      	nop
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bc80      	pop	{r7}
 8001d56:	4770      	bx	lr

08001d58 <DESIoT_execSyncDESIOT_VS23>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS23) {}
 8001d58:	b480      	push	{r7}
 8001d5a:	b083      	sub	sp, #12
 8001d5c:	af00      	add	r7, sp, #0
 8001d5e:	6078      	str	r0, [r7, #4]
 8001d60:	6039      	str	r1, [r7, #0]
 8001d62:	bf00      	nop
 8001d64:	370c      	adds	r7, #12
 8001d66:	46bd      	mov	sp, r7
 8001d68:	bc80      	pop	{r7}
 8001d6a:	4770      	bx	lr

08001d6c <DESIoT_execSyncDESIOT_VS24>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS24) {}
 8001d6c:	b480      	push	{r7}
 8001d6e:	b083      	sub	sp, #12
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
 8001d74:	6039      	str	r1, [r7, #0]
 8001d76:	bf00      	nop
 8001d78:	370c      	adds	r7, #12
 8001d7a:	46bd      	mov	sp, r7
 8001d7c:	bc80      	pop	{r7}
 8001d7e:	4770      	bx	lr

08001d80 <DESIoT_execSyncDESIOT_VS25>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS25) {}
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	6039      	str	r1, [r7, #0]
 8001d8a:	bf00      	nop
 8001d8c:	370c      	adds	r7, #12
 8001d8e:	46bd      	mov	sp, r7
 8001d90:	bc80      	pop	{r7}
 8001d92:	4770      	bx	lr

08001d94 <DESIoT_execSyncDESIOT_VS26>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS26) {}
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	6039      	str	r1, [r7, #0]
 8001d9e:	bf00      	nop
 8001da0:	370c      	adds	r7, #12
 8001da2:	46bd      	mov	sp, r7
 8001da4:	bc80      	pop	{r7}
 8001da6:	4770      	bx	lr

08001da8 <DESIoT_execSyncDESIOT_VS27>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS27) {}
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	6078      	str	r0, [r7, #4]
 8001db0:	6039      	str	r1, [r7, #0]
 8001db2:	bf00      	nop
 8001db4:	370c      	adds	r7, #12
 8001db6:	46bd      	mov	sp, r7
 8001db8:	bc80      	pop	{r7}
 8001dba:	4770      	bx	lr

08001dbc <DESIoT_execSyncDESIOT_VS28>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS28) {}
 8001dbc:	b480      	push	{r7}
 8001dbe:	b083      	sub	sp, #12
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
 8001dc4:	6039      	str	r1, [r7, #0]
 8001dc6:	bf00      	nop
 8001dc8:	370c      	adds	r7, #12
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bc80      	pop	{r7}
 8001dce:	4770      	bx	lr

08001dd0 <DESIoT_execSyncDESIOT_VS29>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS29) {}
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
 8001dd6:	6078      	str	r0, [r7, #4]
 8001dd8:	6039      	str	r1, [r7, #0]
 8001dda:	bf00      	nop
 8001ddc:	370c      	adds	r7, #12
 8001dde:	46bd      	mov	sp, r7
 8001de0:	bc80      	pop	{r7}
 8001de2:	4770      	bx	lr

08001de4 <DESIoT_execSyncDESIOT_VS30>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS30) {}
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	6078      	str	r0, [r7, #4]
 8001dec:	6039      	str	r1, [r7, #0]
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	bc80      	pop	{r7}
 8001df6:	4770      	bx	lr

08001df8 <DESIoT_execSyncDESIOT_VS31>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS31) {}
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	6078      	str	r0, [r7, #4]
 8001e00:	6039      	str	r1, [r7, #0]
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr

08001e0c <DESIoT_begin>:
void DESIoT_execSuccessfulFrame();
void DESIoT_execVSyncWF();
uint32_t DESIoT_millis();

// static funcs
static void DESIoT_begin() {
 8001e0c:	b5b0      	push	{r4, r5, r7, lr}
 8001e0e:	af00      	add	r7, sp, #0
	while(DESIoT_millis() < DESIOT_STARTUP_TIME);
 8001e10:	bf00      	nop
 8001e12:	f000 fbb5 	bl	8002580 <DESIoT_millis>
 8001e16:	4603      	mov	r3, r0
 8001e18:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001e1c:	4293      	cmp	r3, r2
 8001e1e:	d9f8      	bls.n	8001e12 <DESIoT_begin+0x6>
#if defined(DESIOT_DEVICE_ID) && defined(DESIOT_CONFIG_ID)
	strcpy(hFrame.device_id, DESIOT_DEVICE_ID);
 8001e20:	4a0d      	ldr	r2, [pc, #52]	; (8001e58 <DESIoT_begin+0x4c>)
 8001e22:	4b0e      	ldr	r3, [pc, #56]	; (8001e5c <DESIoT_begin+0x50>)
 8001e24:	4614      	mov	r4, r2
 8001e26:	461d      	mov	r5, r3
 8001e28:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001e2a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001e2c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001e30:	c403      	stmia	r4!, {r0, r1}
 8001e32:	7022      	strb	r2, [r4, #0]
	strcpy(hFrame.config_id, DESIOT_CONFIG_ID);
 8001e34:	4b08      	ldr	r3, [pc, #32]	; (8001e58 <DESIoT_begin+0x4c>)
 8001e36:	4a0a      	ldr	r2, [pc, #40]	; (8001e60 <DESIoT_begin+0x54>)
 8001e38:	f103 0519 	add.w	r5, r3, #25
 8001e3c:	4614      	mov	r4, r2
 8001e3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e40:	6028      	str	r0, [r5, #0]
 8001e42:	6069      	str	r1, [r5, #4]
 8001e44:	60aa      	str	r2, [r5, #8]
 8001e46:	60eb      	str	r3, [r5, #12]
 8001e48:	cc03      	ldmia	r4!, {r0, r1}
 8001e4a:	6128      	str	r0, [r5, #16]
 8001e4c:	6169      	str	r1, [r5, #20]
 8001e4e:	7823      	ldrb	r3, [r4, #0]
 8001e50:	762b      	strb	r3, [r5, #24]
#endif
}
 8001e52:	bf00      	nop
 8001e54:	bdb0      	pop	{r4, r5, r7, pc}
 8001e56:	bf00      	nop
 8001e58:	20000290 	.word	0x20000290
 8001e5c:	08007820 	.word	0x08007820
 8001e60:	0800783c 	.word	0x0800783c
 8001e64:	00000000 	.word	0x00000000

08001e68 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001e68:	b590      	push	{r4, r7, lr}
 8001e6a:	b091      	sub	sp, #68	; 0x44
 8001e6c:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001e6e:	f001 f827 	bl	8002ec0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001e72:	f000 f9a1 	bl	80021b8 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001e76:	f000 faf9 	bl	800246c <MX_GPIO_Init>
	MX_DMA_Init();
 8001e7a:	f000 fad9 	bl	8002430 <MX_DMA_Init>
	MX_ADC1_Init();
 8001e7e:	f000 f9f7 	bl	8002270 <MX_ADC1_Init>
	MX_TIM2_Init();
 8001e82:	f000 fa5f 	bl	8002344 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8001e86:	f000 faa9 	bl	80023dc <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	// vol and curr
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*) Gb_suiAdcValue, 4);
 8001e8a:	2204      	movs	r2, #4
 8001e8c:	49ba      	ldr	r1, [pc, #744]	; (8002178 <main+0x310>)
 8001e8e:	48bb      	ldr	r0, [pc, #748]	; (800217c <main+0x314>)
 8001e90:	f001 fa3a 	bl	8003308 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_IT(&hadc1);
 8001e94:	48b9      	ldr	r0, [pc, #740]	; (800217c <main+0x314>)
 8001e96:	f001 f94d 	bl	8003134 <HAL_ADC_Start_IT>

	HAL_UART_Receive_IT(&huart1, &ITReceive, 1);
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	49b8      	ldr	r1, [pc, #736]	; (8002180 <main+0x318>)
 8001e9e:	48b9      	ldr	r0, [pc, #740]	; (8002184 <main+0x31c>)
 8001ea0:	f003 fbed 	bl	800567e <HAL_UART_Receive_IT>

	HAL_TIM_Base_Start(&htim2);
 8001ea4:	48b8      	ldr	r0, [pc, #736]	; (8002188 <main+0x320>)
 8001ea6:	f003 f8af 	bl	8005008 <HAL_TIM_Base_Start>

	DESIoT_begin();
 8001eaa:	f7ff ffaf 	bl	8001e0c <DESIoT_begin>

	DESIoT_readVS(DESIOT_VS1);
 8001eae:	2001      	movs	r0, #1
 8001eb0:	f7ff f9c7 	bl	8001242 <DESIoT_readVS>
	DESIoT_readVS(DESIOT_VS3);
 8001eb4:	2003      	movs	r0, #3
 8001eb6:	f7ff f9c4 	bl	8001242 <DESIoT_readVS>
	DESIoT_readVS(DESIOT_VS4);
 8001eba:	2004      	movs	r0, #4
 8001ebc:	f7ff f9c1 	bl	8001242 <DESIoT_readVS>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		DESIoT_loop();
 8001ec0:	f7ff f868 	bl	8000f94 <DESIoT_loop>

		if(Gb_suiCountReadAdc>=40000){
 8001ec4:	4bb1      	ldr	r3, [pc, #708]	; (800218c <main+0x324>)
 8001ec6:	881b      	ldrh	r3, [r3, #0]
 8001ec8:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001ecc:	4293      	cmp	r3, r2
 8001ece:	f240 80fb 	bls.w	80020c8 <main+0x260>
			Gb_suiCountReadAdc = 0;
 8001ed2:	4bae      	ldr	r3, [pc, #696]	; (800218c <main+0x324>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	801a      	strh	r2, [r3, #0]
			lfAveAdc[0] = Gb_uiAdcSum[0]/40000.0;
 8001ed8:	4bad      	ldr	r3, [pc, #692]	; (8002190 <main+0x328>)
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f7fe fa81 	bl	80003e4 <__aeabi_ui2d>
 8001ee2:	a39b      	add	r3, pc, #620	; (adr r3, 8002150 <main+0x2e8>)
 8001ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ee8:	f7fe fc20 	bl	800072c <__aeabi_ddiv>
 8001eec:	4602      	mov	r2, r0
 8001eee:	460b      	mov	r3, r1
 8001ef0:	4610      	mov	r0, r2
 8001ef2:	4619      	mov	r1, r3
 8001ef4:	f7fe fda0 	bl	8000a38 <__aeabi_d2f>
 8001ef8:	4603      	mov	r3, r0
 8001efa:	4aa6      	ldr	r2, [pc, #664]	; (8002194 <main+0x32c>)
 8001efc:	6013      	str	r3, [r2, #0]
			Gb_fVolValue[0] = (sqrt(lfAveAdc[0]))*1.41;
 8001efe:	4ba5      	ldr	r3, [pc, #660]	; (8002194 <main+0x32c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7fe fa90 	bl	8000428 <__aeabi_f2d>
 8001f08:	4602      	mov	r2, r0
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	4610      	mov	r0, r2
 8001f0e:	4619      	mov	r1, r3
 8001f10:	f005 fba6 	bl	8007660 <sqrt>
 8001f14:	a390      	add	r3, pc, #576	; (adr r3, 8002158 <main+0x2f0>)
 8001f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1a:	f7fe fadd 	bl	80004d8 <__aeabi_dmul>
 8001f1e:	4602      	mov	r2, r0
 8001f20:	460b      	mov	r3, r1
 8001f22:	4610      	mov	r0, r2
 8001f24:	4619      	mov	r1, r3
 8001f26:	f7fe fd87 	bl	8000a38 <__aeabi_d2f>
 8001f2a:	4603      	mov	r3, r0
 8001f2c:	4a9a      	ldr	r2, [pc, #616]	; (8002198 <main+0x330>)
 8001f2e:	6013      	str	r3, [r2, #0]

			lfAveAdc[1] = Gb_uiAdcSum[1]/40000.0;
 8001f30:	4b97      	ldr	r3, [pc, #604]	; (8002190 <main+0x328>)
 8001f32:	685b      	ldr	r3, [r3, #4]
 8001f34:	4618      	mov	r0, r3
 8001f36:	f7fe fa55 	bl	80003e4 <__aeabi_ui2d>
 8001f3a:	a385      	add	r3, pc, #532	; (adr r3, 8002150 <main+0x2e8>)
 8001f3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f40:	f7fe fbf4 	bl	800072c <__aeabi_ddiv>
 8001f44:	4602      	mov	r2, r0
 8001f46:	460b      	mov	r3, r1
 8001f48:	4610      	mov	r0, r2
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	f7fe fd74 	bl	8000a38 <__aeabi_d2f>
 8001f50:	4603      	mov	r3, r0
 8001f52:	4a90      	ldr	r2, [pc, #576]	; (8002194 <main+0x32c>)
 8001f54:	6053      	str	r3, [r2, #4]
			Gb_fVolValue[1] = (sqrt(lfAveAdc[1]))*1.41;
 8001f56:	4b8f      	ldr	r3, [pc, #572]	; (8002194 <main+0x32c>)
 8001f58:	685b      	ldr	r3, [r3, #4]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f7fe fa64 	bl	8000428 <__aeabi_f2d>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	4610      	mov	r0, r2
 8001f66:	4619      	mov	r1, r3
 8001f68:	f005 fb7a 	bl	8007660 <sqrt>
 8001f6c:	a37a      	add	r3, pc, #488	; (adr r3, 8002158 <main+0x2f0>)
 8001f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f72:	f7fe fab1 	bl	80004d8 <__aeabi_dmul>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	4610      	mov	r0, r2
 8001f7c:	4619      	mov	r1, r3
 8001f7e:	f7fe fd5b 	bl	8000a38 <__aeabi_d2f>
 8001f82:	4603      	mov	r3, r0
 8001f84:	4a84      	ldr	r2, [pc, #528]	; (8002198 <main+0x330>)
 8001f86:	6053      	str	r3, [r2, #4]

			float lfVol;
			float VRMS ;
			lfVol = ((float) (Gb_suiAdcMaxValue[0] - Gb_suiAdcMinValue[0]) * 3.3)/ 4095.0;
 8001f88:	4b84      	ldr	r3, [pc, #528]	; (800219c <main+0x334>)
 8001f8a:	881b      	ldrh	r3, [r3, #0]
 8001f8c:	461a      	mov	r2, r3
 8001f8e:	4b84      	ldr	r3, [pc, #528]	; (80021a0 <main+0x338>)
 8001f90:	881b      	ldrh	r3, [r3, #0]
 8001f92:	1ad3      	subs	r3, r2, r3
 8001f94:	4618      	mov	r0, r3
 8001f96:	f7fe fe59 	bl	8000c4c <__aeabi_i2f>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	4618      	mov	r0, r3
 8001f9e:	f7fe fa43 	bl	8000428 <__aeabi_f2d>
 8001fa2:	a36f      	add	r3, pc, #444	; (adr r3, 8002160 <main+0x2f8>)
 8001fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa8:	f7fe fa96 	bl	80004d8 <__aeabi_dmul>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	a36c      	add	r3, pc, #432	; (adr r3, 8002168 <main+0x300>)
 8001fb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fba:	f7fe fbb7 	bl	800072c <__aeabi_ddiv>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	4610      	mov	r0, r2
 8001fc4:	4619      	mov	r1, r3
 8001fc6:	f7fe fd37 	bl	8000a38 <__aeabi_d2f>
 8001fca:	4603      	mov	r3, r0
 8001fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
			VRMS = (lfVol) *0.707;   //root 2 is 0.707
 8001fce:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001fd0:	f7fe fa2a 	bl	8000428 <__aeabi_f2d>
 8001fd4:	a366      	add	r3, pc, #408	; (adr r3, 8002170 <main+0x308>)
 8001fd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fda:	f7fe fa7d 	bl	80004d8 <__aeabi_dmul>
 8001fde:	4602      	mov	r2, r0
 8001fe0:	460b      	mov	r3, r1
 8001fe2:	4610      	mov	r0, r2
 8001fe4:	4619      	mov	r1, r3
 8001fe6:	f7fe fd27 	bl	8000a38 <__aeabi_d2f>
 8001fea:	4603      	mov	r3, r0
 8001fec:	63bb      	str	r3, [r7, #56]	; 0x38
			Gb_fAmpValue[0] = (VRMS * 1000)/Gb_culVperAmp;
 8001fee:	496d      	ldr	r1, [pc, #436]	; (80021a4 <main+0x33c>)
 8001ff0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001ff2:	f7fe fe7f 	bl	8000cf4 <__aeabi_fmul>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	461c      	mov	r4, r3
 8001ffa:	2364      	movs	r3, #100	; 0x64
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f7fe fe25 	bl	8000c4c <__aeabi_i2f>
 8002002:	4603      	mov	r3, r0
 8002004:	4619      	mov	r1, r3
 8002006:	4620      	mov	r0, r4
 8002008:	f7fe ff28 	bl	8000e5c <__aeabi_fdiv>
 800200c:	4603      	mov	r3, r0
 800200e:	461a      	mov	r2, r3
 8002010:	4b65      	ldr	r3, [pc, #404]	; (80021a8 <main+0x340>)
 8002012:	601a      	str	r2, [r3, #0]

			lfVol = ((float) (Gb_suiAdcMaxValue[1] - Gb_suiAdcMinValue[1]) * 3.3)/ 4095.0;
 8002014:	4b61      	ldr	r3, [pc, #388]	; (800219c <main+0x334>)
 8002016:	885b      	ldrh	r3, [r3, #2]
 8002018:	461a      	mov	r2, r3
 800201a:	4b61      	ldr	r3, [pc, #388]	; (80021a0 <main+0x338>)
 800201c:	885b      	ldrh	r3, [r3, #2]
 800201e:	1ad3      	subs	r3, r2, r3
 8002020:	4618      	mov	r0, r3
 8002022:	f7fe fe13 	bl	8000c4c <__aeabi_i2f>
 8002026:	4603      	mov	r3, r0
 8002028:	4618      	mov	r0, r3
 800202a:	f7fe f9fd 	bl	8000428 <__aeabi_f2d>
 800202e:	a34c      	add	r3, pc, #304	; (adr r3, 8002160 <main+0x2f8>)
 8002030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002034:	f7fe fa50 	bl	80004d8 <__aeabi_dmul>
 8002038:	4602      	mov	r2, r0
 800203a:	460b      	mov	r3, r1
 800203c:	4610      	mov	r0, r2
 800203e:	4619      	mov	r1, r3
 8002040:	a349      	add	r3, pc, #292	; (adr r3, 8002168 <main+0x300>)
 8002042:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002046:	f7fe fb71 	bl	800072c <__aeabi_ddiv>
 800204a:	4602      	mov	r2, r0
 800204c:	460b      	mov	r3, r1
 800204e:	4610      	mov	r0, r2
 8002050:	4619      	mov	r1, r3
 8002052:	f7fe fcf1 	bl	8000a38 <__aeabi_d2f>
 8002056:	4603      	mov	r3, r0
 8002058:	63fb      	str	r3, [r7, #60]	; 0x3c
			VRMS = (lfVol) *0.707;   //root 2 is 0.707
 800205a:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800205c:	f7fe f9e4 	bl	8000428 <__aeabi_f2d>
 8002060:	a343      	add	r3, pc, #268	; (adr r3, 8002170 <main+0x308>)
 8002062:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002066:	f7fe fa37 	bl	80004d8 <__aeabi_dmul>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	4610      	mov	r0, r2
 8002070:	4619      	mov	r1, r3
 8002072:	f7fe fce1 	bl	8000a38 <__aeabi_d2f>
 8002076:	4603      	mov	r3, r0
 8002078:	63bb      	str	r3, [r7, #56]	; 0x38
			Gb_fAmpValue[1] = (VRMS * 1000)/Gb_culVperAmp;
 800207a:	494a      	ldr	r1, [pc, #296]	; (80021a4 <main+0x33c>)
 800207c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 800207e:	f7fe fe39 	bl	8000cf4 <__aeabi_fmul>
 8002082:	4603      	mov	r3, r0
 8002084:	461c      	mov	r4, r3
 8002086:	2364      	movs	r3, #100	; 0x64
 8002088:	4618      	mov	r0, r3
 800208a:	f7fe fddf 	bl	8000c4c <__aeabi_i2f>
 800208e:	4603      	mov	r3, r0
 8002090:	4619      	mov	r1, r3
 8002092:	4620      	mov	r0, r4
 8002094:	f7fe fee2 	bl	8000e5c <__aeabi_fdiv>
 8002098:	4603      	mov	r3, r0
 800209a:	461a      	mov	r2, r3
 800209c:	4b42      	ldr	r3, [pc, #264]	; (80021a8 <main+0x340>)
 800209e:	605a      	str	r2, [r3, #4]
			//		  if(Gb_fVolValue[0] < 15.0) Gb_fVolValue[0] = 0.0;
			//		  if(Gb_fVolValue[1] < 15.0) Gb_fVolValue[1] = 0.0;
			//		  if(Gb_fAmpValue[0] < 0.31) Gb_fAmpValue[0] = 0.0;
			//		  if(Gb_fAmpValue[1] < 0.31) Gb_fAmpValue[1] = 0.0;

			Gb_suiAdcMaxValue[0] = 0;
 80020a0:	4b3e      	ldr	r3, [pc, #248]	; (800219c <main+0x334>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	801a      	strh	r2, [r3, #0]
			Gb_suiAdcMaxValue[1] = 0;
 80020a6:	4b3d      	ldr	r3, [pc, #244]	; (800219c <main+0x334>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	805a      	strh	r2, [r3, #2]

			Gb_suiAdcMinValue[0] = 4095.0;
 80020ac:	4b3c      	ldr	r3, [pc, #240]	; (80021a0 <main+0x338>)
 80020ae:	f640 72ff 	movw	r2, #4095	; 0xfff
 80020b2:	801a      	strh	r2, [r3, #0]
			Gb_suiAdcMinValue[1] = 4095.0;
 80020b4:	4b3a      	ldr	r3, [pc, #232]	; (80021a0 <main+0x338>)
 80020b6:	f640 72ff 	movw	r2, #4095	; 0xfff
 80020ba:	805a      	strh	r2, [r3, #2]
			Gb_uiAdcSum[0] = 0;
 80020bc:	4b34      	ldr	r3, [pc, #208]	; (8002190 <main+0x328>)
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
			Gb_uiAdcSum[1] = 0;
 80020c2:	4b33      	ldr	r3, [pc, #204]	; (8002190 <main+0x328>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	605a      	str	r2, [r3, #4]
		}

		uint32_t currentTick = HAL_GetTick();
 80020c8:	f000 ff52 	bl	8002f70 <HAL_GetTick>
 80020cc:	6378      	str	r0, [r7, #52]	; 0x34
		if(currentTick - lastTick > 2500)
 80020ce:	4b37      	ldr	r3, [pc, #220]	; (80021ac <main+0x344>)
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80020d4:	1ad3      	subs	r3, r2, r3
 80020d6:	f640 12c4 	movw	r2, #2500	; 0x9c4
 80020da:	4293      	cmp	r3, r2
 80020dc:	f67f aef0 	bls.w	8001ec0 <main+0x58>
		{
			lastTick = currentTick;
 80020e0:	4a32      	ldr	r2, [pc, #200]	; (80021ac <main+0x344>)
 80020e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80020e4:	6013      	str	r3, [r2, #0]
			getSensorValue();
 80020e6:	f000 faa3 	bl	8002630 <getSensorValue>
			DESIoT_assignFloat(DESIOT_VS0, Temperature);
 80020ea:	4b31      	ldr	r3, [pc, #196]	; (80021b0 <main+0x348>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4619      	mov	r1, r3
 80020f0:	2000      	movs	r0, #0
 80020f2:	f7ff f802 	bl	80010fa <DESIoT_assignFloat>
			DESIoT_assignInt(DESIOT_VS2, lastTick);
 80020f6:	4b2d      	ldr	r3, [pc, #180]	; (80021ac <main+0x344>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4619      	mov	r1, r3
 80020fc:	2002      	movs	r0, #2
 80020fe:	f7fe ffb5 	bl	800106c <DESIoT_assignInt>

			DESIoT_assignFloat(DESIOT_VS5, Gb_fAmpValue[0]);
 8002102:	4b29      	ldr	r3, [pc, #164]	; (80021a8 <main+0x340>)
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4619      	mov	r1, r3
 8002108:	2005      	movs	r0, #5
 800210a:	f7fe fff6 	bl	80010fa <DESIoT_assignFloat>
			DESIoT_assignFloat(DESIOT_VS6, Gb_fAmpValue[1]);
 800210e:	4b26      	ldr	r3, [pc, #152]	; (80021a8 <main+0x340>)
 8002110:	685b      	ldr	r3, [r3, #4]
 8002112:	4619      	mov	r1, r3
 8002114:	2006      	movs	r0, #6
 8002116:	f7fe fff0 	bl	80010fa <DESIoT_assignFloat>
			DESIoT_assignFloat(DESIOT_VS7, Gb_fVolValue[0]);
 800211a:	4b1f      	ldr	r3, [pc, #124]	; (8002198 <main+0x330>)
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	4619      	mov	r1, r3
 8002120:	2007      	movs	r0, #7
 8002122:	f7fe ffea 	bl	80010fa <DESIoT_assignFloat>
			DESIoT_assignFloat(DESIOT_VS8, Gb_fVolValue[1]);
 8002126:	4b1c      	ldr	r3, [pc, #112]	; (8002198 <main+0x330>)
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	4619      	mov	r1, r3
 800212c:	2008      	movs	r0, #8
 800212e:	f7fe ffe4 	bl	80010fa <DESIoT_assignFloat>

			//
			char str[50];
			sprintf(str, "Current Tick: %ld", lastTick);
 8002132:	4b1e      	ldr	r3, [pc, #120]	; (80021ac <main+0x344>)
 8002134:	681a      	ldr	r2, [r3, #0]
 8002136:	463b      	mov	r3, r7
 8002138:	491e      	ldr	r1, [pc, #120]	; (80021b4 <main+0x34c>)
 800213a:	4618      	mov	r0, r3
 800213c:	f004 f8c2 	bl	80062c4 <siprintf>
			DESIoT_assignString(DESIOT_VS9, str);
 8002140:	463b      	mov	r3, r7
 8002142:	4619      	mov	r1, r3
 8002144:	2009      	movs	r0, #9
 8002146:	f7ff f81f 	bl	8001188 <DESIoT_assignString>
	{
 800214a:	e6b9      	b.n	8001ec0 <main+0x58>
 800214c:	f3af 8000 	nop.w
 8002150:	00000000 	.word	0x00000000
 8002154:	40e38800 	.word	0x40e38800
 8002158:	28f5c28f 	.word	0x28f5c28f
 800215c:	3ff68f5c 	.word	0x3ff68f5c
 8002160:	66666666 	.word	0x66666666
 8002164:	400a6666 	.word	0x400a6666
 8002168:	00000000 	.word	0x00000000
 800216c:	40affe00 	.word	0x40affe00
 8002170:	76c8b439 	.word	0x76c8b439
 8002174:	3fe69fbe 	.word	0x3fe69fbe
 8002178:	20000bf4 	.word	0x20000bf4
 800217c:	20000adc 	.word	0x20000adc
 8002180:	20000be0 	.word	0x20000be0
 8002184:	20000b98 	.word	0x20000b98
 8002188:	20000b50 	.word	0x20000b50
 800218c:	20000bfc 	.word	0x20000bfc
 8002190:	20000c00 	.word	0x20000c00
 8002194:	20000c20 	.word	0x20000c20
 8002198:	20000c10 	.word	0x20000c10
 800219c:	20000c08 	.word	0x20000c08
 80021a0:	20000200 	.word	0x20000200
 80021a4:	447a0000 	.word	0x447a0000
 80021a8:	20000c18 	.word	0x20000c18
 80021ac:	20000be4 	.word	0x20000be4
 80021b0:	20000bf0 	.word	0x20000bf0
 80021b4:	08007858 	.word	0x08007858

080021b8 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b094      	sub	sp, #80	; 0x50
 80021bc:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80021be:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021c2:	2228      	movs	r2, #40	; 0x28
 80021c4:	2100      	movs	r1, #0
 80021c6:	4618      	mov	r0, r3
 80021c8:	f004 f836 	bl	8006238 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80021cc:	f107 0314 	add.w	r3, r7, #20
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
 80021d4:	605a      	str	r2, [r3, #4]
 80021d6:	609a      	str	r2, [r3, #8]
 80021d8:	60da      	str	r2, [r3, #12]
 80021da:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80021dc:	1d3b      	adds	r3, r7, #4
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	609a      	str	r2, [r3, #8]
 80021e6:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80021e8:	2301      	movs	r3, #1
 80021ea:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80021ec:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80021f0:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80021f2:	2300      	movs	r3, #0
 80021f4:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80021f6:	2301      	movs	r3, #1
 80021f8:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80021fa:	2302      	movs	r3, #2
 80021fc:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80021fe:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002202:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002204:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8002208:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800220a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800220e:	4618      	mov	r0, r3
 8002210:	f002 f9e4 	bl	80045dc <HAL_RCC_OscConfig>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <SystemClock_Config+0x66>
	{
		Error_Handler();
 800221a:	f000 fc05 	bl	8002a28 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800221e:	230f      	movs	r3, #15
 8002220:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002222:	2302      	movs	r3, #2
 8002224:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002226:	2300      	movs	r3, #0
 8002228:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800222a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800222e:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002230:	2300      	movs	r3, #0
 8002232:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002234:	f107 0314 	add.w	r3, r7, #20
 8002238:	2102      	movs	r1, #2
 800223a:	4618      	mov	r0, r3
 800223c:	f002 fc50 	bl	8004ae0 <HAL_RCC_ClockConfig>
 8002240:	4603      	mov	r3, r0
 8002242:	2b00      	cmp	r3, #0
 8002244:	d001      	beq.n	800224a <SystemClock_Config+0x92>
	{
		Error_Handler();
 8002246:	f000 fbef 	bl	8002a28 <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800224a:	2302      	movs	r3, #2
 800224c:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 800224e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002252:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002254:	1d3b      	adds	r3, r7, #4
 8002256:	4618      	mov	r0, r3
 8002258:	f002 fdd0 	bl	8004dfc <HAL_RCCEx_PeriphCLKConfig>
 800225c:	4603      	mov	r3, r0
 800225e:	2b00      	cmp	r3, #0
 8002260:	d001      	beq.n	8002266 <SystemClock_Config+0xae>
	{
		Error_Handler();
 8002262:	f000 fbe1 	bl	8002a28 <Error_Handler>
	}
}
 8002266:	bf00      	nop
 8002268:	3750      	adds	r7, #80	; 0x50
 800226a:	46bd      	mov	sp, r7
 800226c:	bd80      	pop	{r7, pc}
	...

08002270 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8002270:	b580      	push	{r7, lr}
 8002272:	b084      	sub	sp, #16
 8002274:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 8002276:	1d3b      	adds	r3, r7, #4
 8002278:	2200      	movs	r2, #0
 800227a:	601a      	str	r2, [r3, #0]
 800227c:	605a      	str	r2, [r3, #4]
 800227e:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 8002280:	4b2e      	ldr	r3, [pc, #184]	; (800233c <MX_ADC1_Init+0xcc>)
 8002282:	4a2f      	ldr	r2, [pc, #188]	; (8002340 <MX_ADC1_Init+0xd0>)
 8002284:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 8002286:	4b2d      	ldr	r3, [pc, #180]	; (800233c <MX_ADC1_Init+0xcc>)
 8002288:	f44f 7280 	mov.w	r2, #256	; 0x100
 800228c:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 800228e:	4b2b      	ldr	r3, [pc, #172]	; (800233c <MX_ADC1_Init+0xcc>)
 8002290:	2200      	movs	r2, #0
 8002292:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 8002294:	4b29      	ldr	r3, [pc, #164]	; (800233c <MX_ADC1_Init+0xcc>)
 8002296:	2200      	movs	r2, #0
 8002298:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800229a:	4b28      	ldr	r3, [pc, #160]	; (800233c <MX_ADC1_Init+0xcc>)
 800229c:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80022a0:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80022a2:	4b26      	ldr	r3, [pc, #152]	; (800233c <MX_ADC1_Init+0xcc>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 4;
 80022a8:	4b24      	ldr	r3, [pc, #144]	; (800233c <MX_ADC1_Init+0xcc>)
 80022aa:	2204      	movs	r2, #4
 80022ac:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80022ae:	4823      	ldr	r0, [pc, #140]	; (800233c <MX_ADC1_Init+0xcc>)
 80022b0:	f000 fe68 	bl	8002f84 <HAL_ADC_Init>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_ADC1_Init+0x4e>
	{
		Error_Handler();
 80022ba:	f000 fbb5 	bl	8002a28 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80022be:	2300      	movs	r3, #0
 80022c0:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80022c2:	2301      	movs	r3, #1
 80022c4:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80022c6:	2302      	movs	r3, #2
 80022c8:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022ca:	1d3b      	adds	r3, r7, #4
 80022cc:	4619      	mov	r1, r3
 80022ce:	481b      	ldr	r0, [pc, #108]	; (800233c <MX_ADC1_Init+0xcc>)
 80022d0:	f001 fa1e 	bl	8003710 <HAL_ADC_ConfigChannel>
 80022d4:	4603      	mov	r3, r0
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d001      	beq.n	80022de <MX_ADC1_Init+0x6e>
	{
		Error_Handler();
 80022da:	f000 fba5 	bl	8002a28 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 80022de:	2301      	movs	r3, #1
 80022e0:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 80022e2:	2302      	movs	r3, #2
 80022e4:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80022e6:	1d3b      	adds	r3, r7, #4
 80022e8:	4619      	mov	r1, r3
 80022ea:	4814      	ldr	r0, [pc, #80]	; (800233c <MX_ADC1_Init+0xcc>)
 80022ec:	f001 fa10 	bl	8003710 <HAL_ADC_ConfigChannel>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d001      	beq.n	80022fa <MX_ADC1_Init+0x8a>
	{
		Error_Handler();
 80022f6:	f000 fb97 	bl	8002a28 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 80022fa:	2302      	movs	r3, #2
 80022fc:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 80022fe:	2303      	movs	r3, #3
 8002300:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002302:	1d3b      	adds	r3, r7, #4
 8002304:	4619      	mov	r1, r3
 8002306:	480d      	ldr	r0, [pc, #52]	; (800233c <MX_ADC1_Init+0xcc>)
 8002308:	f001 fa02 	bl	8003710 <HAL_ADC_ConfigChannel>
 800230c:	4603      	mov	r3, r0
 800230e:	2b00      	cmp	r3, #0
 8002310:	d001      	beq.n	8002316 <MX_ADC1_Init+0xa6>
	{
		Error_Handler();
 8002312:	f000 fb89 	bl	8002a28 <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 8002316:	2303      	movs	r3, #3
 8002318:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 800231a:	2304      	movs	r3, #4
 800231c:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800231e:	1d3b      	adds	r3, r7, #4
 8002320:	4619      	mov	r1, r3
 8002322:	4806      	ldr	r0, [pc, #24]	; (800233c <MX_ADC1_Init+0xcc>)
 8002324:	f001 f9f4 	bl	8003710 <HAL_ADC_ConfigChannel>
 8002328:	4603      	mov	r3, r0
 800232a:	2b00      	cmp	r3, #0
 800232c:	d001      	beq.n	8002332 <MX_ADC1_Init+0xc2>
	{
		Error_Handler();
 800232e:	f000 fb7b 	bl	8002a28 <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8002332:	bf00      	nop
 8002334:	3710      	adds	r7, #16
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20000adc 	.word	0x20000adc
 8002340:	40012400 	.word	0x40012400

08002344 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	b086      	sub	sp, #24
 8002348:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800234a:	f107 0308 	add.w	r3, r7, #8
 800234e:	2200      	movs	r2, #0
 8002350:	601a      	str	r2, [r3, #0]
 8002352:	605a      	str	r2, [r3, #4]
 8002354:	609a      	str	r2, [r3, #8]
 8002356:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002358:	463b      	mov	r3, r7
 800235a:	2200      	movs	r2, #0
 800235c:	601a      	str	r2, [r3, #0]
 800235e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002360:	4b1d      	ldr	r3, [pc, #116]	; (80023d8 <MX_TIM2_Init+0x94>)
 8002362:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002366:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 72-1;
 8002368:	4b1b      	ldr	r3, [pc, #108]	; (80023d8 <MX_TIM2_Init+0x94>)
 800236a:	2247      	movs	r2, #71	; 0x47
 800236c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800236e:	4b1a      	ldr	r3, [pc, #104]	; (80023d8 <MX_TIM2_Init+0x94>)
 8002370:	2200      	movs	r2, #0
 8002372:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8002374:	4b18      	ldr	r3, [pc, #96]	; (80023d8 <MX_TIM2_Init+0x94>)
 8002376:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800237a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800237c:	4b16      	ldr	r3, [pc, #88]	; (80023d8 <MX_TIM2_Init+0x94>)
 800237e:	2200      	movs	r2, #0
 8002380:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002382:	4b15      	ldr	r3, [pc, #84]	; (80023d8 <MX_TIM2_Init+0x94>)
 8002384:	2200      	movs	r2, #0
 8002386:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002388:	4813      	ldr	r0, [pc, #76]	; (80023d8 <MX_TIM2_Init+0x94>)
 800238a:	f002 fded 	bl	8004f68 <HAL_TIM_Base_Init>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d001      	beq.n	8002398 <MX_TIM2_Init+0x54>
	{
		Error_Handler();
 8002394:	f000 fb48 	bl	8002a28 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8002398:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800239c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800239e:	f107 0308 	add.w	r3, r7, #8
 80023a2:	4619      	mov	r1, r3
 80023a4:	480c      	ldr	r0, [pc, #48]	; (80023d8 <MX_TIM2_Init+0x94>)
 80023a6:	f002 fe79 	bl	800509c <HAL_TIM_ConfigClockSource>
 80023aa:	4603      	mov	r3, r0
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d001      	beq.n	80023b4 <MX_TIM2_Init+0x70>
	{
		Error_Handler();
 80023b0:	f000 fb3a 	bl	8002a28 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80023b4:	2300      	movs	r3, #0
 80023b6:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80023b8:	2300      	movs	r3, #0
 80023ba:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80023bc:	463b      	mov	r3, r7
 80023be:	4619      	mov	r1, r3
 80023c0:	4805      	ldr	r0, [pc, #20]	; (80023d8 <MX_TIM2_Init+0x94>)
 80023c2:	f003 f82b 	bl	800541c <HAL_TIMEx_MasterConfigSynchronization>
 80023c6:	4603      	mov	r3, r0
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d001      	beq.n	80023d0 <MX_TIM2_Init+0x8c>
	{
		Error_Handler();
 80023cc:	f000 fb2c 	bl	8002a28 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80023d0:	bf00      	nop
 80023d2:	3718      	adds	r7, #24
 80023d4:	46bd      	mov	sp, r7
 80023d6:	bd80      	pop	{r7, pc}
 80023d8:	20000b50 	.word	0x20000b50

080023dc <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80023dc:	b580      	push	{r7, lr}
 80023de:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 80023e0:	4b11      	ldr	r3, [pc, #68]	; (8002428 <MX_USART1_UART_Init+0x4c>)
 80023e2:	4a12      	ldr	r2, [pc, #72]	; (800242c <MX_USART1_UART_Init+0x50>)
 80023e4:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 80023e6:	4b10      	ldr	r3, [pc, #64]	; (8002428 <MX_USART1_UART_Init+0x4c>)
 80023e8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023ec:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023ee:	4b0e      	ldr	r3, [pc, #56]	; (8002428 <MX_USART1_UART_Init+0x4c>)
 80023f0:	2200      	movs	r2, #0
 80023f2:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 80023f4:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <MX_USART1_UART_Init+0x4c>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 80023fa:	4b0b      	ldr	r3, [pc, #44]	; (8002428 <MX_USART1_UART_Init+0x4c>)
 80023fc:	2200      	movs	r2, #0
 80023fe:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002400:	4b09      	ldr	r3, [pc, #36]	; (8002428 <MX_USART1_UART_Init+0x4c>)
 8002402:	220c      	movs	r2, #12
 8002404:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002406:	4b08      	ldr	r3, [pc, #32]	; (8002428 <MX_USART1_UART_Init+0x4c>)
 8002408:	2200      	movs	r2, #0
 800240a:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800240c:	4b06      	ldr	r3, [pc, #24]	; (8002428 <MX_USART1_UART_Init+0x4c>)
 800240e:	2200      	movs	r2, #0
 8002410:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8002412:	4805      	ldr	r0, [pc, #20]	; (8002428 <MX_USART1_UART_Init+0x4c>)
 8002414:	f003 f860 	bl	80054d8 <HAL_UART_Init>
 8002418:	4603      	mov	r3, r0
 800241a:	2b00      	cmp	r3, #0
 800241c:	d001      	beq.n	8002422 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 800241e:	f000 fb03 	bl	8002a28 <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002422:	bf00      	nop
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	20000b98 	.word	0x20000b98
 800242c:	40013800 	.word	0x40013800

08002430 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8002430:	b580      	push	{r7, lr}
 8002432:	b082      	sub	sp, #8
 8002434:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8002436:	4b0c      	ldr	r3, [pc, #48]	; (8002468 <MX_DMA_Init+0x38>)
 8002438:	695b      	ldr	r3, [r3, #20]
 800243a:	4a0b      	ldr	r2, [pc, #44]	; (8002468 <MX_DMA_Init+0x38>)
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	6153      	str	r3, [r2, #20]
 8002442:	4b09      	ldr	r3, [pc, #36]	; (8002468 <MX_DMA_Init+0x38>)
 8002444:	695b      	ldr	r3, [r3, #20]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	607b      	str	r3, [r7, #4]
 800244c:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 800244e:	2200      	movs	r2, #0
 8002450:	2100      	movs	r1, #0
 8002452:	200b      	movs	r0, #11
 8002454:	f001 fc35 	bl	8003cc2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8002458:	200b      	movs	r0, #11
 800245a:	f001 fc4e 	bl	8003cfa <HAL_NVIC_EnableIRQ>

}
 800245e:	bf00      	nop
 8002460:	3708      	adds	r7, #8
 8002462:	46bd      	mov	sp, r7
 8002464:	bd80      	pop	{r7, pc}
 8002466:	bf00      	nop
 8002468:	40021000 	.word	0x40021000

0800246c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800246c:	b580      	push	{r7, lr}
 800246e:	b088      	sub	sp, #32
 8002470:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002472:	f107 0310 	add.w	r3, r7, #16
 8002476:	2200      	movs	r2, #0
 8002478:	601a      	str	r2, [r3, #0]
 800247a:	605a      	str	r2, [r3, #4]
 800247c:	609a      	str	r2, [r3, #8]
 800247e:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8002480:	4b24      	ldr	r3, [pc, #144]	; (8002514 <MX_GPIO_Init+0xa8>)
 8002482:	699b      	ldr	r3, [r3, #24]
 8002484:	4a23      	ldr	r2, [pc, #140]	; (8002514 <MX_GPIO_Init+0xa8>)
 8002486:	f043 0320 	orr.w	r3, r3, #32
 800248a:	6193      	str	r3, [r2, #24]
 800248c:	4b21      	ldr	r3, [pc, #132]	; (8002514 <MX_GPIO_Init+0xa8>)
 800248e:	699b      	ldr	r3, [r3, #24]
 8002490:	f003 0320 	and.w	r3, r3, #32
 8002494:	60fb      	str	r3, [r7, #12]
 8002496:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002498:	4b1e      	ldr	r3, [pc, #120]	; (8002514 <MX_GPIO_Init+0xa8>)
 800249a:	699b      	ldr	r3, [r3, #24]
 800249c:	4a1d      	ldr	r2, [pc, #116]	; (8002514 <MX_GPIO_Init+0xa8>)
 800249e:	f043 0304 	orr.w	r3, r3, #4
 80024a2:	6193      	str	r3, [r2, #24]
 80024a4:	4b1b      	ldr	r3, [pc, #108]	; (8002514 <MX_GPIO_Init+0xa8>)
 80024a6:	699b      	ldr	r3, [r3, #24]
 80024a8:	f003 0304 	and.w	r3, r3, #4
 80024ac:	60bb      	str	r3, [r7, #8]
 80024ae:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80024b0:	4b18      	ldr	r3, [pc, #96]	; (8002514 <MX_GPIO_Init+0xa8>)
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	4a17      	ldr	r2, [pc, #92]	; (8002514 <MX_GPIO_Init+0xa8>)
 80024b6:	f043 0308 	orr.w	r3, r3, #8
 80024ba:	6193      	str	r3, [r2, #24]
 80024bc:	4b15      	ldr	r3, [pc, #84]	; (8002514 <MX_GPIO_Init+0xa8>)
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	f003 0308 	and.w	r3, r3, #8
 80024c4:	607b      	str	r3, [r7, #4]
 80024c6:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, DS18B20_PIN_Pin|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80024c8:	2200      	movs	r2, #0
 80024ca:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80024ce:	4812      	ldr	r0, [pc, #72]	; (8002518 <MX_GPIO_Init+0xac>)
 80024d0:	f002 f86b 	bl	80045aa <HAL_GPIO_WritePin>

	/*Configure GPIO pins : DS18B20_PIN_Pin PB13 PB14 PB15 */
	GPIO_InitStruct.Pin = DS18B20_PIN_Pin|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80024d4:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80024d8:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80024da:	2301      	movs	r3, #1
 80024dc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024e2:	2302      	movs	r3, #2
 80024e4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80024e6:	f107 0310 	add.w	r3, r7, #16
 80024ea:	4619      	mov	r1, r3
 80024ec:	480a      	ldr	r0, [pc, #40]	; (8002518 <MX_GPIO_Init+0xac>)
 80024ee:	f001 fec1 	bl	8004274 <HAL_GPIO_Init>

	/*Configure GPIO pin : DYNAMO_PIN_Pin */
	GPIO_InitStruct.Pin = DYNAMO_PIN_Pin;
 80024f2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80024f6:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80024f8:	2300      	movs	r3, #0
 80024fa:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024fc:	2300      	movs	r3, #0
 80024fe:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(DYNAMO_PIN_GPIO_Port, &GPIO_InitStruct);
 8002500:	f107 0310 	add.w	r3, r7, #16
 8002504:	4619      	mov	r1, r3
 8002506:	4805      	ldr	r0, [pc, #20]	; (800251c <MX_GPIO_Init+0xb0>)
 8002508:	f001 feb4 	bl	8004274 <HAL_GPIO_Init>

}
 800250c:	bf00      	nop
 800250e:	3720      	adds	r7, #32
 8002510:	46bd      	mov	sp, r7
 8002512:	bd80      	pop	{r7, pc}
 8002514:	40021000 	.word	0x40021000
 8002518:	40010c00 	.word	0x40010c00
 800251c:	40010800 	.word	0x40010800

08002520 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
	uint8_t rxByte = huart->Instance->DR;
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	685b      	ldr	r3, [r3, #4]
 800252e:	73fb      	strb	r3, [r7, #15]
	DESIOT_Rx1byte(rxByte);
 8002530:	7bfb      	ldrb	r3, [r7, #15]
 8002532:	4618      	mov	r0, r3
 8002534:	f7fe fd8a 	bl	800104c <DESIOT_Rx1byte>
	HAL_UART_Receive_IT(huart, &ITReceive, 1);
 8002538:	2201      	movs	r2, #1
 800253a:	4904      	ldr	r1, [pc, #16]	; (800254c <HAL_UART_RxCpltCallback+0x2c>)
 800253c:	6878      	ldr	r0, [r7, #4]
 800253e:	f003 f89e 	bl	800567e <HAL_UART_Receive_IT>
}
 8002542:	bf00      	nop
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}
 800254a:	bf00      	nop
 800254c:	20000be0 	.word	0x20000be0

08002550 <DESIoT_sendBytes>:
DESIOT_SENDBYTES
{
 8002550:	b580      	push	{r7, lr}
 8002552:	b082      	sub	sp, #8
 8002554:	af00      	add	r7, sp, #0
 8002556:	6078      	str	r0, [r7, #4]
 8002558:	6039      	str	r1, [r7, #0]
	while(HAL_UART_Transmit(&huart1, bytes, size, 1000) != HAL_OK);
 800255a:	bf00      	nop
 800255c:	687b      	ldr	r3, [r7, #4]
 800255e:	b29a      	uxth	r2, r3
 8002560:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002564:	6839      	ldr	r1, [r7, #0]
 8002566:	4805      	ldr	r0, [pc, #20]	; (800257c <DESIoT_sendBytes+0x2c>)
 8002568:	f003 f806 	bl	8005578 <HAL_UART_Transmit>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d1f4      	bne.n	800255c <DESIoT_sendBytes+0xc>
}
 8002572:	bf00      	nop
 8002574:	bf00      	nop
 8002576:	3708      	adds	r7, #8
 8002578:	46bd      	mov	sp, r7
 800257a:	bd80      	pop	{r7, pc}
 800257c:	20000b98 	.word	0x20000b98

08002580 <DESIoT_millis>:
DESIOT_MILLIS {
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 8002584:	f000 fcf4 	bl	8002f70 <HAL_GetTick>
 8002588:	4603      	mov	r3, r0
}
 800258a:	4618      	mov	r0, r3
 800258c:	bd80      	pop	{r7, pc}
	...

08002590 <DESIoT_execSyncDESIOT_VS1>:

DESIOT_DEF_EXEC_SYNC(DESIOT_VS1) {
 8002590:	b480      	push	{r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
 8002598:	6039      	str	r1, [r7, #0]
	testMode = payload[0];
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	781a      	ldrb	r2, [r3, #0]
 800259e:	4b03      	ldr	r3, [pc, #12]	; (80025ac <DESIoT_execSyncDESIOT_VS1+0x1c>)
 80025a0:	701a      	strb	r2, [r3, #0]
}
 80025a2:	bf00      	nop
 80025a4:	370c      	adds	r7, #12
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bc80      	pop	{r7}
 80025aa:	4770      	bx	lr
 80025ac:	20000be8 	.word	0x20000be8

080025b0 <DESIoT_execSyncDESIOT_VS3>:
DESIOT_DEF_EXEC_SYNC(DESIOT_VS3) {
 80025b0:	b580      	push	{r7, lr}
 80025b2:	b082      	sub	sp, #8
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
 80025b8:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, payload[0]);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	781b      	ldrb	r3, [r3, #0]
 80025be:	461a      	mov	r2, r3
 80025c0:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80025c4:	4809      	ldr	r0, [pc, #36]	; (80025ec <DESIoT_execSyncDESIOT_VS3+0x3c>)
 80025c6:	f001 fff0 	bl	80045aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80025ca:	2201      	movs	r2, #1
 80025cc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025d0:	4806      	ldr	r0, [pc, #24]	; (80025ec <DESIoT_execSyncDESIOT_VS3+0x3c>)
 80025d2:	f001 ffea 	bl	80045aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80025d6:	2200      	movs	r2, #0
 80025d8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80025dc:	4803      	ldr	r0, [pc, #12]	; (80025ec <DESIoT_execSyncDESIOT_VS3+0x3c>)
 80025de:	f001 ffe4 	bl	80045aa <HAL_GPIO_WritePin>
}
 80025e2:	bf00      	nop
 80025e4:	3708      	adds	r7, #8
 80025e6:	46bd      	mov	sp, r7
 80025e8:	bd80      	pop	{r7, pc}
 80025ea:	bf00      	nop
 80025ec:	40010c00 	.word	0x40010c00

080025f0 <DESIoT_execSyncDESIOT_VS4>:

DESIOT_DEF_EXEC_SYNC(DESIOT_VS4) {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b082      	sub	sp, #8
 80025f4:	af00      	add	r7, sp, #0
 80025f6:	6078      	str	r0, [r7, #4]
 80025f8:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, payload[0]);
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	781b      	ldrb	r3, [r3, #0]
 80025fe:	461a      	mov	r2, r3
 8002600:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002604:	4809      	ldr	r0, [pc, #36]	; (800262c <DESIoT_execSyncDESIOT_VS4+0x3c>)
 8002606:	f001 ffd0 	bl	80045aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800260a:	2201      	movs	r2, #1
 800260c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002610:	4806      	ldr	r0, [pc, #24]	; (800262c <DESIoT_execSyncDESIOT_VS4+0x3c>)
 8002612:	f001 ffca 	bl	80045aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 8002616:	2200      	movs	r2, #0
 8002618:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800261c:	4803      	ldr	r0, [pc, #12]	; (800262c <DESIoT_execSyncDESIOT_VS4+0x3c>)
 800261e:	f001 ffc4 	bl	80045aa <HAL_GPIO_WritePin>
}
 8002622:	bf00      	nop
 8002624:	3708      	adds	r7, #8
 8002626:	46bd      	mov	sp, r7
 8002628:	bd80      	pop	{r7, pc}
 800262a:	bf00      	nop
 800262c:	40010c00 	.word	0x40010c00

08002630 <getSensorValue>:

void getSensorValue()
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
	getTemperature();
 8002634:	f000 f802 	bl	800263c <getTemperature>
}
 8002638:	bf00      	nop
 800263a:	bd80      	pop	{r7, pc}

0800263c <getTemperature>:


void getTemperature()
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 8002640:	482b      	ldr	r0, [pc, #172]	; (80026f0 <getTemperature+0xb4>)
 8002642:	f000 ff3f 	bl	80034c4 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_IT(&hadc1);
 8002646:	482a      	ldr	r0, [pc, #168]	; (80026f0 <getTemperature+0xb4>)
 8002648:	f000 fe2a 	bl	80032a0 <HAL_ADC_Stop_IT>

	Presence = DS18B20_Start ();
 800264c:	f000 f93e 	bl	80028cc <DS18B20_Start>
 8002650:	4603      	mov	r3, r0
 8002652:	461a      	mov	r2, r3
 8002654:	4b27      	ldr	r3, [pc, #156]	; (80026f4 <getTemperature+0xb8>)
 8002656:	701a      	strb	r2, [r3, #0]
	delay(1);
 8002658:	2001      	movs	r0, #1
 800265a:	f000 f8d3 	bl	8002804 <delay>
	DS18B20_Write (0xCC);  // skip ROM
 800265e:	20cc      	movs	r0, #204	; 0xcc
 8002660:	f000 f8e8 	bl	8002834 <DS18B20_Write>
	DS18B20_Write (0x44);  // convert t
 8002664:	2044      	movs	r0, #68	; 0x44
 8002666:	f000 f8e5 	bl	8002834 <DS18B20_Write>
	delay(1);
 800266a:	2001      	movs	r0, #1
 800266c:	f000 f8ca 	bl	8002804 <delay>

	Presence = DS18B20_Start ();
 8002670:	f000 f92c 	bl	80028cc <DS18B20_Start>
 8002674:	4603      	mov	r3, r0
 8002676:	461a      	mov	r2, r3
 8002678:	4b1e      	ldr	r3, [pc, #120]	; (80026f4 <getTemperature+0xb8>)
 800267a:	701a      	strb	r2, [r3, #0]
	delay(1);
 800267c:	2001      	movs	r0, #1
 800267e:	f000 f8c1 	bl	8002804 <delay>
	DS18B20_Write (0xCC);  // skip ROM
 8002682:	20cc      	movs	r0, #204	; 0xcc
 8002684:	f000 f8d6 	bl	8002834 <DS18B20_Write>
	DS18B20_Write (0xBE);  // Read Scratch-pad
 8002688:	20be      	movs	r0, #190	; 0xbe
 800268a:	f000 f8d3 	bl	8002834 <DS18B20_Write>

	Temp_byte1 = DS18B20_Read();
 800268e:	f000 f83d 	bl	800270c <DS18B20_Read>
 8002692:	4603      	mov	r3, r0
 8002694:	461a      	mov	r2, r3
 8002696:	4b18      	ldr	r3, [pc, #96]	; (80026f8 <getTemperature+0xbc>)
 8002698:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DS18B20_Read();
 800269a:	f000 f837 	bl	800270c <DS18B20_Read>
 800269e:	4603      	mov	r3, r0
 80026a0:	461a      	mov	r2, r3
 80026a2:	4b16      	ldr	r3, [pc, #88]	; (80026fc <getTemperature+0xc0>)
 80026a4:	701a      	strb	r2, [r3, #0]
	TEMP = (Temp_byte2<<8)|Temp_byte1;
 80026a6:	4b15      	ldr	r3, [pc, #84]	; (80026fc <getTemperature+0xc0>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	021b      	lsls	r3, r3, #8
 80026ac:	b21a      	sxth	r2, r3
 80026ae:	4b12      	ldr	r3, [pc, #72]	; (80026f8 <getTemperature+0xbc>)
 80026b0:	781b      	ldrb	r3, [r3, #0]
 80026b2:	b21b      	sxth	r3, r3
 80026b4:	4313      	orrs	r3, r2
 80026b6:	b21b      	sxth	r3, r3
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	4b11      	ldr	r3, [pc, #68]	; (8002700 <getTemperature+0xc4>)
 80026bc:	801a      	strh	r2, [r3, #0]
	Temperature = (float)TEMP/16;
 80026be:	4b10      	ldr	r3, [pc, #64]	; (8002700 <getTemperature+0xc4>)
 80026c0:	881b      	ldrh	r3, [r3, #0]
 80026c2:	4618      	mov	r0, r3
 80026c4:	f7fe fabe 	bl	8000c44 <__aeabi_ui2f>
 80026c8:	4603      	mov	r3, r0
 80026ca:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7fe fbc4 	bl	8000e5c <__aeabi_fdiv>
 80026d4:	4603      	mov	r3, r0
 80026d6:	461a      	mov	r2, r3
 80026d8:	4b0a      	ldr	r3, [pc, #40]	; (8002704 <getTemperature+0xc8>)
 80026da:	601a      	str	r2, [r3, #0]

	HAL_ADC_Start_DMA(&hadc1,(uint32_t*) Gb_suiAdcValue, 4);
 80026dc:	2204      	movs	r2, #4
 80026de:	490a      	ldr	r1, [pc, #40]	; (8002708 <getTemperature+0xcc>)
 80026e0:	4803      	ldr	r0, [pc, #12]	; (80026f0 <getTemperature+0xb4>)
 80026e2:	f000 fe11 	bl	8003308 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_IT(&hadc1);
 80026e6:	4802      	ldr	r0, [pc, #8]	; (80026f0 <getTemperature+0xb4>)
 80026e8:	f000 fd24 	bl	8003134 <HAL_ADC_Start_IT>
}
 80026ec:	bf00      	nop
 80026ee:	bd80      	pop	{r7, pc}
 80026f0:	20000adc 	.word	0x20000adc
 80026f4:	20000be9 	.word	0x20000be9
 80026f8:	20000bea 	.word	0x20000bea
 80026fc:	20000beb 	.word	0x20000beb
 8002700:	20000bec 	.word	0x20000bec
 8002704:	20000bf0 	.word	0x20000bf0
 8002708:	20000bf4 	.word	0x20000bf4

0800270c <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	b082      	sub	sp, #8
 8002710:	af00      	add	r7, sp, #0
	uint8_t value=0;
 8002712:	2300      	movs	r3, #0
 8002714:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 8002716:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800271a:	481c      	ldr	r0, [pc, #112]	; (800278c <DS18B20_Read+0x80>)
 800271c:	f000 f838 	bl	8002790 <Set_Pin_Input>

	for (int i=0;i<8;i++)
 8002720:	2300      	movs	r3, #0
 8002722:	603b      	str	r3, [r7, #0]
 8002724:	e02a      	b.n	800277c <DS18B20_Read+0x70>
	{
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set as output
 8002726:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800272a:	4818      	ldr	r0, [pc, #96]	; (800278c <DS18B20_Read+0x80>)
 800272c:	f000 f84d 	bl	80027ca <Set_Pin_Output>

		HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the data pin LOW
 8002730:	2200      	movs	r2, #0
 8002732:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002736:	4815      	ldr	r0, [pc, #84]	; (800278c <DS18B20_Read+0x80>)
 8002738:	f001 ff37 	bl	80045aa <HAL_GPIO_WritePin>
		delay (1);  // wait for > 1us
 800273c:	2001      	movs	r0, #1
 800273e:	f000 f861 	bl	8002804 <delay>

		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 8002742:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002746:	4811      	ldr	r0, [pc, #68]	; (800278c <DS18B20_Read+0x80>)
 8002748:	f000 f822 	bl	8002790 <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))  // if the pin is HIGH
 800274c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002750:	480e      	ldr	r0, [pc, #56]	; (800278c <DS18B20_Read+0x80>)
 8002752:	f001 ff13 	bl	800457c <HAL_GPIO_ReadPin>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d009      	beq.n	8002770 <DS18B20_Read+0x64>
		{
			value |= 1<<i;  // read = 1
 800275c:	2201      	movs	r2, #1
 800275e:	683b      	ldr	r3, [r7, #0]
 8002760:	fa02 f303 	lsl.w	r3, r2, r3
 8002764:	b25a      	sxtb	r2, r3
 8002766:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800276a:	4313      	orrs	r3, r2
 800276c:	b25b      	sxtb	r3, r3
 800276e:	71fb      	strb	r3, [r7, #7]
		}
		delay (50);  // wait for 60 us
 8002770:	2032      	movs	r0, #50	; 0x32
 8002772:	f000 f847 	bl	8002804 <delay>
	for (int i=0;i<8;i++)
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	3301      	adds	r3, #1
 800277a:	603b      	str	r3, [r7, #0]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	2b07      	cmp	r3, #7
 8002780:	ddd1      	ble.n	8002726 <DS18B20_Read+0x1a>
	}
	return value;
 8002782:	79fb      	ldrb	r3, [r7, #7]
}
 8002784:	4618      	mov	r0, r3
 8002786:	3708      	adds	r7, #8
 8002788:	46bd      	mov	sp, r7
 800278a:	bd80      	pop	{r7, pc}
 800278c:	40010c00 	.word	0x40010c00

08002790 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b086      	sub	sp, #24
 8002794:	af00      	add	r7, sp, #0
 8002796:	6078      	str	r0, [r7, #4]
 8002798:	460b      	mov	r3, r1
 800279a:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800279c:	f107 0308 	add.w	r3, r7, #8
 80027a0:	2200      	movs	r2, #0
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	605a      	str	r2, [r3, #4]
 80027a6:	609a      	str	r2, [r3, #8]
 80027a8:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80027aa:	887b      	ldrh	r3, [r7, #2]
 80027ac:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80027ae:	2300      	movs	r3, #0
 80027b0:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027b2:	2301      	movs	r3, #1
 80027b4:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80027b6:	f107 0308 	add.w	r3, r7, #8
 80027ba:	4619      	mov	r1, r3
 80027bc:	6878      	ldr	r0, [r7, #4]
 80027be:	f001 fd59 	bl	8004274 <HAL_GPIO_Init>
}
 80027c2:	bf00      	nop
 80027c4:	3718      	adds	r7, #24
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}

080027ca <Set_Pin_Output>:
void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80027ca:	b580      	push	{r7, lr}
 80027cc:	b086      	sub	sp, #24
 80027ce:	af00      	add	r7, sp, #0
 80027d0:	6078      	str	r0, [r7, #4]
 80027d2:	460b      	mov	r3, r1
 80027d4:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027d6:	f107 0308 	add.w	r3, r7, #8
 80027da:	2200      	movs	r2, #0
 80027dc:	601a      	str	r2, [r3, #0]
 80027de:	605a      	str	r2, [r3, #4]
 80027e0:	609a      	str	r2, [r3, #8]
 80027e2:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80027e4:	887b      	ldrh	r3, [r7, #2]
 80027e6:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80027e8:	2301      	movs	r3, #1
 80027ea:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ec:	2302      	movs	r3, #2
 80027ee:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80027f0:	f107 0308 	add.w	r3, r7, #8
 80027f4:	4619      	mov	r1, r3
 80027f6:	6878      	ldr	r0, [r7, #4]
 80027f8:	f001 fd3c 	bl	8004274 <HAL_GPIO_Init>
}
 80027fc:	bf00      	nop
 80027fe:	3718      	adds	r7, #24
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}

08002804 <delay>:
void delay (uint16_t time)
{
 8002804:	b480      	push	{r7}
 8002806:	b083      	sub	sp, #12
 8002808:	af00      	add	r7, sp, #0
 800280a:	4603      	mov	r3, r0
 800280c:	80fb      	strh	r3, [r7, #6]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 800280e:	4b08      	ldr	r3, [pc, #32]	; (8002830 <delay+0x2c>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	2200      	movs	r2, #0
 8002814:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim2))<time);
 8002816:	bf00      	nop
 8002818:	4b05      	ldr	r3, [pc, #20]	; (8002830 <delay+0x2c>)
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800281e:	88fb      	ldrh	r3, [r7, #6]
 8002820:	429a      	cmp	r2, r3
 8002822:	d3f9      	bcc.n	8002818 <delay+0x14>
}
 8002824:	bf00      	nop
 8002826:	bf00      	nop
 8002828:	370c      	adds	r7, #12
 800282a:	46bd      	mov	sp, r7
 800282c:	bc80      	pop	{r7}
 800282e:	4770      	bx	lr
 8002830:	20000b50 	.word	0x20000b50

08002834 <DS18B20_Write>:
void DS18B20_Write (uint8_t data)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	4603      	mov	r3, r0
 800283c:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 800283e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002842:	4821      	ldr	r0, [pc, #132]	; (80028c8 <DS18B20_Write+0x94>)
 8002844:	f7ff ffc1 	bl	80027ca <Set_Pin_Output>

	for (int i=0; i<8; i++)
 8002848:	2300      	movs	r3, #0
 800284a:	60fb      	str	r3, [r7, #12]
 800284c:	e034      	b.n	80028b8 <DS18B20_Write+0x84>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 800284e:	79fa      	ldrb	r2, [r7, #7]
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	fa42 f303 	asr.w	r3, r2, r3
 8002856:	f003 0301 	and.w	r3, r3, #1
 800285a:	2b00      	cmp	r3, #0
 800285c:	d016      	beq.n	800288c <DS18B20_Write+0x58>
		{
			// write 1

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 800285e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002862:	4819      	ldr	r0, [pc, #100]	; (80028c8 <DS18B20_Write+0x94>)
 8002864:	f7ff ffb1 	bl	80027ca <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 8002868:	2200      	movs	r2, #0
 800286a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800286e:	4816      	ldr	r0, [pc, #88]	; (80028c8 <DS18B20_Write+0x94>)
 8002870:	f001 fe9b 	bl	80045aa <HAL_GPIO_WritePin>
			delay (1);  // wait for 1 us
 8002874:	2001      	movs	r0, #1
 8002876:	f7ff ffc5 	bl	8002804 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 800287a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800287e:	4812      	ldr	r0, [pc, #72]	; (80028c8 <DS18B20_Write+0x94>)
 8002880:	f7ff ff86 	bl	8002790 <Set_Pin_Input>
			delay (50);  // wait for 60 us
 8002884:	2032      	movs	r0, #50	; 0x32
 8002886:	f7ff ffbd 	bl	8002804 <delay>
 800288a:	e012      	b.n	80028b2 <DS18B20_Write+0x7e>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 800288c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002890:	480d      	ldr	r0, [pc, #52]	; (80028c8 <DS18B20_Write+0x94>)
 8002892:	f7ff ff9a 	bl	80027ca <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 8002896:	2200      	movs	r2, #0
 8002898:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800289c:	480a      	ldr	r0, [pc, #40]	; (80028c8 <DS18B20_Write+0x94>)
 800289e:	f001 fe84 	bl	80045aa <HAL_GPIO_WritePin>
			delay (50);  // wait for 60 us
 80028a2:	2032      	movs	r0, #50	; 0x32
 80028a4:	f7ff ffae 	bl	8002804 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 80028a8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028ac:	4806      	ldr	r0, [pc, #24]	; (80028c8 <DS18B20_Write+0x94>)
 80028ae:	f7ff ff6f 	bl	8002790 <Set_Pin_Input>
	for (int i=0; i<8; i++)
 80028b2:	68fb      	ldr	r3, [r7, #12]
 80028b4:	3301      	adds	r3, #1
 80028b6:	60fb      	str	r3, [r7, #12]
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	2b07      	cmp	r3, #7
 80028bc:	ddc7      	ble.n	800284e <DS18B20_Write+0x1a>
		}
	}
}
 80028be:	bf00      	nop
 80028c0:	bf00      	nop
 80028c2:	3710      	adds	r7, #16
 80028c4:	46bd      	mov	sp, r7
 80028c6:	bd80      	pop	{r7, pc}
 80028c8:	40010c00 	.word	0x40010c00

080028cc <DS18B20_Start>:
uint8_t DS18B20_Start (void)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80028d2:	2300      	movs	r3, #0
 80028d4:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 80028d6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028da:	4815      	ldr	r0, [pc, #84]	; (8002930 <DS18B20_Start+0x64>)
 80028dc:	f7ff ff75 	bl	80027ca <Set_Pin_Output>
	HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin low
 80028e0:	2200      	movs	r2, #0
 80028e2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028e6:	4812      	ldr	r0, [pc, #72]	; (8002930 <DS18B20_Start+0x64>)
 80028e8:	f001 fe5f 	bl	80045aa <HAL_GPIO_WritePin>
	delay (480);   // delay according to datasheet
 80028ec:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80028f0:	f7ff ff88 	bl	8002804 <delay>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 80028f4:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80028f8:	480d      	ldr	r0, [pc, #52]	; (8002930 <DS18B20_Start+0x64>)
 80028fa:	f7ff ff49 	bl	8002790 <Set_Pin_Input>
	delay (80);    // delay according to datasheet
 80028fe:	2050      	movs	r0, #80	; 0x50
 8002900:	f7ff ff80 	bl	8002804 <delay>

	if (!(HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 8002904:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002908:	4809      	ldr	r0, [pc, #36]	; (8002930 <DS18B20_Start+0x64>)
 800290a:	f001 fe37 	bl	800457c <HAL_GPIO_ReadPin>
 800290e:	4603      	mov	r3, r0
 8002910:	2b00      	cmp	r3, #0
 8002912:	d102      	bne.n	800291a <DS18B20_Start+0x4e>
 8002914:	2301      	movs	r3, #1
 8002916:	71fb      	strb	r3, [r7, #7]
 8002918:	e001      	b.n	800291e <DS18B20_Start+0x52>
	else Response = -1;
 800291a:	23ff      	movs	r3, #255	; 0xff
 800291c:	71fb      	strb	r3, [r7, #7]

	delay (400); // 480 us delay totally.
 800291e:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002922:	f7ff ff6f 	bl	8002804 <delay>

	return Response;
 8002926:	79fb      	ldrb	r3, [r7, #7]
}
 8002928:	4618      	mov	r0, r3
 800292a:	3708      	adds	r7, #8
 800292c:	46bd      	mov	sp, r7
 800292e:	bd80      	pop	{r7, pc}
 8002930:	40010c00 	.word	0x40010c00

08002934 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == hadc1.Instance){
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	681a      	ldr	r2, [r3, #0]
 8002940:	4b32      	ldr	r3, [pc, #200]	; (8002a0c <HAL_ADC_ConvCpltCallback+0xd8>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	429a      	cmp	r2, r3
 8002946:	d15c      	bne.n	8002a02 <HAL_ADC_ConvCpltCallback+0xce>
		Gb_suiCountReadAdc++;
 8002948:	4b31      	ldr	r3, [pc, #196]	; (8002a10 <HAL_ADC_ConvCpltCallback+0xdc>)
 800294a:	881b      	ldrh	r3, [r3, #0]
 800294c:	3301      	adds	r3, #1
 800294e:	b29a      	uxth	r2, r3
 8002950:	4b2f      	ldr	r3, [pc, #188]	; (8002a10 <HAL_ADC_ConvCpltCallback+0xdc>)
 8002952:	801a      	strh	r2, [r3, #0]
		Gb_suiAdcTemp[0] = Gb_suiAdcValue[0] - 1977;
 8002954:	4b2f      	ldr	r3, [pc, #188]	; (8002a14 <HAL_ADC_ConvCpltCallback+0xe0>)
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	f2a3 73b9 	subw	r3, r3, #1977	; 0x7b9
 800295c:	b29b      	uxth	r3, r3
 800295e:	b21a      	sxth	r2, r3
 8002960:	4b2d      	ldr	r3, [pc, #180]	; (8002a18 <HAL_ADC_ConvCpltCallback+0xe4>)
 8002962:	801a      	strh	r2, [r3, #0]
		Gb_suiAdcTemp[1] = Gb_suiAdcValue[1] - 1977;
 8002964:	4b2b      	ldr	r3, [pc, #172]	; (8002a14 <HAL_ADC_ConvCpltCallback+0xe0>)
 8002966:	885b      	ldrh	r3, [r3, #2]
 8002968:	f2a3 73b9 	subw	r3, r3, #1977	; 0x7b9
 800296c:	b29b      	uxth	r3, r3
 800296e:	b21a      	sxth	r2, r3
 8002970:	4b29      	ldr	r3, [pc, #164]	; (8002a18 <HAL_ADC_ConvCpltCallback+0xe4>)
 8002972:	805a      	strh	r2, [r3, #2]
		Gb_uiAdcSum[0] += (Gb_suiAdcTemp[0])*(Gb_suiAdcTemp[0]);
 8002974:	4b29      	ldr	r3, [pc, #164]	; (8002a1c <HAL_ADC_ConvCpltCallback+0xe8>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a27      	ldr	r2, [pc, #156]	; (8002a18 <HAL_ADC_ConvCpltCallback+0xe4>)
 800297a:	f9b2 2000 	ldrsh.w	r2, [r2]
 800297e:	4611      	mov	r1, r2
 8002980:	4a25      	ldr	r2, [pc, #148]	; (8002a18 <HAL_ADC_ConvCpltCallback+0xe4>)
 8002982:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002986:	fb01 f202 	mul.w	r2, r1, r2
 800298a:	4413      	add	r3, r2
 800298c:	4a23      	ldr	r2, [pc, #140]	; (8002a1c <HAL_ADC_ConvCpltCallback+0xe8>)
 800298e:	6013      	str	r3, [r2, #0]
		Gb_uiAdcSum[1] += (Gb_suiAdcTemp[1])*(Gb_suiAdcTemp[1]);
 8002990:	4b22      	ldr	r3, [pc, #136]	; (8002a1c <HAL_ADC_ConvCpltCallback+0xe8>)
 8002992:	685b      	ldr	r3, [r3, #4]
 8002994:	4a20      	ldr	r2, [pc, #128]	; (8002a18 <HAL_ADC_ConvCpltCallback+0xe4>)
 8002996:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800299a:	4611      	mov	r1, r2
 800299c:	4a1e      	ldr	r2, [pc, #120]	; (8002a18 <HAL_ADC_ConvCpltCallback+0xe4>)
 800299e:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80029a2:	fb01 f202 	mul.w	r2, r1, r2
 80029a6:	4413      	add	r3, r2
 80029a8:	4a1c      	ldr	r2, [pc, #112]	; (8002a1c <HAL_ADC_ConvCpltCallback+0xe8>)
 80029aa:	6053      	str	r3, [r2, #4]

		if (Gb_suiAdcValue[2] > Gb_suiAdcMaxValue[0]){
 80029ac:	4b19      	ldr	r3, [pc, #100]	; (8002a14 <HAL_ADC_ConvCpltCallback+0xe0>)
 80029ae:	889a      	ldrh	r2, [r3, #4]
 80029b0:	4b1b      	ldr	r3, [pc, #108]	; (8002a20 <HAL_ADC_ConvCpltCallback+0xec>)
 80029b2:	881b      	ldrh	r3, [r3, #0]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	d903      	bls.n	80029c0 <HAL_ADC_ConvCpltCallback+0x8c>
			Gb_suiAdcMaxValue[0] = Gb_suiAdcValue[2];
 80029b8:	4b16      	ldr	r3, [pc, #88]	; (8002a14 <HAL_ADC_ConvCpltCallback+0xe0>)
 80029ba:	889a      	ldrh	r2, [r3, #4]
 80029bc:	4b18      	ldr	r3, [pc, #96]	; (8002a20 <HAL_ADC_ConvCpltCallback+0xec>)
 80029be:	801a      	strh	r2, [r3, #0]
		}
		if (Gb_suiAdcValue[2] < Gb_suiAdcMinValue[0]){
 80029c0:	4b14      	ldr	r3, [pc, #80]	; (8002a14 <HAL_ADC_ConvCpltCallback+0xe0>)
 80029c2:	889a      	ldrh	r2, [r3, #4]
 80029c4:	4b17      	ldr	r3, [pc, #92]	; (8002a24 <HAL_ADC_ConvCpltCallback+0xf0>)
 80029c6:	881b      	ldrh	r3, [r3, #0]
 80029c8:	429a      	cmp	r2, r3
 80029ca:	d203      	bcs.n	80029d4 <HAL_ADC_ConvCpltCallback+0xa0>
			/*record the minimum sensor value*/
			Gb_suiAdcMinValue[0] = Gb_suiAdcValue[2];
 80029cc:	4b11      	ldr	r3, [pc, #68]	; (8002a14 <HAL_ADC_ConvCpltCallback+0xe0>)
 80029ce:	889a      	ldrh	r2, [r3, #4]
 80029d0:	4b14      	ldr	r3, [pc, #80]	; (8002a24 <HAL_ADC_ConvCpltCallback+0xf0>)
 80029d2:	801a      	strh	r2, [r3, #0]
		}

		if (Gb_suiAdcValue[3] > Gb_suiAdcMaxValue[1]){
 80029d4:	4b0f      	ldr	r3, [pc, #60]	; (8002a14 <HAL_ADC_ConvCpltCallback+0xe0>)
 80029d6:	88da      	ldrh	r2, [r3, #6]
 80029d8:	4b11      	ldr	r3, [pc, #68]	; (8002a20 <HAL_ADC_ConvCpltCallback+0xec>)
 80029da:	885b      	ldrh	r3, [r3, #2]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d903      	bls.n	80029e8 <HAL_ADC_ConvCpltCallback+0xb4>
			/*record the maximum sensor value*/
			Gb_suiAdcMaxValue[1] = Gb_suiAdcValue[3];
 80029e0:	4b0c      	ldr	r3, [pc, #48]	; (8002a14 <HAL_ADC_ConvCpltCallback+0xe0>)
 80029e2:	88da      	ldrh	r2, [r3, #6]
 80029e4:	4b0e      	ldr	r3, [pc, #56]	; (8002a20 <HAL_ADC_ConvCpltCallback+0xec>)
 80029e6:	805a      	strh	r2, [r3, #2]
		}
		if (Gb_suiAdcValue[3] < Gb_suiAdcMinValue[1]){
 80029e8:	4b0a      	ldr	r3, [pc, #40]	; (8002a14 <HAL_ADC_ConvCpltCallback+0xe0>)
 80029ea:	88da      	ldrh	r2, [r3, #6]
 80029ec:	4b0d      	ldr	r3, [pc, #52]	; (8002a24 <HAL_ADC_ConvCpltCallback+0xf0>)
 80029ee:	885b      	ldrh	r3, [r3, #2]
 80029f0:	429a      	cmp	r2, r3
 80029f2:	d203      	bcs.n	80029fc <HAL_ADC_ConvCpltCallback+0xc8>
			/*record the minimum sensor value*/
			Gb_suiAdcMinValue[1] = Gb_suiAdcValue[3];
 80029f4:	4b07      	ldr	r3, [pc, #28]	; (8002a14 <HAL_ADC_ConvCpltCallback+0xe0>)
 80029f6:	88da      	ldrh	r2, [r3, #6]
 80029f8:	4b0a      	ldr	r3, [pc, #40]	; (8002a24 <HAL_ADC_ConvCpltCallback+0xf0>)
 80029fa:	805a      	strh	r2, [r3, #2]
		}

		HAL_ADC_Start_IT(&hadc1);
 80029fc:	4803      	ldr	r0, [pc, #12]	; (8002a0c <HAL_ADC_ConvCpltCallback+0xd8>)
 80029fe:	f000 fb99 	bl	8003134 <HAL_ADC_Start_IT>
	}
}
 8002a02:	bf00      	nop
 8002a04:	3708      	adds	r7, #8
 8002a06:	46bd      	mov	sp, r7
 8002a08:	bd80      	pop	{r7, pc}
 8002a0a:	bf00      	nop
 8002a0c:	20000adc 	.word	0x20000adc
 8002a10:	20000bfc 	.word	0x20000bfc
 8002a14:	20000bf4 	.word	0x20000bf4
 8002a18:	20000c0c 	.word	0x20000c0c
 8002a1c:	20000c00 	.word	0x20000c00
 8002a20:	20000c08 	.word	0x20000c08
 8002a24:	20000200 	.word	0x20000200

08002a28 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a2c:	b672      	cpsid	i
}
 8002a2e:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002a30:	e7fe      	b.n	8002a30 <Error_Handler+0x8>
	...

08002a34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b085      	sub	sp, #20
 8002a38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a3a:	4b15      	ldr	r3, [pc, #84]	; (8002a90 <HAL_MspInit+0x5c>)
 8002a3c:	699b      	ldr	r3, [r3, #24]
 8002a3e:	4a14      	ldr	r2, [pc, #80]	; (8002a90 <HAL_MspInit+0x5c>)
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	6193      	str	r3, [r2, #24]
 8002a46:	4b12      	ldr	r3, [pc, #72]	; (8002a90 <HAL_MspInit+0x5c>)
 8002a48:	699b      	ldr	r3, [r3, #24]
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	60bb      	str	r3, [r7, #8]
 8002a50:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a52:	4b0f      	ldr	r3, [pc, #60]	; (8002a90 <HAL_MspInit+0x5c>)
 8002a54:	69db      	ldr	r3, [r3, #28]
 8002a56:	4a0e      	ldr	r2, [pc, #56]	; (8002a90 <HAL_MspInit+0x5c>)
 8002a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a5c:	61d3      	str	r3, [r2, #28]
 8002a5e:	4b0c      	ldr	r3, [pc, #48]	; (8002a90 <HAL_MspInit+0x5c>)
 8002a60:	69db      	ldr	r3, [r3, #28]
 8002a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a66:	607b      	str	r3, [r7, #4]
 8002a68:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a6a:	4b0a      	ldr	r3, [pc, #40]	; (8002a94 <HAL_MspInit+0x60>)
 8002a6c:	685b      	ldr	r3, [r3, #4]
 8002a6e:	60fb      	str	r3, [r7, #12]
 8002a70:	68fb      	ldr	r3, [r7, #12]
 8002a72:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8002a76:	60fb      	str	r3, [r7, #12]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002a7e:	60fb      	str	r3, [r7, #12]
 8002a80:	4a04      	ldr	r2, [pc, #16]	; (8002a94 <HAL_MspInit+0x60>)
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a86:	bf00      	nop
 8002a88:	3714      	adds	r7, #20
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bc80      	pop	{r7}
 8002a8e:	4770      	bx	lr
 8002a90:	40021000 	.word	0x40021000
 8002a94:	40010000 	.word	0x40010000

08002a98 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002a98:	b580      	push	{r7, lr}
 8002a9a:	b088      	sub	sp, #32
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002aa0:	f107 0310 	add.w	r3, r7, #16
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]
 8002aa8:	605a      	str	r2, [r3, #4]
 8002aaa:	609a      	str	r2, [r3, #8]
 8002aac:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a2c      	ldr	r2, [pc, #176]	; (8002b64 <HAL_ADC_MspInit+0xcc>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d151      	bne.n	8002b5c <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002ab8:	4b2b      	ldr	r3, [pc, #172]	; (8002b68 <HAL_ADC_MspInit+0xd0>)
 8002aba:	699b      	ldr	r3, [r3, #24]
 8002abc:	4a2a      	ldr	r2, [pc, #168]	; (8002b68 <HAL_ADC_MspInit+0xd0>)
 8002abe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002ac2:	6193      	str	r3, [r2, #24]
 8002ac4:	4b28      	ldr	r3, [pc, #160]	; (8002b68 <HAL_ADC_MspInit+0xd0>)
 8002ac6:	699b      	ldr	r3, [r3, #24]
 8002ac8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002acc:	60fb      	str	r3, [r7, #12]
 8002ace:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ad0:	4b25      	ldr	r3, [pc, #148]	; (8002b68 <HAL_ADC_MspInit+0xd0>)
 8002ad2:	699b      	ldr	r3, [r3, #24]
 8002ad4:	4a24      	ldr	r2, [pc, #144]	; (8002b68 <HAL_ADC_MspInit+0xd0>)
 8002ad6:	f043 0304 	orr.w	r3, r3, #4
 8002ada:	6193      	str	r3, [r2, #24]
 8002adc:	4b22      	ldr	r3, [pc, #136]	; (8002b68 <HAL_ADC_MspInit+0xd0>)
 8002ade:	699b      	ldr	r3, [r3, #24]
 8002ae0:	f003 0304 	and.w	r3, r3, #4
 8002ae4:	60bb      	str	r3, [r7, #8]
 8002ae6:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8002ae8:	230f      	movs	r3, #15
 8002aea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002aec:	2303      	movs	r3, #3
 8002aee:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002af0:	f107 0310 	add.w	r3, r7, #16
 8002af4:	4619      	mov	r1, r3
 8002af6:	481d      	ldr	r0, [pc, #116]	; (8002b6c <HAL_ADC_MspInit+0xd4>)
 8002af8:	f001 fbbc 	bl	8004274 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002afc:	4b1c      	ldr	r3, [pc, #112]	; (8002b70 <HAL_ADC_MspInit+0xd8>)
 8002afe:	4a1d      	ldr	r2, [pc, #116]	; (8002b74 <HAL_ADC_MspInit+0xdc>)
 8002b00:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b02:	4b1b      	ldr	r3, [pc, #108]	; (8002b70 <HAL_ADC_MspInit+0xd8>)
 8002b04:	2200      	movs	r2, #0
 8002b06:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b08:	4b19      	ldr	r3, [pc, #100]	; (8002b70 <HAL_ADC_MspInit+0xd8>)
 8002b0a:	2200      	movs	r2, #0
 8002b0c:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002b0e:	4b18      	ldr	r3, [pc, #96]	; (8002b70 <HAL_ADC_MspInit+0xd8>)
 8002b10:	2280      	movs	r2, #128	; 0x80
 8002b12:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002b14:	4b16      	ldr	r3, [pc, #88]	; (8002b70 <HAL_ADC_MspInit+0xd8>)
 8002b16:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002b1a:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002b1c:	4b14      	ldr	r3, [pc, #80]	; (8002b70 <HAL_ADC_MspInit+0xd8>)
 8002b1e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b22:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002b24:	4b12      	ldr	r3, [pc, #72]	; (8002b70 <HAL_ADC_MspInit+0xd8>)
 8002b26:	2220      	movs	r2, #32
 8002b28:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002b2a:	4b11      	ldr	r3, [pc, #68]	; (8002b70 <HAL_ADC_MspInit+0xd8>)
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002b30:	480f      	ldr	r0, [pc, #60]	; (8002b70 <HAL_ADC_MspInit+0xd8>)
 8002b32:	f001 f8fd 	bl	8003d30 <HAL_DMA_Init>
 8002b36:	4603      	mov	r3, r0
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	d001      	beq.n	8002b40 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002b3c:	f7ff ff74 	bl	8002a28 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	4a0b      	ldr	r2, [pc, #44]	; (8002b70 <HAL_ADC_MspInit+0xd8>)
 8002b44:	621a      	str	r2, [r3, #32]
 8002b46:	4a0a      	ldr	r2, [pc, #40]	; (8002b70 <HAL_ADC_MspInit+0xd8>)
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	2100      	movs	r1, #0
 8002b50:	2012      	movs	r0, #18
 8002b52:	f001 f8b6 	bl	8003cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002b56:	2012      	movs	r0, #18
 8002b58:	f001 f8cf 	bl	8003cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002b5c:	bf00      	nop
 8002b5e:	3720      	adds	r7, #32
 8002b60:	46bd      	mov	sp, r7
 8002b62:	bd80      	pop	{r7, pc}
 8002b64:	40012400 	.word	0x40012400
 8002b68:	40021000 	.word	0x40021000
 8002b6c:	40010800 	.word	0x40010800
 8002b70:	20000b0c 	.word	0x20000b0c
 8002b74:	40020008 	.word	0x40020008

08002b78 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b085      	sub	sp, #20
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002b88:	d10b      	bne.n	8002ba2 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002b8a:	4b08      	ldr	r3, [pc, #32]	; (8002bac <HAL_TIM_Base_MspInit+0x34>)
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	4a07      	ldr	r2, [pc, #28]	; (8002bac <HAL_TIM_Base_MspInit+0x34>)
 8002b90:	f043 0301 	orr.w	r3, r3, #1
 8002b94:	61d3      	str	r3, [r2, #28]
 8002b96:	4b05      	ldr	r3, [pc, #20]	; (8002bac <HAL_TIM_Base_MspInit+0x34>)
 8002b98:	69db      	ldr	r3, [r3, #28]
 8002b9a:	f003 0301 	and.w	r3, r3, #1
 8002b9e:	60fb      	str	r3, [r7, #12]
 8002ba0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002ba2:	bf00      	nop
 8002ba4:	3714      	adds	r7, #20
 8002ba6:	46bd      	mov	sp, r7
 8002ba8:	bc80      	pop	{r7}
 8002baa:	4770      	bx	lr
 8002bac:	40021000 	.word	0x40021000

08002bb0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bb0:	b580      	push	{r7, lr}
 8002bb2:	b088      	sub	sp, #32
 8002bb4:	af00      	add	r7, sp, #0
 8002bb6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002bb8:	f107 0310 	add.w	r3, r7, #16
 8002bbc:	2200      	movs	r2, #0
 8002bbe:	601a      	str	r2, [r3, #0]
 8002bc0:	605a      	str	r2, [r3, #4]
 8002bc2:	609a      	str	r2, [r3, #8]
 8002bc4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	4a20      	ldr	r2, [pc, #128]	; (8002c4c <HAL_UART_MspInit+0x9c>)
 8002bcc:	4293      	cmp	r3, r2
 8002bce:	d139      	bne.n	8002c44 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002bd0:	4b1f      	ldr	r3, [pc, #124]	; (8002c50 <HAL_UART_MspInit+0xa0>)
 8002bd2:	699b      	ldr	r3, [r3, #24]
 8002bd4:	4a1e      	ldr	r2, [pc, #120]	; (8002c50 <HAL_UART_MspInit+0xa0>)
 8002bd6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002bda:	6193      	str	r3, [r2, #24]
 8002bdc:	4b1c      	ldr	r3, [pc, #112]	; (8002c50 <HAL_UART_MspInit+0xa0>)
 8002bde:	699b      	ldr	r3, [r3, #24]
 8002be0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002be8:	4b19      	ldr	r3, [pc, #100]	; (8002c50 <HAL_UART_MspInit+0xa0>)
 8002bea:	699b      	ldr	r3, [r3, #24]
 8002bec:	4a18      	ldr	r2, [pc, #96]	; (8002c50 <HAL_UART_MspInit+0xa0>)
 8002bee:	f043 0304 	orr.w	r3, r3, #4
 8002bf2:	6193      	str	r3, [r2, #24]
 8002bf4:	4b16      	ldr	r3, [pc, #88]	; (8002c50 <HAL_UART_MspInit+0xa0>)
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	f003 0304 	and.w	r3, r3, #4
 8002bfc:	60bb      	str	r3, [r7, #8]
 8002bfe:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002c00:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002c04:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c06:	2302      	movs	r3, #2
 8002c08:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c0e:	f107 0310 	add.w	r3, r7, #16
 8002c12:	4619      	mov	r1, r3
 8002c14:	480f      	ldr	r0, [pc, #60]	; (8002c54 <HAL_UART_MspInit+0xa4>)
 8002c16:	f001 fb2d 	bl	8004274 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002c1a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002c1e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002c20:	2300      	movs	r3, #0
 8002c22:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c24:	2300      	movs	r3, #0
 8002c26:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c28:	f107 0310 	add.w	r3, r7, #16
 8002c2c:	4619      	mov	r1, r3
 8002c2e:	4809      	ldr	r0, [pc, #36]	; (8002c54 <HAL_UART_MspInit+0xa4>)
 8002c30:	f001 fb20 	bl	8004274 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002c34:	2200      	movs	r2, #0
 8002c36:	2100      	movs	r1, #0
 8002c38:	2025      	movs	r0, #37	; 0x25
 8002c3a:	f001 f842 	bl	8003cc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002c3e:	2025      	movs	r0, #37	; 0x25
 8002c40:	f001 f85b 	bl	8003cfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002c44:	bf00      	nop
 8002c46:	3720      	adds	r7, #32
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	40013800 	.word	0x40013800
 8002c50:	40021000 	.word	0x40021000
 8002c54:	40010800 	.word	0x40010800

08002c58 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c58:	b480      	push	{r7}
 8002c5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c5c:	e7fe      	b.n	8002c5c <NMI_Handler+0x4>

08002c5e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c5e:	b480      	push	{r7}
 8002c60:	b083      	sub	sp, #12
 8002c62:	af00      	add	r7, sp, #0

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
  {
    /* USER CODE BEGIN W1_HardFault_IRQn 0 */
	  int a = 0;
 8002c64:	2300      	movs	r3, #0
 8002c66:	607b      	str	r3, [r7, #4]
  {
 8002c68:	e7fc      	b.n	8002c64 <HardFault_Handler+0x6>

08002c6a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c6a:	b480      	push	{r7}
 8002c6c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c6e:	e7fe      	b.n	8002c6e <MemManage_Handler+0x4>

08002c70 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c70:	b480      	push	{r7}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c74:	e7fe      	b.n	8002c74 <BusFault_Handler+0x4>

08002c76 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c76:	b480      	push	{r7}
 8002c78:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c7a:	e7fe      	b.n	8002c7a <UsageFault_Handler+0x4>

08002c7c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c7c:	b480      	push	{r7}
 8002c7e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c80:	bf00      	nop
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bc80      	pop	{r7}
 8002c86:	4770      	bx	lr

08002c88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c8c:	bf00      	nop
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bc80      	pop	{r7}
 8002c92:	4770      	bx	lr

08002c94 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c94:	b480      	push	{r7}
 8002c96:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c98:	bf00      	nop
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bc80      	pop	{r7}
 8002c9e:	4770      	bx	lr

08002ca0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ca4:	f000 f952 	bl	8002f4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ca8:	bf00      	nop
 8002caa:	bd80      	pop	{r7, pc}

08002cac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002cac:	b580      	push	{r7, lr}
 8002cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002cb0:	4802      	ldr	r0, [pc, #8]	; (8002cbc <DMA1_Channel1_IRQHandler+0x10>)
 8002cb2:	f001 f9ab 	bl	800400c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002cb6:	bf00      	nop
 8002cb8:	bd80      	pop	{r7, pc}
 8002cba:	bf00      	nop
 8002cbc:	20000b0c 	.word	0x20000b0c

08002cc0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002cc4:	4802      	ldr	r0, [pc, #8]	; (8002cd0 <ADC1_2_IRQHandler+0x10>)
 8002cc6:	f000 fc49 	bl	800355c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002cca:	bf00      	nop
 8002ccc:	bd80      	pop	{r7, pc}
 8002cce:	bf00      	nop
 8002cd0:	20000adc 	.word	0x20000adc

08002cd4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002cd4:	b580      	push	{r7, lr}
 8002cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002cd8:	4802      	ldr	r0, [pc, #8]	; (8002ce4 <USART1_IRQHandler+0x10>)
 8002cda:	f002 fcf5 	bl	80056c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002cde:	bf00      	nop
 8002ce0:	bd80      	pop	{r7, pc}
 8002ce2:	bf00      	nop
 8002ce4:	20000b98 	.word	0x20000b98

08002ce8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002ce8:	b480      	push	{r7}
 8002cea:	af00      	add	r7, sp, #0
	return 1;
 8002cec:	2301      	movs	r3, #1
}
 8002cee:	4618      	mov	r0, r3
 8002cf0:	46bd      	mov	sp, r7
 8002cf2:	bc80      	pop	{r7}
 8002cf4:	4770      	bx	lr

08002cf6 <_kill>:

int _kill(int pid, int sig)
{
 8002cf6:	b580      	push	{r7, lr}
 8002cf8:	b082      	sub	sp, #8
 8002cfa:	af00      	add	r7, sp, #0
 8002cfc:	6078      	str	r0, [r7, #4]
 8002cfe:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002d00:	f003 fa62 	bl	80061c8 <__errno>
 8002d04:	4603      	mov	r3, r0
 8002d06:	2216      	movs	r2, #22
 8002d08:	601a      	str	r2, [r3, #0]
	return -1;
 8002d0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3708      	adds	r7, #8
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <_exit>:

void _exit (int status)
{
 8002d16:	b580      	push	{r7, lr}
 8002d18:	b082      	sub	sp, #8
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002d1e:	f04f 31ff 	mov.w	r1, #4294967295
 8002d22:	6878      	ldr	r0, [r7, #4]
 8002d24:	f7ff ffe7 	bl	8002cf6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002d28:	e7fe      	b.n	8002d28 <_exit+0x12>

08002d2a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002d2a:	b580      	push	{r7, lr}
 8002d2c:	b086      	sub	sp, #24
 8002d2e:	af00      	add	r7, sp, #0
 8002d30:	60f8      	str	r0, [r7, #12]
 8002d32:	60b9      	str	r1, [r7, #8]
 8002d34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d36:	2300      	movs	r3, #0
 8002d38:	617b      	str	r3, [r7, #20]
 8002d3a:	e00a      	b.n	8002d52 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002d3c:	f3af 8000 	nop.w
 8002d40:	4601      	mov	r1, r0
 8002d42:	68bb      	ldr	r3, [r7, #8]
 8002d44:	1c5a      	adds	r2, r3, #1
 8002d46:	60ba      	str	r2, [r7, #8]
 8002d48:	b2ca      	uxtb	r2, r1
 8002d4a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d4c:	697b      	ldr	r3, [r7, #20]
 8002d4e:	3301      	adds	r3, #1
 8002d50:	617b      	str	r3, [r7, #20]
 8002d52:	697a      	ldr	r2, [r7, #20]
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	429a      	cmp	r2, r3
 8002d58:	dbf0      	blt.n	8002d3c <_read+0x12>
	}

return len;
 8002d5a:	687b      	ldr	r3, [r7, #4]
}
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	3718      	adds	r7, #24
 8002d60:	46bd      	mov	sp, r7
 8002d62:	bd80      	pop	{r7, pc}

08002d64 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002d64:	b580      	push	{r7, lr}
 8002d66:	b086      	sub	sp, #24
 8002d68:	af00      	add	r7, sp, #0
 8002d6a:	60f8      	str	r0, [r7, #12]
 8002d6c:	60b9      	str	r1, [r7, #8]
 8002d6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d70:	2300      	movs	r3, #0
 8002d72:	617b      	str	r3, [r7, #20]
 8002d74:	e009      	b.n	8002d8a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002d76:	68bb      	ldr	r3, [r7, #8]
 8002d78:	1c5a      	adds	r2, r3, #1
 8002d7a:	60ba      	str	r2, [r7, #8]
 8002d7c:	781b      	ldrb	r3, [r3, #0]
 8002d7e:	4618      	mov	r0, r3
 8002d80:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002d84:	697b      	ldr	r3, [r7, #20]
 8002d86:	3301      	adds	r3, #1
 8002d88:	617b      	str	r3, [r7, #20]
 8002d8a:	697a      	ldr	r2, [r7, #20]
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	429a      	cmp	r2, r3
 8002d90:	dbf1      	blt.n	8002d76 <_write+0x12>
	}
	return len;
 8002d92:	687b      	ldr	r3, [r7, #4]
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	3718      	adds	r7, #24
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	bd80      	pop	{r7, pc}

08002d9c <_close>:

int _close(int file)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	b083      	sub	sp, #12
 8002da0:	af00      	add	r7, sp, #0
 8002da2:	6078      	str	r0, [r7, #4]
	return -1;
 8002da4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	370c      	adds	r7, #12
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bc80      	pop	{r7}
 8002db0:	4770      	bx	lr

08002db2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002db2:	b480      	push	{r7}
 8002db4:	b083      	sub	sp, #12
 8002db6:	af00      	add	r7, sp, #0
 8002db8:	6078      	str	r0, [r7, #4]
 8002dba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002dbc:	683b      	ldr	r3, [r7, #0]
 8002dbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002dc2:	605a      	str	r2, [r3, #4]
	return 0;
 8002dc4:	2300      	movs	r3, #0
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	370c      	adds	r7, #12
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bc80      	pop	{r7}
 8002dce:	4770      	bx	lr

08002dd0 <_isatty>:

int _isatty(int file)
{
 8002dd0:	b480      	push	{r7}
 8002dd2:	b083      	sub	sp, #12
 8002dd4:	af00      	add	r7, sp, #0
 8002dd6:	6078      	str	r0, [r7, #4]
	return 1;
 8002dd8:	2301      	movs	r3, #1
}
 8002dda:	4618      	mov	r0, r3
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr

08002de4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002de4:	b480      	push	{r7}
 8002de6:	b085      	sub	sp, #20
 8002de8:	af00      	add	r7, sp, #0
 8002dea:	60f8      	str	r0, [r7, #12]
 8002dec:	60b9      	str	r1, [r7, #8]
 8002dee:	607a      	str	r2, [r7, #4]
	return 0;
 8002df0:	2300      	movs	r3, #0
}
 8002df2:	4618      	mov	r0, r3
 8002df4:	3714      	adds	r7, #20
 8002df6:	46bd      	mov	sp, r7
 8002df8:	bc80      	pop	{r7}
 8002dfa:	4770      	bx	lr

08002dfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b086      	sub	sp, #24
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e04:	4a14      	ldr	r2, [pc, #80]	; (8002e58 <_sbrk+0x5c>)
 8002e06:	4b15      	ldr	r3, [pc, #84]	; (8002e5c <_sbrk+0x60>)
 8002e08:	1ad3      	subs	r3, r2, r3
 8002e0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e0c:	697b      	ldr	r3, [r7, #20]
 8002e0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e10:	4b13      	ldr	r3, [pc, #76]	; (8002e60 <_sbrk+0x64>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d102      	bne.n	8002e1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e18:	4b11      	ldr	r3, [pc, #68]	; (8002e60 <_sbrk+0x64>)
 8002e1a:	4a12      	ldr	r2, [pc, #72]	; (8002e64 <_sbrk+0x68>)
 8002e1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e1e:	4b10      	ldr	r3, [pc, #64]	; (8002e60 <_sbrk+0x64>)
 8002e20:	681a      	ldr	r2, [r3, #0]
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4413      	add	r3, r2
 8002e26:	693a      	ldr	r2, [r7, #16]
 8002e28:	429a      	cmp	r2, r3
 8002e2a:	d207      	bcs.n	8002e3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002e2c:	f003 f9cc 	bl	80061c8 <__errno>
 8002e30:	4603      	mov	r3, r0
 8002e32:	220c      	movs	r2, #12
 8002e34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002e36:	f04f 33ff 	mov.w	r3, #4294967295
 8002e3a:	e009      	b.n	8002e50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002e3c:	4b08      	ldr	r3, [pc, #32]	; (8002e60 <_sbrk+0x64>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002e42:	4b07      	ldr	r3, [pc, #28]	; (8002e60 <_sbrk+0x64>)
 8002e44:	681a      	ldr	r2, [r3, #0]
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	4413      	add	r3, r2
 8002e4a:	4a05      	ldr	r2, [pc, #20]	; (8002e60 <_sbrk+0x64>)
 8002e4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	20005000 	.word	0x20005000
 8002e5c:	00000400 	.word	0x00000400
 8002e60:	20000c28 	.word	0x20000c28
 8002e64:	20000c40 	.word	0x20000c40

08002e68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002e6c:	bf00      	nop
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	bc80      	pop	{r7}
 8002e72:	4770      	bx	lr

08002e74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002e74:	f7ff fff8 	bl	8002e68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002e78:	480b      	ldr	r0, [pc, #44]	; (8002ea8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002e7a:	490c      	ldr	r1, [pc, #48]	; (8002eac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002e7c:	4a0c      	ldr	r2, [pc, #48]	; (8002eb0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002e7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002e80:	e002      	b.n	8002e88 <LoopCopyDataInit>

08002e82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002e82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002e84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002e86:	3304      	adds	r3, #4

08002e88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002e88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002e8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002e8c:	d3f9      	bcc.n	8002e82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002e8e:	4a09      	ldr	r2, [pc, #36]	; (8002eb4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002e90:	4c09      	ldr	r4, [pc, #36]	; (8002eb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002e92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002e94:	e001      	b.n	8002e9a <LoopFillZerobss>

08002e96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002e96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002e98:	3204      	adds	r2, #4

08002e9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002e9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002e9c:	d3fb      	bcc.n	8002e96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002e9e:	f003 f999 	bl	80061d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002ea2:	f7fe ffe1 	bl	8001e68 <main>
  bx lr
 8002ea6:	4770      	bx	lr
  ldr r0, =_sdata
 8002ea8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002eac:	20000274 	.word	0x20000274
  ldr r2, =_sidata
 8002eb0:	080079e8 	.word	0x080079e8
  ldr r2, =_sbss
 8002eb4:	20000274 	.word	0x20000274
  ldr r4, =_ebss
 8002eb8:	20000c40 	.word	0x20000c40

08002ebc <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ebc:	e7fe      	b.n	8002ebc <CAN1_RX1_IRQHandler>
	...

08002ec0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ec0:	b580      	push	{r7, lr}
 8002ec2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002ec4:	4b08      	ldr	r3, [pc, #32]	; (8002ee8 <HAL_Init+0x28>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a07      	ldr	r2, [pc, #28]	; (8002ee8 <HAL_Init+0x28>)
 8002eca:	f043 0310 	orr.w	r3, r3, #16
 8002ece:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ed0:	2003      	movs	r0, #3
 8002ed2:	f000 feeb 	bl	8003cac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ed6:	200f      	movs	r0, #15
 8002ed8:	f000 f808 	bl	8002eec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002edc:	f7ff fdaa 	bl	8002a34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	bd80      	pop	{r7, pc}
 8002ee6:	bf00      	nop
 8002ee8:	40022000 	.word	0x40022000

08002eec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	b082      	sub	sp, #8
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002ef4:	4b12      	ldr	r3, [pc, #72]	; (8002f40 <HAL_InitTick+0x54>)
 8002ef6:	681a      	ldr	r2, [r3, #0]
 8002ef8:	4b12      	ldr	r3, [pc, #72]	; (8002f44 <HAL_InitTick+0x58>)
 8002efa:	781b      	ldrb	r3, [r3, #0]
 8002efc:	4619      	mov	r1, r3
 8002efe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002f02:	fbb3 f3f1 	udiv	r3, r3, r1
 8002f06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	f000 ff03 	bl	8003d16 <HAL_SYSTICK_Config>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d001      	beq.n	8002f1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002f16:	2301      	movs	r3, #1
 8002f18:	e00e      	b.n	8002f38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	2b0f      	cmp	r3, #15
 8002f1e:	d80a      	bhi.n	8002f36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002f20:	2200      	movs	r2, #0
 8002f22:	6879      	ldr	r1, [r7, #4]
 8002f24:	f04f 30ff 	mov.w	r0, #4294967295
 8002f28:	f000 fecb 	bl	8003cc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002f2c:	4a06      	ldr	r2, [pc, #24]	; (8002f48 <HAL_InitTick+0x5c>)
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002f32:	2300      	movs	r3, #0
 8002f34:	e000      	b.n	8002f38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3708      	adds	r7, #8
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	20000204 	.word	0x20000204
 8002f44:	2000020c 	.word	0x2000020c
 8002f48:	20000208 	.word	0x20000208

08002f4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002f50:	4b05      	ldr	r3, [pc, #20]	; (8002f68 <HAL_IncTick+0x1c>)
 8002f52:	781b      	ldrb	r3, [r3, #0]
 8002f54:	461a      	mov	r2, r3
 8002f56:	4b05      	ldr	r3, [pc, #20]	; (8002f6c <HAL_IncTick+0x20>)
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	4413      	add	r3, r2
 8002f5c:	4a03      	ldr	r2, [pc, #12]	; (8002f6c <HAL_IncTick+0x20>)
 8002f5e:	6013      	str	r3, [r2, #0]
}
 8002f60:	bf00      	nop
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bc80      	pop	{r7}
 8002f66:	4770      	bx	lr
 8002f68:	2000020c 	.word	0x2000020c
 8002f6c:	20000c2c 	.word	0x20000c2c

08002f70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
  return uwTick;
 8002f74:	4b02      	ldr	r3, [pc, #8]	; (8002f80 <HAL_GetTick+0x10>)
 8002f76:	681b      	ldr	r3, [r3, #0]
}
 8002f78:	4618      	mov	r0, r3
 8002f7a:	46bd      	mov	sp, r7
 8002f7c:	bc80      	pop	{r7}
 8002f7e:	4770      	bx	lr
 8002f80:	20000c2c 	.word	0x20000c2c

08002f84 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f84:	b580      	push	{r7, lr}
 8002f86:	b086      	sub	sp, #24
 8002f88:	af00      	add	r7, sp, #0
 8002f8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002f90:	2300      	movs	r3, #0
 8002f92:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002f94:	2300      	movs	r3, #0
 8002f96:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	2b00      	cmp	r3, #0
 8002fa0:	d101      	bne.n	8002fa6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e0be      	b.n	8003124 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d109      	bne.n	8002fc8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	2200      	movs	r2, #0
 8002fbe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002fc2:	6878      	ldr	r0, [r7, #4]
 8002fc4:	f7ff fd68 	bl	8002a98 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002fc8:	6878      	ldr	r0, [r7, #4]
 8002fca:	f000 fcf3 	bl	80039b4 <ADC_ConversionStop_Disable>
 8002fce:	4603      	mov	r3, r0
 8002fd0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fd6:	f003 0310 	and.w	r3, r3, #16
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	f040 8099 	bne.w	8003112 <HAL_ADC_Init+0x18e>
 8002fe0:	7dfb      	ldrb	r3, [r7, #23]
 8002fe2:	2b00      	cmp	r3, #0
 8002fe4:	f040 8095 	bne.w	8003112 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ff0:	f023 0302 	bic.w	r3, r3, #2
 8002ff4:	f043 0202 	orr.w	r2, r3, #2
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8003004:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	7b1b      	ldrb	r3, [r3, #12]
 800300a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 800300c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 800300e:	68ba      	ldr	r2, [r7, #8]
 8003010:	4313      	orrs	r3, r2
 8003012:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800301c:	d003      	beq.n	8003026 <HAL_ADC_Init+0xa2>
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	689b      	ldr	r3, [r3, #8]
 8003022:	2b01      	cmp	r3, #1
 8003024:	d102      	bne.n	800302c <HAL_ADC_Init+0xa8>
 8003026:	f44f 7380 	mov.w	r3, #256	; 0x100
 800302a:	e000      	b.n	800302e <HAL_ADC_Init+0xaa>
 800302c:	2300      	movs	r3, #0
 800302e:	693a      	ldr	r2, [r7, #16]
 8003030:	4313      	orrs	r3, r2
 8003032:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	7d1b      	ldrb	r3, [r3, #20]
 8003038:	2b01      	cmp	r3, #1
 800303a:	d119      	bne.n	8003070 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	7b1b      	ldrb	r3, [r3, #12]
 8003040:	2b00      	cmp	r3, #0
 8003042:	d109      	bne.n	8003058 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	699b      	ldr	r3, [r3, #24]
 8003048:	3b01      	subs	r3, #1
 800304a:	035a      	lsls	r2, r3, #13
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	4313      	orrs	r3, r2
 8003050:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003054:	613b      	str	r3, [r7, #16]
 8003056:	e00b      	b.n	8003070 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800305c:	f043 0220 	orr.w	r2, r3, #32
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003068:	f043 0201 	orr.w	r2, r3, #1
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	685b      	ldr	r3, [r3, #4]
 8003076:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	693a      	ldr	r2, [r7, #16]
 8003080:	430a      	orrs	r2, r1
 8003082:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	681b      	ldr	r3, [r3, #0]
 8003088:	689a      	ldr	r2, [r3, #8]
 800308a:	4b28      	ldr	r3, [pc, #160]	; (800312c <HAL_ADC_Init+0x1a8>)
 800308c:	4013      	ands	r3, r2
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	6812      	ldr	r2, [r2, #0]
 8003092:	68b9      	ldr	r1, [r7, #8]
 8003094:	430b      	orrs	r3, r1
 8003096:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	689b      	ldr	r3, [r3, #8]
 800309c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80030a0:	d003      	beq.n	80030aa <HAL_ADC_Init+0x126>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	689b      	ldr	r3, [r3, #8]
 80030a6:	2b01      	cmp	r3, #1
 80030a8:	d104      	bne.n	80030b4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	691b      	ldr	r3, [r3, #16]
 80030ae:	3b01      	subs	r3, #1
 80030b0:	051b      	lsls	r3, r3, #20
 80030b2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030ba:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	430a      	orrs	r2, r1
 80030c6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	689a      	ldr	r2, [r3, #8]
 80030ce:	4b18      	ldr	r3, [pc, #96]	; (8003130 <HAL_ADC_Init+0x1ac>)
 80030d0:	4013      	ands	r3, r2
 80030d2:	68ba      	ldr	r2, [r7, #8]
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d10b      	bne.n	80030f0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	2200      	movs	r2, #0
 80030dc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e2:	f023 0303 	bic.w	r3, r3, #3
 80030e6:	f043 0201 	orr.w	r2, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 80030ee:	e018      	b.n	8003122 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030f4:	f023 0312 	bic.w	r3, r3, #18
 80030f8:	f043 0210 	orr.w	r2, r3, #16
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003104:	f043 0201 	orr.w	r2, r3, #1
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800310c:	2301      	movs	r3, #1
 800310e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003110:	e007      	b.n	8003122 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003116:	f043 0210 	orr.w	r2, r3, #16
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800311e:	2301      	movs	r3, #1
 8003120:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003122:	7dfb      	ldrb	r3, [r7, #23]
}
 8003124:	4618      	mov	r0, r3
 8003126:	3718      	adds	r7, #24
 8003128:	46bd      	mov	sp, r7
 800312a:	bd80      	pop	{r7, pc}
 800312c:	ffe1f7fd 	.word	0xffe1f7fd
 8003130:	ff1f0efe 	.word	0xff1f0efe

08003134 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b084      	sub	sp, #16
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800313c:	2300      	movs	r3, #0
 800313e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003146:	2b01      	cmp	r3, #1
 8003148:	d101      	bne.n	800314e <HAL_ADC_Start_IT+0x1a>
 800314a:	2302      	movs	r3, #2
 800314c:	e0a0      	b.n	8003290 <HAL_ADC_Start_IT+0x15c>
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	2201      	movs	r2, #1
 8003152:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003156:	6878      	ldr	r0, [r7, #4]
 8003158:	f000 fbd2 	bl	8003900 <ADC_Enable>
 800315c:	4603      	mov	r3, r0
 800315e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003160:	7bfb      	ldrb	r3, [r7, #15]
 8003162:	2b00      	cmp	r3, #0
 8003164:	f040 808f 	bne.w	8003286 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800316c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003170:	f023 0301 	bic.w	r3, r3, #1
 8003174:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a45      	ldr	r2, [pc, #276]	; (8003298 <HAL_ADC_Start_IT+0x164>)
 8003182:	4293      	cmp	r3, r2
 8003184:	d105      	bne.n	8003192 <HAL_ADC_Start_IT+0x5e>
 8003186:	4b45      	ldr	r3, [pc, #276]	; (800329c <HAL_ADC_Start_IT+0x168>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d115      	bne.n	80031be <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003196:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031a8:	2b00      	cmp	r3, #0
 80031aa:	d026      	beq.n	80031fa <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80031bc:	e01d      	b.n	80031fa <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a33      	ldr	r2, [pc, #204]	; (800329c <HAL_ADC_Start_IT+0x168>)
 80031d0:	4293      	cmp	r3, r2
 80031d2:	d004      	beq.n	80031de <HAL_ADC_Start_IT+0xaa>
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a2f      	ldr	r2, [pc, #188]	; (8003298 <HAL_ADC_Start_IT+0x164>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d10d      	bne.n	80031fa <HAL_ADC_Start_IT+0xc6>
 80031de:	4b2f      	ldr	r3, [pc, #188]	; (800329c <HAL_ADC_Start_IT+0x168>)
 80031e0:	685b      	ldr	r3, [r3, #4]
 80031e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031e6:	2b00      	cmp	r3, #0
 80031e8:	d007      	beq.n	80031fa <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80031f2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d006      	beq.n	8003214 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800320a:	f023 0206 	bic.w	r2, r3, #6
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	62da      	str	r2, [r3, #44]	; 0x2c
 8003212:	e002      	b.n	800321a <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2200      	movs	r2, #0
 8003218:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f06f 0202 	mvn.w	r2, #2
 800322a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	681b      	ldr	r3, [r3, #0]
 8003230:	685a      	ldr	r2, [r3, #4]
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	f042 0220 	orr.w	r2, r2, #32
 800323a:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003246:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800324a:	d113      	bne.n	8003274 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003250:	4a11      	ldr	r2, [pc, #68]	; (8003298 <HAL_ADC_Start_IT+0x164>)
 8003252:	4293      	cmp	r3, r2
 8003254:	d105      	bne.n	8003262 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003256:	4b11      	ldr	r3, [pc, #68]	; (800329c <HAL_ADC_Start_IT+0x168>)
 8003258:	685b      	ldr	r3, [r3, #4]
 800325a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800325e:	2b00      	cmp	r3, #0
 8003260:	d108      	bne.n	8003274 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	689a      	ldr	r2, [r3, #8]
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	681b      	ldr	r3, [r3, #0]
 800326c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003270:	609a      	str	r2, [r3, #8]
 8003272:	e00c      	b.n	800328e <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	681b      	ldr	r3, [r3, #0]
 8003278:	689a      	ldr	r2, [r3, #8]
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003282:	609a      	str	r2, [r3, #8]
 8003284:	e003      	b.n	800328e <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800328e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003290:	4618      	mov	r0, r3
 8003292:	3710      	adds	r7, #16
 8003294:	46bd      	mov	sp, r7
 8003296:	bd80      	pop	{r7, pc}
 8003298:	40012800 	.word	0x40012800
 800329c:	40012400 	.word	0x40012400

080032a0 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc: ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b084      	sub	sp, #16
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80032a8:	2300      	movs	r3, #0
 80032aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80032b2:	2b01      	cmp	r3, #1
 80032b4:	d101      	bne.n	80032ba <HAL_ADC_Stop_IT+0x1a>
 80032b6:	2302      	movs	r3, #2
 80032b8:	e022      	b.n	8003300 <HAL_ADC_Stop_IT+0x60>
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	2201      	movs	r2, #1
 80032be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80032c2:	6878      	ldr	r0, [r7, #4]
 80032c4:	f000 fb76 	bl	80039b4 <ADC_ConversionStop_Disable>
 80032c8:	4603      	mov	r3, r0
 80032ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80032cc:	7bfb      	ldrb	r3, [r7, #15]
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d111      	bne.n	80032f6 <HAL_ADC_Stop_IT+0x56>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	685a      	ldr	r2, [r3, #4]
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	f022 0220 	bic.w	r2, r2, #32
 80032e0:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80032ea:	f023 0301 	bic.w	r3, r3, #1
 80032ee:	f043 0201 	orr.w	r2, r3, #1
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80032fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003300:	4618      	mov	r0, r3
 8003302:	3710      	adds	r7, #16
 8003304:	46bd      	mov	sp, r7
 8003306:	bd80      	pop	{r7, pc}

08003308 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003308:	b580      	push	{r7, lr}
 800330a:	b086      	sub	sp, #24
 800330c:	af00      	add	r7, sp, #0
 800330e:	60f8      	str	r0, [r7, #12]
 8003310:	60b9      	str	r1, [r7, #8]
 8003312:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003314:	2300      	movs	r3, #0
 8003316:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	4a64      	ldr	r2, [pc, #400]	; (80034b0 <HAL_ADC_Start_DMA+0x1a8>)
 800331e:	4293      	cmp	r3, r2
 8003320:	d004      	beq.n	800332c <HAL_ADC_Start_DMA+0x24>
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	4a63      	ldr	r2, [pc, #396]	; (80034b4 <HAL_ADC_Start_DMA+0x1ac>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d106      	bne.n	800333a <HAL_ADC_Start_DMA+0x32>
 800332c:	4b60      	ldr	r3, [pc, #384]	; (80034b0 <HAL_ADC_Start_DMA+0x1a8>)
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003334:	2b00      	cmp	r3, #0
 8003336:	f040 80b3 	bne.w	80034a0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003340:	2b01      	cmp	r3, #1
 8003342:	d101      	bne.n	8003348 <HAL_ADC_Start_DMA+0x40>
 8003344:	2302      	movs	r3, #2
 8003346:	e0ae      	b.n	80034a6 <HAL_ADC_Start_DMA+0x19e>
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	2201      	movs	r2, #1
 800334c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003350:	68f8      	ldr	r0, [r7, #12]
 8003352:	f000 fad5 	bl	8003900 <ADC_Enable>
 8003356:	4603      	mov	r3, r0
 8003358:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800335a:	7dfb      	ldrb	r3, [r7, #23]
 800335c:	2b00      	cmp	r3, #0
 800335e:	f040 809a 	bne.w	8003496 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003366:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800336a:	f023 0301 	bic.w	r3, r3, #1
 800336e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4a4e      	ldr	r2, [pc, #312]	; (80034b4 <HAL_ADC_Start_DMA+0x1ac>)
 800337c:	4293      	cmp	r3, r2
 800337e:	d105      	bne.n	800338c <HAL_ADC_Start_DMA+0x84>
 8003380:	4b4b      	ldr	r3, [pc, #300]	; (80034b0 <HAL_ADC_Start_DMA+0x1a8>)
 8003382:	685b      	ldr	r3, [r3, #4]
 8003384:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003388:	2b00      	cmp	r3, #0
 800338a:	d115      	bne.n	80033b8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003390:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d026      	beq.n	80033f4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80033ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80033b6:	e01d      	b.n	80033f4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033bc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	4a39      	ldr	r2, [pc, #228]	; (80034b0 <HAL_ADC_Start_DMA+0x1a8>)
 80033ca:	4293      	cmp	r3, r2
 80033cc:	d004      	beq.n	80033d8 <HAL_ADC_Start_DMA+0xd0>
 80033ce:	68fb      	ldr	r3, [r7, #12]
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a38      	ldr	r2, [pc, #224]	; (80034b4 <HAL_ADC_Start_DMA+0x1ac>)
 80033d4:	4293      	cmp	r3, r2
 80033d6:	d10d      	bne.n	80033f4 <HAL_ADC_Start_DMA+0xec>
 80033d8:	4b35      	ldr	r3, [pc, #212]	; (80034b0 <HAL_ADC_Start_DMA+0x1a8>)
 80033da:	685b      	ldr	r3, [r3, #4]
 80033dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d007      	beq.n	80033f4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80033ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	d006      	beq.n	800340e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003404:	f023 0206 	bic.w	r2, r3, #6
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	62da      	str	r2, [r3, #44]	; 0x2c
 800340c:	e002      	b.n	8003414 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	2200      	movs	r2, #0
 8003412:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	2200      	movs	r2, #0
 8003418:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6a1b      	ldr	r3, [r3, #32]
 8003420:	4a25      	ldr	r2, [pc, #148]	; (80034b8 <HAL_ADC_Start_DMA+0x1b0>)
 8003422:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	6a1b      	ldr	r3, [r3, #32]
 8003428:	4a24      	ldr	r2, [pc, #144]	; (80034bc <HAL_ADC_Start_DMA+0x1b4>)
 800342a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6a1b      	ldr	r3, [r3, #32]
 8003430:	4a23      	ldr	r2, [pc, #140]	; (80034c0 <HAL_ADC_Start_DMA+0x1b8>)
 8003432:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f06f 0202 	mvn.w	r2, #2
 800343c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	689a      	ldr	r2, [r3, #8]
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800344c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800344e:	68fb      	ldr	r3, [r7, #12]
 8003450:	6a18      	ldr	r0, [r3, #32]
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	334c      	adds	r3, #76	; 0x4c
 8003458:	4619      	mov	r1, r3
 800345a:	68ba      	ldr	r2, [r7, #8]
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	f000 fcc1 	bl	8003de4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800346c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003470:	d108      	bne.n	8003484 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	689a      	ldr	r2, [r3, #8]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003480:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003482:	e00f      	b.n	80034a4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	689a      	ldr	r2, [r3, #8]
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003492:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003494:	e006      	b.n	80034a4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	2200      	movs	r2, #0
 800349a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800349e:	e001      	b.n	80034a4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80034a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	3718      	adds	r7, #24
 80034aa:	46bd      	mov	sp, r7
 80034ac:	bd80      	pop	{r7, pc}
 80034ae:	bf00      	nop
 80034b0:	40012400 	.word	0x40012400
 80034b4:	40012800 	.word	0x40012800
 80034b8:	08003a37 	.word	0x08003a37
 80034bc:	08003ab3 	.word	0x08003ab3
 80034c0:	08003acf 	.word	0x08003acf

080034c4 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b084      	sub	sp, #16
 80034c8:	af00      	add	r7, sp, #0
 80034ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80034cc:	2300      	movs	r3, #0
 80034ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80034d6:	2b01      	cmp	r3, #1
 80034d8:	d101      	bne.n	80034de <HAL_ADC_Stop_DMA+0x1a>
 80034da:	2302      	movs	r3, #2
 80034dc:	e03a      	b.n	8003554 <HAL_ADC_Stop_DMA+0x90>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2201      	movs	r2, #1
 80034e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80034e6:	6878      	ldr	r0, [r7, #4]
 80034e8:	f000 fa64 	bl	80039b4 <ADC_ConversionStop_Disable>
 80034ec:	4603      	mov	r3, r0
 80034ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80034f0:	7bfb      	ldrb	r3, [r7, #15]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d129      	bne.n	800354a <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	689a      	ldr	r2, [r3, #8]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003504:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a1b      	ldr	r3, [r3, #32]
 800350a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800350e:	b2db      	uxtb	r3, r3
 8003510:	2b02      	cmp	r3, #2
 8003512:	d11a      	bne.n	800354a <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	4618      	mov	r0, r3
 800351a:	f000 fcc3 	bl	8003ea4 <HAL_DMA_Abort>
 800351e:	4603      	mov	r3, r0
 8003520:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8003522:	7bfb      	ldrb	r3, [r7, #15]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d10a      	bne.n	800353e <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003530:	f023 0301 	bic.w	r3, r3, #1
 8003534:	f043 0201 	orr.w	r2, r3, #1
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	629a      	str	r2, [r3, #40]	; 0x28
 800353c:	e005      	b.n	800354a <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003542:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2200      	movs	r2, #0
 800354e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8003552:	7bfb      	ldrb	r3, [r7, #15]
}
 8003554:	4618      	mov	r0, r3
 8003556:	3710      	adds	r7, #16
 8003558:	46bd      	mov	sp, r7
 800355a:	bd80      	pop	{r7, pc}

0800355c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b084      	sub	sp, #16
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	685b      	ldr	r3, [r3, #4]
 8003572:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8003574:	68bb      	ldr	r3, [r7, #8]
 8003576:	f003 0320 	and.w	r3, r3, #32
 800357a:	2b00      	cmp	r3, #0
 800357c:	d03e      	beq.n	80035fc <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	f003 0302 	and.w	r3, r3, #2
 8003584:	2b00      	cmp	r3, #0
 8003586:	d039      	beq.n	80035fc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358c:	f003 0310 	and.w	r3, r3, #16
 8003590:	2b00      	cmp	r3, #0
 8003592:	d105      	bne.n	80035a0 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003598:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80035aa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80035ae:	d11d      	bne.n	80035ec <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d119      	bne.n	80035ec <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	685a      	ldr	r2, [r3, #4]
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f022 0220 	bic.w	r2, r2, #32
 80035c6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d105      	bne.n	80035ec <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035e4:	f043 0201 	orr.w	r2, r3, #1
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80035ec:	6878      	ldr	r0, [r7, #4]
 80035ee:	f7ff f9a1 	bl	8002934 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f06f 0212 	mvn.w	r2, #18
 80035fa:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80035fc:	68bb      	ldr	r3, [r7, #8]
 80035fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003602:	2b00      	cmp	r3, #0
 8003604:	d04d      	beq.n	80036a2 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	f003 0304 	and.w	r3, r3, #4
 800360c:	2b00      	cmp	r3, #0
 800360e:	d048      	beq.n	80036a2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003614:	f003 0310 	and.w	r3, r3, #16
 8003618:	2b00      	cmp	r3, #0
 800361a:	d105      	bne.n	8003628 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003620:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	689b      	ldr	r3, [r3, #8]
 800362e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003632:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8003636:	d012      	beq.n	800365e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003642:	2b00      	cmp	r3, #0
 8003644:	d125      	bne.n	8003692 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	689b      	ldr	r3, [r3, #8]
 800364c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003650:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003654:	d11d      	bne.n	8003692 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800365a:	2b00      	cmp	r3, #0
 800365c:	d119      	bne.n	8003692 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	681b      	ldr	r3, [r3, #0]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800366c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003672:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003682:	2b00      	cmp	r3, #0
 8003684:	d105      	bne.n	8003692 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800368a:	f043 0201 	orr.w	r2, r3, #1
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003692:	6878      	ldr	r0, [r7, #4]
 8003694:	f000 fa35 	bl	8003b02 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f06f 020c 	mvn.w	r2, #12
 80036a0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d012      	beq.n	80036d2 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f003 0301 	and.w	r3, r3, #1
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d00d      	beq.n	80036d2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80036c2:	6878      	ldr	r0, [r7, #4]
 80036c4:	f000 f812 	bl	80036ec <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f06f 0201 	mvn.w	r2, #1
 80036d0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80036d2:	bf00      	nop
 80036d4:	3710      	adds	r7, #16
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bd80      	pop	{r7, pc}

080036da <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80036da:	b480      	push	{r7}
 80036dc:	b083      	sub	sp, #12
 80036de:	af00      	add	r7, sp, #0
 80036e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80036e2:	bf00      	nop
 80036e4:	370c      	adds	r7, #12
 80036e6:	46bd      	mov	sp, r7
 80036e8:	bc80      	pop	{r7}
 80036ea:	4770      	bx	lr

080036ec <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80036ec:	b480      	push	{r7}
 80036ee:	b083      	sub	sp, #12
 80036f0:	af00      	add	r7, sp, #0
 80036f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80036f4:	bf00      	nop
 80036f6:	370c      	adds	r7, #12
 80036f8:	46bd      	mov	sp, r7
 80036fa:	bc80      	pop	{r7}
 80036fc:	4770      	bx	lr

080036fe <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80036fe:	b480      	push	{r7}
 8003700:	b083      	sub	sp, #12
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003706:	bf00      	nop
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	bc80      	pop	{r7}
 800370e:	4770      	bx	lr

08003710 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003710:	b480      	push	{r7}
 8003712:	b085      	sub	sp, #20
 8003714:	af00      	add	r7, sp, #0
 8003716:	6078      	str	r0, [r7, #4]
 8003718:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800371a:	2300      	movs	r3, #0
 800371c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800371e:	2300      	movs	r3, #0
 8003720:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <HAL_ADC_ConfigChannel+0x20>
 800372c:	2302      	movs	r3, #2
 800372e:	e0dc      	b.n	80038ea <HAL_ADC_ConfigChannel+0x1da>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003738:	683b      	ldr	r3, [r7, #0]
 800373a:	685b      	ldr	r3, [r3, #4]
 800373c:	2b06      	cmp	r3, #6
 800373e:	d81c      	bhi.n	800377a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	685a      	ldr	r2, [r3, #4]
 800374a:	4613      	mov	r3, r2
 800374c:	009b      	lsls	r3, r3, #2
 800374e:	4413      	add	r3, r2
 8003750:	3b05      	subs	r3, #5
 8003752:	221f      	movs	r2, #31
 8003754:	fa02 f303 	lsl.w	r3, r2, r3
 8003758:	43db      	mvns	r3, r3
 800375a:	4019      	ands	r1, r3
 800375c:	683b      	ldr	r3, [r7, #0]
 800375e:	6818      	ldr	r0, [r3, #0]
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	685a      	ldr	r2, [r3, #4]
 8003764:	4613      	mov	r3, r2
 8003766:	009b      	lsls	r3, r3, #2
 8003768:	4413      	add	r3, r2
 800376a:	3b05      	subs	r3, #5
 800376c:	fa00 f203 	lsl.w	r2, r0, r3
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	430a      	orrs	r2, r1
 8003776:	635a      	str	r2, [r3, #52]	; 0x34
 8003778:	e03c      	b.n	80037f4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800377a:	683b      	ldr	r3, [r7, #0]
 800377c:	685b      	ldr	r3, [r3, #4]
 800377e:	2b0c      	cmp	r3, #12
 8003780:	d81c      	bhi.n	80037bc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	685a      	ldr	r2, [r3, #4]
 800378c:	4613      	mov	r3, r2
 800378e:	009b      	lsls	r3, r3, #2
 8003790:	4413      	add	r3, r2
 8003792:	3b23      	subs	r3, #35	; 0x23
 8003794:	221f      	movs	r2, #31
 8003796:	fa02 f303 	lsl.w	r3, r2, r3
 800379a:	43db      	mvns	r3, r3
 800379c:	4019      	ands	r1, r3
 800379e:	683b      	ldr	r3, [r7, #0]
 80037a0:	6818      	ldr	r0, [r3, #0]
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	685a      	ldr	r2, [r3, #4]
 80037a6:	4613      	mov	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	4413      	add	r3, r2
 80037ac:	3b23      	subs	r3, #35	; 0x23
 80037ae:	fa00 f203 	lsl.w	r2, r0, r3
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	430a      	orrs	r2, r1
 80037b8:	631a      	str	r2, [r3, #48]	; 0x30
 80037ba:	e01b      	b.n	80037f4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	685a      	ldr	r2, [r3, #4]
 80037c6:	4613      	mov	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	4413      	add	r3, r2
 80037cc:	3b41      	subs	r3, #65	; 0x41
 80037ce:	221f      	movs	r2, #31
 80037d0:	fa02 f303 	lsl.w	r3, r2, r3
 80037d4:	43db      	mvns	r3, r3
 80037d6:	4019      	ands	r1, r3
 80037d8:	683b      	ldr	r3, [r7, #0]
 80037da:	6818      	ldr	r0, [r3, #0]
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	685a      	ldr	r2, [r3, #4]
 80037e0:	4613      	mov	r3, r2
 80037e2:	009b      	lsls	r3, r3, #2
 80037e4:	4413      	add	r3, r2
 80037e6:	3b41      	subs	r3, #65	; 0x41
 80037e8:	fa00 f203 	lsl.w	r2, r0, r3
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	2b09      	cmp	r3, #9
 80037fa:	d91c      	bls.n	8003836 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	68d9      	ldr	r1, [r3, #12]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	4613      	mov	r3, r2
 8003808:	005b      	lsls	r3, r3, #1
 800380a:	4413      	add	r3, r2
 800380c:	3b1e      	subs	r3, #30
 800380e:	2207      	movs	r2, #7
 8003810:	fa02 f303 	lsl.w	r3, r2, r3
 8003814:	43db      	mvns	r3, r3
 8003816:	4019      	ands	r1, r3
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	6898      	ldr	r0, [r3, #8]
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	681a      	ldr	r2, [r3, #0]
 8003820:	4613      	mov	r3, r2
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	4413      	add	r3, r2
 8003826:	3b1e      	subs	r3, #30
 8003828:	fa00 f203 	lsl.w	r2, r0, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	430a      	orrs	r2, r1
 8003832:	60da      	str	r2, [r3, #12]
 8003834:	e019      	b.n	800386a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	6919      	ldr	r1, [r3, #16]
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	681a      	ldr	r2, [r3, #0]
 8003840:	4613      	mov	r3, r2
 8003842:	005b      	lsls	r3, r3, #1
 8003844:	4413      	add	r3, r2
 8003846:	2207      	movs	r2, #7
 8003848:	fa02 f303 	lsl.w	r3, r2, r3
 800384c:	43db      	mvns	r3, r3
 800384e:	4019      	ands	r1, r3
 8003850:	683b      	ldr	r3, [r7, #0]
 8003852:	6898      	ldr	r0, [r3, #8]
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681a      	ldr	r2, [r3, #0]
 8003858:	4613      	mov	r3, r2
 800385a:	005b      	lsls	r3, r3, #1
 800385c:	4413      	add	r3, r2
 800385e:	fa00 f203 	lsl.w	r2, r0, r3
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	430a      	orrs	r2, r1
 8003868:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800386a:	683b      	ldr	r3, [r7, #0]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	2b10      	cmp	r3, #16
 8003870:	d003      	beq.n	800387a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003876:	2b11      	cmp	r3, #17
 8003878:	d132      	bne.n	80038e0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	4a1d      	ldr	r2, [pc, #116]	; (80038f4 <HAL_ADC_ConfigChannel+0x1e4>)
 8003880:	4293      	cmp	r3, r2
 8003882:	d125      	bne.n	80038d0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	689b      	ldr	r3, [r3, #8]
 800388a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d126      	bne.n	80038e0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689a      	ldr	r2, [r3, #8]
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80038a0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80038a2:	683b      	ldr	r3, [r7, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2b10      	cmp	r3, #16
 80038a8:	d11a      	bne.n	80038e0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80038aa:	4b13      	ldr	r3, [pc, #76]	; (80038f8 <HAL_ADC_ConfigChannel+0x1e8>)
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	4a13      	ldr	r2, [pc, #76]	; (80038fc <HAL_ADC_ConfigChannel+0x1ec>)
 80038b0:	fba2 2303 	umull	r2, r3, r2, r3
 80038b4:	0c9a      	lsrs	r2, r3, #18
 80038b6:	4613      	mov	r3, r2
 80038b8:	009b      	lsls	r3, r3, #2
 80038ba:	4413      	add	r3, r2
 80038bc:	005b      	lsls	r3, r3, #1
 80038be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80038c0:	e002      	b.n	80038c8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	3b01      	subs	r3, #1
 80038c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80038c8:	68bb      	ldr	r3, [r7, #8]
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f9      	bne.n	80038c2 <HAL_ADC_ConfigChannel+0x1b2>
 80038ce:	e007      	b.n	80038e0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038d4:	f043 0220 	orr.w	r2, r3, #32
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	2200      	movs	r2, #0
 80038e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80038e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3714      	adds	r7, #20
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bc80      	pop	{r7}
 80038f2:	4770      	bx	lr
 80038f4:	40012400 	.word	0x40012400
 80038f8:	20000204 	.word	0x20000204
 80038fc:	431bde83 	.word	0x431bde83

08003900 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003900:	b580      	push	{r7, lr}
 8003902:	b084      	sub	sp, #16
 8003904:	af00      	add	r7, sp, #0
 8003906:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003908:	2300      	movs	r3, #0
 800390a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800390c:	2300      	movs	r3, #0
 800390e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	f003 0301 	and.w	r3, r3, #1
 800391a:	2b01      	cmp	r3, #1
 800391c:	d040      	beq.n	80039a0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689a      	ldr	r2, [r3, #8]
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f042 0201 	orr.w	r2, r2, #1
 800392c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800392e:	4b1f      	ldr	r3, [pc, #124]	; (80039ac <ADC_Enable+0xac>)
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	4a1f      	ldr	r2, [pc, #124]	; (80039b0 <ADC_Enable+0xb0>)
 8003934:	fba2 2303 	umull	r2, r3, r2, r3
 8003938:	0c9b      	lsrs	r3, r3, #18
 800393a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800393c:	e002      	b.n	8003944 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800393e:	68bb      	ldr	r3, [r7, #8]
 8003940:	3b01      	subs	r3, #1
 8003942:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003944:	68bb      	ldr	r3, [r7, #8]
 8003946:	2b00      	cmp	r3, #0
 8003948:	d1f9      	bne.n	800393e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800394a:	f7ff fb11 	bl	8002f70 <HAL_GetTick>
 800394e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003950:	e01f      	b.n	8003992 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003952:	f7ff fb0d 	bl	8002f70 <HAL_GetTick>
 8003956:	4602      	mov	r2, r0
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	1ad3      	subs	r3, r2, r3
 800395c:	2b02      	cmp	r3, #2
 800395e:	d918      	bls.n	8003992 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b01      	cmp	r3, #1
 800396c:	d011      	beq.n	8003992 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003972:	f043 0210 	orr.w	r2, r3, #16
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800397e:	f043 0201 	orr.w	r2, r3, #1
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	2200      	movs	r2, #0
 800398a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e007      	b.n	80039a2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	689b      	ldr	r3, [r3, #8]
 8003998:	f003 0301 	and.w	r3, r3, #1
 800399c:	2b01      	cmp	r3, #1
 800399e:	d1d8      	bne.n	8003952 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80039a0:	2300      	movs	r3, #0
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3710      	adds	r7, #16
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
 80039aa:	bf00      	nop
 80039ac:	20000204 	.word	0x20000204
 80039b0:	431bde83 	.word	0x431bde83

080039b4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80039b4:	b580      	push	{r7, lr}
 80039b6:	b084      	sub	sp, #16
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80039bc:	2300      	movs	r3, #0
 80039be:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	689b      	ldr	r3, [r3, #8]
 80039c6:	f003 0301 	and.w	r3, r3, #1
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	d12e      	bne.n	8003a2c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	689a      	ldr	r2, [r3, #8]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 0201 	bic.w	r2, r2, #1
 80039dc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80039de:	f7ff fac7 	bl	8002f70 <HAL_GetTick>
 80039e2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80039e4:	e01b      	b.n	8003a1e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80039e6:	f7ff fac3 	bl	8002f70 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d914      	bls.n	8003a1e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	689b      	ldr	r3, [r3, #8]
 80039fa:	f003 0301 	and.w	r3, r3, #1
 80039fe:	2b01      	cmp	r3, #1
 8003a00:	d10d      	bne.n	8003a1e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a06:	f043 0210 	orr.w	r2, r3, #16
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a12:	f043 0201 	orr.w	r2, r3, #1
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 8003a1a:	2301      	movs	r3, #1
 8003a1c:	e007      	b.n	8003a2e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	f003 0301 	and.w	r3, r3, #1
 8003a28:	2b01      	cmp	r3, #1
 8003a2a:	d0dc      	beq.n	80039e6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 8003a2c:	2300      	movs	r3, #0
}
 8003a2e:	4618      	mov	r0, r3
 8003a30:	3710      	adds	r7, #16
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}

08003a36 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b084      	sub	sp, #16
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a42:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003a44:	68fb      	ldr	r3, [r7, #12]
 8003a46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a48:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d127      	bne.n	8003aa0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a54:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	689b      	ldr	r3, [r3, #8]
 8003a62:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003a66:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003a6a:	d115      	bne.n	8003a98 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d111      	bne.n	8003a98 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a78:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d105      	bne.n	8003a98 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a90:	f043 0201 	orr.w	r2, r3, #1
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003a98:	68f8      	ldr	r0, [r7, #12]
 8003a9a:	f7fe ff4b 	bl	8002934 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 8003a9e:	e004      	b.n	8003aaa <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	6a1b      	ldr	r3, [r3, #32]
 8003aa4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aa6:	6878      	ldr	r0, [r7, #4]
 8003aa8:	4798      	blx	r3
}
 8003aaa:	bf00      	nop
 8003aac:	3710      	adds	r7, #16
 8003aae:	46bd      	mov	sp, r7
 8003ab0:	bd80      	pop	{r7, pc}

08003ab2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8003ab2:	b580      	push	{r7, lr}
 8003ab4:	b084      	sub	sp, #16
 8003ab6:	af00      	add	r7, sp, #0
 8003ab8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003abe:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003ac0:	68f8      	ldr	r0, [r7, #12]
 8003ac2:	f7ff fe0a 	bl	80036da <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003ac6:	bf00      	nop
 8003ac8:	3710      	adds	r7, #16
 8003aca:	46bd      	mov	sp, r7
 8003acc:	bd80      	pop	{r7, pc}

08003ace <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8003ace:	b580      	push	{r7, lr}
 8003ad0:	b084      	sub	sp, #16
 8003ad2:	af00      	add	r7, sp, #0
 8003ad4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ada:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ae0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aec:	f043 0204 	orr.w	r2, r3, #4
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f7ff fe02 	bl	80036fe <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003afa:	bf00      	nop
 8003afc:	3710      	adds	r7, #16
 8003afe:	46bd      	mov	sp, r7
 8003b00:	bd80      	pop	{r7, pc}

08003b02 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003b02:	b480      	push	{r7}
 8003b04:	b083      	sub	sp, #12
 8003b06:	af00      	add	r7, sp, #0
 8003b08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003b0a:	bf00      	nop
 8003b0c:	370c      	adds	r7, #12
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bc80      	pop	{r7}
 8003b12:	4770      	bx	lr

08003b14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b14:	b480      	push	{r7}
 8003b16:	b085      	sub	sp, #20
 8003b18:	af00      	add	r7, sp, #0
 8003b1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	f003 0307 	and.w	r3, r3, #7
 8003b22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b24:	4b0c      	ldr	r3, [pc, #48]	; (8003b58 <__NVIC_SetPriorityGrouping+0x44>)
 8003b26:	68db      	ldr	r3, [r3, #12]
 8003b28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b2a:	68ba      	ldr	r2, [r7, #8]
 8003b2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003b30:	4013      	ands	r3, r2
 8003b32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b38:	68bb      	ldr	r3, [r7, #8]
 8003b3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b46:	4a04      	ldr	r2, [pc, #16]	; (8003b58 <__NVIC_SetPriorityGrouping+0x44>)
 8003b48:	68bb      	ldr	r3, [r7, #8]
 8003b4a:	60d3      	str	r3, [r2, #12]
}
 8003b4c:	bf00      	nop
 8003b4e:	3714      	adds	r7, #20
 8003b50:	46bd      	mov	sp, r7
 8003b52:	bc80      	pop	{r7}
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	e000ed00 	.word	0xe000ed00

08003b5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b60:	4b04      	ldr	r3, [pc, #16]	; (8003b74 <__NVIC_GetPriorityGrouping+0x18>)
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	0a1b      	lsrs	r3, r3, #8
 8003b66:	f003 0307 	and.w	r3, r3, #7
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	46bd      	mov	sp, r7
 8003b6e:	bc80      	pop	{r7}
 8003b70:	4770      	bx	lr
 8003b72:	bf00      	nop
 8003b74:	e000ed00 	.word	0xe000ed00

08003b78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	4603      	mov	r3, r0
 8003b80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	db0b      	blt.n	8003ba2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b8a:	79fb      	ldrb	r3, [r7, #7]
 8003b8c:	f003 021f 	and.w	r2, r3, #31
 8003b90:	4906      	ldr	r1, [pc, #24]	; (8003bac <__NVIC_EnableIRQ+0x34>)
 8003b92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b96:	095b      	lsrs	r3, r3, #5
 8003b98:	2001      	movs	r0, #1
 8003b9a:	fa00 f202 	lsl.w	r2, r0, r2
 8003b9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003ba2:	bf00      	nop
 8003ba4:	370c      	adds	r7, #12
 8003ba6:	46bd      	mov	sp, r7
 8003ba8:	bc80      	pop	{r7}
 8003baa:	4770      	bx	lr
 8003bac:	e000e100 	.word	0xe000e100

08003bb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	4603      	mov	r3, r0
 8003bb8:	6039      	str	r1, [r7, #0]
 8003bba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bbc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bc0:	2b00      	cmp	r3, #0
 8003bc2:	db0a      	blt.n	8003bda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bc4:	683b      	ldr	r3, [r7, #0]
 8003bc6:	b2da      	uxtb	r2, r3
 8003bc8:	490c      	ldr	r1, [pc, #48]	; (8003bfc <__NVIC_SetPriority+0x4c>)
 8003bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bce:	0112      	lsls	r2, r2, #4
 8003bd0:	b2d2      	uxtb	r2, r2
 8003bd2:	440b      	add	r3, r1
 8003bd4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bd8:	e00a      	b.n	8003bf0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bda:	683b      	ldr	r3, [r7, #0]
 8003bdc:	b2da      	uxtb	r2, r3
 8003bde:	4908      	ldr	r1, [pc, #32]	; (8003c00 <__NVIC_SetPriority+0x50>)
 8003be0:	79fb      	ldrb	r3, [r7, #7]
 8003be2:	f003 030f 	and.w	r3, r3, #15
 8003be6:	3b04      	subs	r3, #4
 8003be8:	0112      	lsls	r2, r2, #4
 8003bea:	b2d2      	uxtb	r2, r2
 8003bec:	440b      	add	r3, r1
 8003bee:	761a      	strb	r2, [r3, #24]
}
 8003bf0:	bf00      	nop
 8003bf2:	370c      	adds	r7, #12
 8003bf4:	46bd      	mov	sp, r7
 8003bf6:	bc80      	pop	{r7}
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	e000e100 	.word	0xe000e100
 8003c00:	e000ed00 	.word	0xe000ed00

08003c04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b089      	sub	sp, #36	; 0x24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	60f8      	str	r0, [r7, #12]
 8003c0c:	60b9      	str	r1, [r7, #8]
 8003c0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	f003 0307 	and.w	r3, r3, #7
 8003c16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c18:	69fb      	ldr	r3, [r7, #28]
 8003c1a:	f1c3 0307 	rsb	r3, r3, #7
 8003c1e:	2b04      	cmp	r3, #4
 8003c20:	bf28      	it	cs
 8003c22:	2304      	movcs	r3, #4
 8003c24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c26:	69fb      	ldr	r3, [r7, #28]
 8003c28:	3304      	adds	r3, #4
 8003c2a:	2b06      	cmp	r3, #6
 8003c2c:	d902      	bls.n	8003c34 <NVIC_EncodePriority+0x30>
 8003c2e:	69fb      	ldr	r3, [r7, #28]
 8003c30:	3b03      	subs	r3, #3
 8003c32:	e000      	b.n	8003c36 <NVIC_EncodePriority+0x32>
 8003c34:	2300      	movs	r3, #0
 8003c36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c38:	f04f 32ff 	mov.w	r2, #4294967295
 8003c3c:	69bb      	ldr	r3, [r7, #24]
 8003c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003c42:	43da      	mvns	r2, r3
 8003c44:	68bb      	ldr	r3, [r7, #8]
 8003c46:	401a      	ands	r2, r3
 8003c48:	697b      	ldr	r3, [r7, #20]
 8003c4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c4c:	f04f 31ff 	mov.w	r1, #4294967295
 8003c50:	697b      	ldr	r3, [r7, #20]
 8003c52:	fa01 f303 	lsl.w	r3, r1, r3
 8003c56:	43d9      	mvns	r1, r3
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c5c:	4313      	orrs	r3, r2
         );
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3724      	adds	r7, #36	; 0x24
 8003c62:	46bd      	mov	sp, r7
 8003c64:	bc80      	pop	{r7}
 8003c66:	4770      	bx	lr

08003c68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c68:	b580      	push	{r7, lr}
 8003c6a:	b082      	sub	sp, #8
 8003c6c:	af00      	add	r7, sp, #0
 8003c6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	3b01      	subs	r3, #1
 8003c74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c78:	d301      	bcc.n	8003c7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c7a:	2301      	movs	r3, #1
 8003c7c:	e00f      	b.n	8003c9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c7e:	4a0a      	ldr	r2, [pc, #40]	; (8003ca8 <SysTick_Config+0x40>)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	3b01      	subs	r3, #1
 8003c84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c86:	210f      	movs	r1, #15
 8003c88:	f04f 30ff 	mov.w	r0, #4294967295
 8003c8c:	f7ff ff90 	bl	8003bb0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003c90:	4b05      	ldr	r3, [pc, #20]	; (8003ca8 <SysTick_Config+0x40>)
 8003c92:	2200      	movs	r2, #0
 8003c94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003c96:	4b04      	ldr	r3, [pc, #16]	; (8003ca8 <SysTick_Config+0x40>)
 8003c98:	2207      	movs	r2, #7
 8003c9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003c9c:	2300      	movs	r3, #0
}
 8003c9e:	4618      	mov	r0, r3
 8003ca0:	3708      	adds	r7, #8
 8003ca2:	46bd      	mov	sp, r7
 8003ca4:	bd80      	pop	{r7, pc}
 8003ca6:	bf00      	nop
 8003ca8:	e000e010 	.word	0xe000e010

08003cac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cac:	b580      	push	{r7, lr}
 8003cae:	b082      	sub	sp, #8
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003cb4:	6878      	ldr	r0, [r7, #4]
 8003cb6:	f7ff ff2d 	bl	8003b14 <__NVIC_SetPriorityGrouping>
}
 8003cba:	bf00      	nop
 8003cbc:	3708      	adds	r7, #8
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	bd80      	pop	{r7, pc}

08003cc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cc2:	b580      	push	{r7, lr}
 8003cc4:	b086      	sub	sp, #24
 8003cc6:	af00      	add	r7, sp, #0
 8003cc8:	4603      	mov	r3, r0
 8003cca:	60b9      	str	r1, [r7, #8]
 8003ccc:	607a      	str	r2, [r7, #4]
 8003cce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cd0:	2300      	movs	r3, #0
 8003cd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003cd4:	f7ff ff42 	bl	8003b5c <__NVIC_GetPriorityGrouping>
 8003cd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cda:	687a      	ldr	r2, [r7, #4]
 8003cdc:	68b9      	ldr	r1, [r7, #8]
 8003cde:	6978      	ldr	r0, [r7, #20]
 8003ce0:	f7ff ff90 	bl	8003c04 <NVIC_EncodePriority>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003cea:	4611      	mov	r1, r2
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7ff ff5f 	bl	8003bb0 <__NVIC_SetPriority>
}
 8003cf2:	bf00      	nop
 8003cf4:	3718      	adds	r7, #24
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b082      	sub	sp, #8
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	4603      	mov	r3, r0
 8003d02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d08:	4618      	mov	r0, r3
 8003d0a:	f7ff ff35 	bl	8003b78 <__NVIC_EnableIRQ>
}
 8003d0e:	bf00      	nop
 8003d10:	3708      	adds	r7, #8
 8003d12:	46bd      	mov	sp, r7
 8003d14:	bd80      	pop	{r7, pc}

08003d16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d16:	b580      	push	{r7, lr}
 8003d18:	b082      	sub	sp, #8
 8003d1a:	af00      	add	r7, sp, #0
 8003d1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f7ff ffa2 	bl	8003c68 <SysTick_Config>
 8003d24:	4603      	mov	r3, r0
}
 8003d26:	4618      	mov	r0, r3
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}
	...

08003d30 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b085      	sub	sp, #20
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d38:	2300      	movs	r3, #0
 8003d3a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2b00      	cmp	r3, #0
 8003d40:	d101      	bne.n	8003d46 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003d42:	2301      	movs	r3, #1
 8003d44:	e043      	b.n	8003dce <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	4b22      	ldr	r3, [pc, #136]	; (8003dd8 <HAL_DMA_Init+0xa8>)
 8003d4e:	4413      	add	r3, r2
 8003d50:	4a22      	ldr	r2, [pc, #136]	; (8003ddc <HAL_DMA_Init+0xac>)
 8003d52:	fba2 2303 	umull	r2, r3, r2, r3
 8003d56:	091b      	lsrs	r3, r3, #4
 8003d58:	009a      	lsls	r2, r3, #2
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	4a1f      	ldr	r2, [pc, #124]	; (8003de0 <HAL_DMA_Init+0xb0>)
 8003d62:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2202      	movs	r2, #2
 8003d68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003d7a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003d7e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003d88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	68db      	ldr	r3, [r3, #12]
 8003d8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	695b      	ldr	r3, [r3, #20]
 8003d9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003da0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	69db      	ldr	r3, [r3, #28]
 8003da6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003da8:	68fa      	ldr	r2, [r7, #12]
 8003daa:	4313      	orrs	r3, r2
 8003dac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	68fa      	ldr	r2, [r7, #12]
 8003db4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2200      	movs	r2, #0
 8003dba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3714      	adds	r7, #20
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bc80      	pop	{r7}
 8003dd6:	4770      	bx	lr
 8003dd8:	bffdfff8 	.word	0xbffdfff8
 8003ddc:	cccccccd 	.word	0xcccccccd
 8003de0:	40020000 	.word	0x40020000

08003de4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b086      	sub	sp, #24
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	60f8      	str	r0, [r7, #12]
 8003dec:	60b9      	str	r1, [r7, #8]
 8003dee:	607a      	str	r2, [r7, #4]
 8003df0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003df2:	2300      	movs	r3, #0
 8003df4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003dfc:	2b01      	cmp	r3, #1
 8003dfe:	d101      	bne.n	8003e04 <HAL_DMA_Start_IT+0x20>
 8003e00:	2302      	movs	r3, #2
 8003e02:	e04b      	b.n	8003e9c <HAL_DMA_Start_IT+0xb8>
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e12:	b2db      	uxtb	r3, r3
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d13a      	bne.n	8003e8e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e18:	68fb      	ldr	r3, [r7, #12]
 8003e1a:	2202      	movs	r2, #2
 8003e1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	2200      	movs	r2, #0
 8003e24:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	681a      	ldr	r2, [r3, #0]
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	f022 0201 	bic.w	r2, r2, #1
 8003e34:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	687a      	ldr	r2, [r7, #4]
 8003e3a:	68b9      	ldr	r1, [r7, #8]
 8003e3c:	68f8      	ldr	r0, [r7, #12]
 8003e3e:	f000 f9eb 	bl	8004218 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d008      	beq.n	8003e5c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f042 020e 	orr.w	r2, r2, #14
 8003e58:	601a      	str	r2, [r3, #0]
 8003e5a:	e00f      	b.n	8003e7c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f022 0204 	bic.w	r2, r2, #4
 8003e6a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	681a      	ldr	r2, [r3, #0]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	f042 020a 	orr.w	r2, r2, #10
 8003e7a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f042 0201 	orr.w	r2, r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]
 8003e8c:	e005      	b.n	8003e9a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2200      	movs	r2, #0
 8003e92:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003e96:	2302      	movs	r3, #2
 8003e98:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003e9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3718      	adds	r7, #24
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}

08003ea4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003ea4:	b480      	push	{r7}
 8003ea6:	b085      	sub	sp, #20
 8003ea8:	af00      	add	r7, sp, #0
 8003eaa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003eac:	2300      	movs	r3, #0
 8003eae:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003eb6:	b2db      	uxtb	r3, r3
 8003eb8:	2b02      	cmp	r3, #2
 8003eba:	d008      	beq.n	8003ece <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	2204      	movs	r2, #4
 8003ec0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e020      	b.n	8003f10 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f022 020e 	bic.w	r2, r2, #14
 8003edc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	681a      	ldr	r2, [r3, #0]
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f022 0201 	bic.w	r2, r2, #1
 8003eec:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003ef6:	2101      	movs	r1, #1
 8003ef8:	fa01 f202 	lsl.w	r2, r1, r2
 8003efc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2201      	movs	r2, #1
 8003f02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003f0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3714      	adds	r7, #20
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bc80      	pop	{r7}
 8003f18:	4770      	bx	lr
	...

08003f1c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003f1c:	b580      	push	{r7, lr}
 8003f1e:	b084      	sub	sp, #16
 8003f20:	af00      	add	r7, sp, #0
 8003f22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003f24:	2300      	movs	r3, #0
 8003f26:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d005      	beq.n	8003f40 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2204      	movs	r2, #4
 8003f38:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	73fb      	strb	r3, [r7, #15]
 8003f3e:	e051      	b.n	8003fe4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f022 020e 	bic.w	r2, r2, #14
 8003f4e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f022 0201 	bic.w	r2, r2, #1
 8003f5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	4a22      	ldr	r2, [pc, #136]	; (8003ff0 <HAL_DMA_Abort_IT+0xd4>)
 8003f66:	4293      	cmp	r3, r2
 8003f68:	d029      	beq.n	8003fbe <HAL_DMA_Abort_IT+0xa2>
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4a21      	ldr	r2, [pc, #132]	; (8003ff4 <HAL_DMA_Abort_IT+0xd8>)
 8003f70:	4293      	cmp	r3, r2
 8003f72:	d022      	beq.n	8003fba <HAL_DMA_Abort_IT+0x9e>
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	4a1f      	ldr	r2, [pc, #124]	; (8003ff8 <HAL_DMA_Abort_IT+0xdc>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d01a      	beq.n	8003fb4 <HAL_DMA_Abort_IT+0x98>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a1e      	ldr	r2, [pc, #120]	; (8003ffc <HAL_DMA_Abort_IT+0xe0>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d012      	beq.n	8003fae <HAL_DMA_Abort_IT+0x92>
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	4a1c      	ldr	r2, [pc, #112]	; (8004000 <HAL_DMA_Abort_IT+0xe4>)
 8003f8e:	4293      	cmp	r3, r2
 8003f90:	d00a      	beq.n	8003fa8 <HAL_DMA_Abort_IT+0x8c>
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4a1b      	ldr	r2, [pc, #108]	; (8004004 <HAL_DMA_Abort_IT+0xe8>)
 8003f98:	4293      	cmp	r3, r2
 8003f9a:	d102      	bne.n	8003fa2 <HAL_DMA_Abort_IT+0x86>
 8003f9c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003fa0:	e00e      	b.n	8003fc0 <HAL_DMA_Abort_IT+0xa4>
 8003fa2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003fa6:	e00b      	b.n	8003fc0 <HAL_DMA_Abort_IT+0xa4>
 8003fa8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003fac:	e008      	b.n	8003fc0 <HAL_DMA_Abort_IT+0xa4>
 8003fae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003fb2:	e005      	b.n	8003fc0 <HAL_DMA_Abort_IT+0xa4>
 8003fb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003fb8:	e002      	b.n	8003fc0 <HAL_DMA_Abort_IT+0xa4>
 8003fba:	2310      	movs	r3, #16
 8003fbc:	e000      	b.n	8003fc0 <HAL_DMA_Abort_IT+0xa4>
 8003fbe:	2301      	movs	r3, #1
 8003fc0:	4a11      	ldr	r2, [pc, #68]	; (8004008 <HAL_DMA_Abort_IT+0xec>)
 8003fc2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	2201      	movs	r2, #1
 8003fc8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2200      	movs	r2, #0
 8003fd0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fd8:	2b00      	cmp	r3, #0
 8003fda:	d003      	beq.n	8003fe4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	4798      	blx	r3
    } 
  }
  return status;
 8003fe4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	3710      	adds	r7, #16
 8003fea:	46bd      	mov	sp, r7
 8003fec:	bd80      	pop	{r7, pc}
 8003fee:	bf00      	nop
 8003ff0:	40020008 	.word	0x40020008
 8003ff4:	4002001c 	.word	0x4002001c
 8003ff8:	40020030 	.word	0x40020030
 8003ffc:	40020044 	.word	0x40020044
 8004000:	40020058 	.word	0x40020058
 8004004:	4002006c 	.word	0x4002006c
 8004008:	40020000 	.word	0x40020000

0800400c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800400c:	b580      	push	{r7, lr}
 800400e:	b084      	sub	sp, #16
 8004010:	af00      	add	r7, sp, #0
 8004012:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004028:	2204      	movs	r2, #4
 800402a:	409a      	lsls	r2, r3
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	4013      	ands	r3, r2
 8004030:	2b00      	cmp	r3, #0
 8004032:	d04f      	beq.n	80040d4 <HAL_DMA_IRQHandler+0xc8>
 8004034:	68bb      	ldr	r3, [r7, #8]
 8004036:	f003 0304 	and.w	r3, r3, #4
 800403a:	2b00      	cmp	r3, #0
 800403c:	d04a      	beq.n	80040d4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 0320 	and.w	r3, r3, #32
 8004048:	2b00      	cmp	r3, #0
 800404a:	d107      	bne.n	800405c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f022 0204 	bic.w	r2, r2, #4
 800405a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a66      	ldr	r2, [pc, #408]	; (80041fc <HAL_DMA_IRQHandler+0x1f0>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d029      	beq.n	80040ba <HAL_DMA_IRQHandler+0xae>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4a65      	ldr	r2, [pc, #404]	; (8004200 <HAL_DMA_IRQHandler+0x1f4>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d022      	beq.n	80040b6 <HAL_DMA_IRQHandler+0xaa>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	4a63      	ldr	r2, [pc, #396]	; (8004204 <HAL_DMA_IRQHandler+0x1f8>)
 8004076:	4293      	cmp	r3, r2
 8004078:	d01a      	beq.n	80040b0 <HAL_DMA_IRQHandler+0xa4>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a62      	ldr	r2, [pc, #392]	; (8004208 <HAL_DMA_IRQHandler+0x1fc>)
 8004080:	4293      	cmp	r3, r2
 8004082:	d012      	beq.n	80040aa <HAL_DMA_IRQHandler+0x9e>
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a60      	ldr	r2, [pc, #384]	; (800420c <HAL_DMA_IRQHandler+0x200>)
 800408a:	4293      	cmp	r3, r2
 800408c:	d00a      	beq.n	80040a4 <HAL_DMA_IRQHandler+0x98>
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	4a5f      	ldr	r2, [pc, #380]	; (8004210 <HAL_DMA_IRQHandler+0x204>)
 8004094:	4293      	cmp	r3, r2
 8004096:	d102      	bne.n	800409e <HAL_DMA_IRQHandler+0x92>
 8004098:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800409c:	e00e      	b.n	80040bc <HAL_DMA_IRQHandler+0xb0>
 800409e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 80040a2:	e00b      	b.n	80040bc <HAL_DMA_IRQHandler+0xb0>
 80040a4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80040a8:	e008      	b.n	80040bc <HAL_DMA_IRQHandler+0xb0>
 80040aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80040ae:	e005      	b.n	80040bc <HAL_DMA_IRQHandler+0xb0>
 80040b0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80040b4:	e002      	b.n	80040bc <HAL_DMA_IRQHandler+0xb0>
 80040b6:	2340      	movs	r3, #64	; 0x40
 80040b8:	e000      	b.n	80040bc <HAL_DMA_IRQHandler+0xb0>
 80040ba:	2304      	movs	r3, #4
 80040bc:	4a55      	ldr	r2, [pc, #340]	; (8004214 <HAL_DMA_IRQHandler+0x208>)
 80040be:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f000 8094 	beq.w	80041f2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 80040d2:	e08e      	b.n	80041f2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040d8:	2202      	movs	r2, #2
 80040da:	409a      	lsls	r2, r3
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	4013      	ands	r3, r2
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d056      	beq.n	8004192 <HAL_DMA_IRQHandler+0x186>
 80040e4:	68bb      	ldr	r3, [r7, #8]
 80040e6:	f003 0302 	and.w	r3, r3, #2
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d051      	beq.n	8004192 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	f003 0320 	and.w	r3, r3, #32
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d10b      	bne.n	8004114 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f022 020a 	bic.w	r2, r2, #10
 800410a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a38      	ldr	r2, [pc, #224]	; (80041fc <HAL_DMA_IRQHandler+0x1f0>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d029      	beq.n	8004172 <HAL_DMA_IRQHandler+0x166>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a37      	ldr	r2, [pc, #220]	; (8004200 <HAL_DMA_IRQHandler+0x1f4>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d022      	beq.n	800416e <HAL_DMA_IRQHandler+0x162>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a35      	ldr	r2, [pc, #212]	; (8004204 <HAL_DMA_IRQHandler+0x1f8>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d01a      	beq.n	8004168 <HAL_DMA_IRQHandler+0x15c>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a34      	ldr	r2, [pc, #208]	; (8004208 <HAL_DMA_IRQHandler+0x1fc>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d012      	beq.n	8004162 <HAL_DMA_IRQHandler+0x156>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a32      	ldr	r2, [pc, #200]	; (800420c <HAL_DMA_IRQHandler+0x200>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d00a      	beq.n	800415c <HAL_DMA_IRQHandler+0x150>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a31      	ldr	r2, [pc, #196]	; (8004210 <HAL_DMA_IRQHandler+0x204>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d102      	bne.n	8004156 <HAL_DMA_IRQHandler+0x14a>
 8004150:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004154:	e00e      	b.n	8004174 <HAL_DMA_IRQHandler+0x168>
 8004156:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800415a:	e00b      	b.n	8004174 <HAL_DMA_IRQHandler+0x168>
 800415c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004160:	e008      	b.n	8004174 <HAL_DMA_IRQHandler+0x168>
 8004162:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004166:	e005      	b.n	8004174 <HAL_DMA_IRQHandler+0x168>
 8004168:	f44f 7300 	mov.w	r3, #512	; 0x200
 800416c:	e002      	b.n	8004174 <HAL_DMA_IRQHandler+0x168>
 800416e:	2320      	movs	r3, #32
 8004170:	e000      	b.n	8004174 <HAL_DMA_IRQHandler+0x168>
 8004172:	2302      	movs	r3, #2
 8004174:	4a27      	ldr	r2, [pc, #156]	; (8004214 <HAL_DMA_IRQHandler+0x208>)
 8004176:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2200      	movs	r2, #0
 800417c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004184:	2b00      	cmp	r3, #0
 8004186:	d034      	beq.n	80041f2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800418c:	6878      	ldr	r0, [r7, #4]
 800418e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004190:	e02f      	b.n	80041f2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004196:	2208      	movs	r2, #8
 8004198:	409a      	lsls	r2, r3
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	4013      	ands	r3, r2
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d028      	beq.n	80041f4 <HAL_DMA_IRQHandler+0x1e8>
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	f003 0308 	and.w	r3, r3, #8
 80041a8:	2b00      	cmp	r3, #0
 80041aa:	d023      	beq.n	80041f4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f022 020e 	bic.w	r2, r2, #14
 80041ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c4:	2101      	movs	r1, #1
 80041c6:	fa01 f202 	lsl.w	r2, r1, r2
 80041ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	2201      	movs	r2, #1
 80041d0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d004      	beq.n	80041f4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041ee:	6878      	ldr	r0, [r7, #4]
 80041f0:	4798      	blx	r3
    }
  }
  return;
 80041f2:	bf00      	nop
 80041f4:	bf00      	nop
}
 80041f6:	3710      	adds	r7, #16
 80041f8:	46bd      	mov	sp, r7
 80041fa:	bd80      	pop	{r7, pc}
 80041fc:	40020008 	.word	0x40020008
 8004200:	4002001c 	.word	0x4002001c
 8004204:	40020030 	.word	0x40020030
 8004208:	40020044 	.word	0x40020044
 800420c:	40020058 	.word	0x40020058
 8004210:	4002006c 	.word	0x4002006c
 8004214:	40020000 	.word	0x40020000

08004218 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004218:	b480      	push	{r7}
 800421a:	b085      	sub	sp, #20
 800421c:	af00      	add	r7, sp, #0
 800421e:	60f8      	str	r0, [r7, #12]
 8004220:	60b9      	str	r1, [r7, #8]
 8004222:	607a      	str	r2, [r7, #4]
 8004224:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800422e:	2101      	movs	r1, #1
 8004230:	fa01 f202 	lsl.w	r2, r1, r2
 8004234:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	683a      	ldr	r2, [r7, #0]
 800423c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	685b      	ldr	r3, [r3, #4]
 8004242:	2b10      	cmp	r3, #16
 8004244:	d108      	bne.n	8004258 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004246:	68fb      	ldr	r3, [r7, #12]
 8004248:	681b      	ldr	r3, [r3, #0]
 800424a:	687a      	ldr	r2, [r7, #4]
 800424c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68ba      	ldr	r2, [r7, #8]
 8004254:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004256:	e007      	b.n	8004268 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	68ba      	ldr	r2, [r7, #8]
 800425e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	60da      	str	r2, [r3, #12]
}
 8004268:	bf00      	nop
 800426a:	3714      	adds	r7, #20
 800426c:	46bd      	mov	sp, r7
 800426e:	bc80      	pop	{r7}
 8004270:	4770      	bx	lr
	...

08004274 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004274:	b480      	push	{r7}
 8004276:	b08b      	sub	sp, #44	; 0x2c
 8004278:	af00      	add	r7, sp, #0
 800427a:	6078      	str	r0, [r7, #4]
 800427c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800427e:	2300      	movs	r3, #0
 8004280:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004282:	2300      	movs	r3, #0
 8004284:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004286:	e169      	b.n	800455c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004288:	2201      	movs	r2, #1
 800428a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800428c:	fa02 f303 	lsl.w	r3, r2, r3
 8004290:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	69fa      	ldr	r2, [r7, #28]
 8004298:	4013      	ands	r3, r2
 800429a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800429c:	69ba      	ldr	r2, [r7, #24]
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	429a      	cmp	r2, r3
 80042a2:	f040 8158 	bne.w	8004556 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	685b      	ldr	r3, [r3, #4]
 80042aa:	4a9a      	ldr	r2, [pc, #616]	; (8004514 <HAL_GPIO_Init+0x2a0>)
 80042ac:	4293      	cmp	r3, r2
 80042ae:	d05e      	beq.n	800436e <HAL_GPIO_Init+0xfa>
 80042b0:	4a98      	ldr	r2, [pc, #608]	; (8004514 <HAL_GPIO_Init+0x2a0>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d875      	bhi.n	80043a2 <HAL_GPIO_Init+0x12e>
 80042b6:	4a98      	ldr	r2, [pc, #608]	; (8004518 <HAL_GPIO_Init+0x2a4>)
 80042b8:	4293      	cmp	r3, r2
 80042ba:	d058      	beq.n	800436e <HAL_GPIO_Init+0xfa>
 80042bc:	4a96      	ldr	r2, [pc, #600]	; (8004518 <HAL_GPIO_Init+0x2a4>)
 80042be:	4293      	cmp	r3, r2
 80042c0:	d86f      	bhi.n	80043a2 <HAL_GPIO_Init+0x12e>
 80042c2:	4a96      	ldr	r2, [pc, #600]	; (800451c <HAL_GPIO_Init+0x2a8>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d052      	beq.n	800436e <HAL_GPIO_Init+0xfa>
 80042c8:	4a94      	ldr	r2, [pc, #592]	; (800451c <HAL_GPIO_Init+0x2a8>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d869      	bhi.n	80043a2 <HAL_GPIO_Init+0x12e>
 80042ce:	4a94      	ldr	r2, [pc, #592]	; (8004520 <HAL_GPIO_Init+0x2ac>)
 80042d0:	4293      	cmp	r3, r2
 80042d2:	d04c      	beq.n	800436e <HAL_GPIO_Init+0xfa>
 80042d4:	4a92      	ldr	r2, [pc, #584]	; (8004520 <HAL_GPIO_Init+0x2ac>)
 80042d6:	4293      	cmp	r3, r2
 80042d8:	d863      	bhi.n	80043a2 <HAL_GPIO_Init+0x12e>
 80042da:	4a92      	ldr	r2, [pc, #584]	; (8004524 <HAL_GPIO_Init+0x2b0>)
 80042dc:	4293      	cmp	r3, r2
 80042de:	d046      	beq.n	800436e <HAL_GPIO_Init+0xfa>
 80042e0:	4a90      	ldr	r2, [pc, #576]	; (8004524 <HAL_GPIO_Init+0x2b0>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d85d      	bhi.n	80043a2 <HAL_GPIO_Init+0x12e>
 80042e6:	2b12      	cmp	r3, #18
 80042e8:	d82a      	bhi.n	8004340 <HAL_GPIO_Init+0xcc>
 80042ea:	2b12      	cmp	r3, #18
 80042ec:	d859      	bhi.n	80043a2 <HAL_GPIO_Init+0x12e>
 80042ee:	a201      	add	r2, pc, #4	; (adr r2, 80042f4 <HAL_GPIO_Init+0x80>)
 80042f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80042f4:	0800436f 	.word	0x0800436f
 80042f8:	08004349 	.word	0x08004349
 80042fc:	0800435b 	.word	0x0800435b
 8004300:	0800439d 	.word	0x0800439d
 8004304:	080043a3 	.word	0x080043a3
 8004308:	080043a3 	.word	0x080043a3
 800430c:	080043a3 	.word	0x080043a3
 8004310:	080043a3 	.word	0x080043a3
 8004314:	080043a3 	.word	0x080043a3
 8004318:	080043a3 	.word	0x080043a3
 800431c:	080043a3 	.word	0x080043a3
 8004320:	080043a3 	.word	0x080043a3
 8004324:	080043a3 	.word	0x080043a3
 8004328:	080043a3 	.word	0x080043a3
 800432c:	080043a3 	.word	0x080043a3
 8004330:	080043a3 	.word	0x080043a3
 8004334:	080043a3 	.word	0x080043a3
 8004338:	08004351 	.word	0x08004351
 800433c:	08004365 	.word	0x08004365
 8004340:	4a79      	ldr	r2, [pc, #484]	; (8004528 <HAL_GPIO_Init+0x2b4>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d013      	beq.n	800436e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004346:	e02c      	b.n	80043a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004348:	683b      	ldr	r3, [r7, #0]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	623b      	str	r3, [r7, #32]
          break;
 800434e:	e029      	b.n	80043a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	3304      	adds	r3, #4
 8004356:	623b      	str	r3, [r7, #32]
          break;
 8004358:	e024      	b.n	80043a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	68db      	ldr	r3, [r3, #12]
 800435e:	3308      	adds	r3, #8
 8004360:	623b      	str	r3, [r7, #32]
          break;
 8004362:	e01f      	b.n	80043a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004364:	683b      	ldr	r3, [r7, #0]
 8004366:	68db      	ldr	r3, [r3, #12]
 8004368:	330c      	adds	r3, #12
 800436a:	623b      	str	r3, [r7, #32]
          break;
 800436c:	e01a      	b.n	80043a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	689b      	ldr	r3, [r3, #8]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d102      	bne.n	800437c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004376:	2304      	movs	r3, #4
 8004378:	623b      	str	r3, [r7, #32]
          break;
 800437a:	e013      	b.n	80043a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	2b01      	cmp	r3, #1
 8004382:	d105      	bne.n	8004390 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004384:	2308      	movs	r3, #8
 8004386:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	69fa      	ldr	r2, [r7, #28]
 800438c:	611a      	str	r2, [r3, #16]
          break;
 800438e:	e009      	b.n	80043a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004390:	2308      	movs	r3, #8
 8004392:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	69fa      	ldr	r2, [r7, #28]
 8004398:	615a      	str	r2, [r3, #20]
          break;
 800439a:	e003      	b.n	80043a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800439c:	2300      	movs	r3, #0
 800439e:	623b      	str	r3, [r7, #32]
          break;
 80043a0:	e000      	b.n	80043a4 <HAL_GPIO_Init+0x130>
          break;
 80043a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	2bff      	cmp	r3, #255	; 0xff
 80043a8:	d801      	bhi.n	80043ae <HAL_GPIO_Init+0x13a>
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	e001      	b.n	80043b2 <HAL_GPIO_Init+0x13e>
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	3304      	adds	r3, #4
 80043b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80043b4:	69bb      	ldr	r3, [r7, #24]
 80043b6:	2bff      	cmp	r3, #255	; 0xff
 80043b8:	d802      	bhi.n	80043c0 <HAL_GPIO_Init+0x14c>
 80043ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043bc:	009b      	lsls	r3, r3, #2
 80043be:	e002      	b.n	80043c6 <HAL_GPIO_Init+0x152>
 80043c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043c2:	3b08      	subs	r3, #8
 80043c4:	009b      	lsls	r3, r3, #2
 80043c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80043c8:	697b      	ldr	r3, [r7, #20]
 80043ca:	681a      	ldr	r2, [r3, #0]
 80043cc:	210f      	movs	r1, #15
 80043ce:	693b      	ldr	r3, [r7, #16]
 80043d0:	fa01 f303 	lsl.w	r3, r1, r3
 80043d4:	43db      	mvns	r3, r3
 80043d6:	401a      	ands	r2, r3
 80043d8:	6a39      	ldr	r1, [r7, #32]
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	fa01 f303 	lsl.w	r3, r1, r3
 80043e0:	431a      	orrs	r2, r3
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	685b      	ldr	r3, [r3, #4]
 80043ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	f000 80b1 	beq.w	8004556 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80043f4:	4b4d      	ldr	r3, [pc, #308]	; (800452c <HAL_GPIO_Init+0x2b8>)
 80043f6:	699b      	ldr	r3, [r3, #24]
 80043f8:	4a4c      	ldr	r2, [pc, #304]	; (800452c <HAL_GPIO_Init+0x2b8>)
 80043fa:	f043 0301 	orr.w	r3, r3, #1
 80043fe:	6193      	str	r3, [r2, #24]
 8004400:	4b4a      	ldr	r3, [pc, #296]	; (800452c <HAL_GPIO_Init+0x2b8>)
 8004402:	699b      	ldr	r3, [r3, #24]
 8004404:	f003 0301 	and.w	r3, r3, #1
 8004408:	60bb      	str	r3, [r7, #8]
 800440a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800440c:	4a48      	ldr	r2, [pc, #288]	; (8004530 <HAL_GPIO_Init+0x2bc>)
 800440e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004410:	089b      	lsrs	r3, r3, #2
 8004412:	3302      	adds	r3, #2
 8004414:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004418:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800441a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800441c:	f003 0303 	and.w	r3, r3, #3
 8004420:	009b      	lsls	r3, r3, #2
 8004422:	220f      	movs	r2, #15
 8004424:	fa02 f303 	lsl.w	r3, r2, r3
 8004428:	43db      	mvns	r3, r3
 800442a:	68fa      	ldr	r2, [r7, #12]
 800442c:	4013      	ands	r3, r2
 800442e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	4a40      	ldr	r2, [pc, #256]	; (8004534 <HAL_GPIO_Init+0x2c0>)
 8004434:	4293      	cmp	r3, r2
 8004436:	d013      	beq.n	8004460 <HAL_GPIO_Init+0x1ec>
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	4a3f      	ldr	r2, [pc, #252]	; (8004538 <HAL_GPIO_Init+0x2c4>)
 800443c:	4293      	cmp	r3, r2
 800443e:	d00d      	beq.n	800445c <HAL_GPIO_Init+0x1e8>
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	4a3e      	ldr	r2, [pc, #248]	; (800453c <HAL_GPIO_Init+0x2c8>)
 8004444:	4293      	cmp	r3, r2
 8004446:	d007      	beq.n	8004458 <HAL_GPIO_Init+0x1e4>
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	4a3d      	ldr	r2, [pc, #244]	; (8004540 <HAL_GPIO_Init+0x2cc>)
 800444c:	4293      	cmp	r3, r2
 800444e:	d101      	bne.n	8004454 <HAL_GPIO_Init+0x1e0>
 8004450:	2303      	movs	r3, #3
 8004452:	e006      	b.n	8004462 <HAL_GPIO_Init+0x1ee>
 8004454:	2304      	movs	r3, #4
 8004456:	e004      	b.n	8004462 <HAL_GPIO_Init+0x1ee>
 8004458:	2302      	movs	r3, #2
 800445a:	e002      	b.n	8004462 <HAL_GPIO_Init+0x1ee>
 800445c:	2301      	movs	r3, #1
 800445e:	e000      	b.n	8004462 <HAL_GPIO_Init+0x1ee>
 8004460:	2300      	movs	r3, #0
 8004462:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004464:	f002 0203 	and.w	r2, r2, #3
 8004468:	0092      	lsls	r2, r2, #2
 800446a:	4093      	lsls	r3, r2
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	4313      	orrs	r3, r2
 8004470:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004472:	492f      	ldr	r1, [pc, #188]	; (8004530 <HAL_GPIO_Init+0x2bc>)
 8004474:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004476:	089b      	lsrs	r3, r3, #2
 8004478:	3302      	adds	r3, #2
 800447a:	68fa      	ldr	r2, [r7, #12]
 800447c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d006      	beq.n	800449a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800448c:	4b2d      	ldr	r3, [pc, #180]	; (8004544 <HAL_GPIO_Init+0x2d0>)
 800448e:	689a      	ldr	r2, [r3, #8]
 8004490:	492c      	ldr	r1, [pc, #176]	; (8004544 <HAL_GPIO_Init+0x2d0>)
 8004492:	69bb      	ldr	r3, [r7, #24]
 8004494:	4313      	orrs	r3, r2
 8004496:	608b      	str	r3, [r1, #8]
 8004498:	e006      	b.n	80044a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800449a:	4b2a      	ldr	r3, [pc, #168]	; (8004544 <HAL_GPIO_Init+0x2d0>)
 800449c:	689a      	ldr	r2, [r3, #8]
 800449e:	69bb      	ldr	r3, [r7, #24]
 80044a0:	43db      	mvns	r3, r3
 80044a2:	4928      	ldr	r1, [pc, #160]	; (8004544 <HAL_GPIO_Init+0x2d0>)
 80044a4:	4013      	ands	r3, r2
 80044a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80044a8:	683b      	ldr	r3, [r7, #0]
 80044aa:	685b      	ldr	r3, [r3, #4]
 80044ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d006      	beq.n	80044c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80044b4:	4b23      	ldr	r3, [pc, #140]	; (8004544 <HAL_GPIO_Init+0x2d0>)
 80044b6:	68da      	ldr	r2, [r3, #12]
 80044b8:	4922      	ldr	r1, [pc, #136]	; (8004544 <HAL_GPIO_Init+0x2d0>)
 80044ba:	69bb      	ldr	r3, [r7, #24]
 80044bc:	4313      	orrs	r3, r2
 80044be:	60cb      	str	r3, [r1, #12]
 80044c0:	e006      	b.n	80044d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80044c2:	4b20      	ldr	r3, [pc, #128]	; (8004544 <HAL_GPIO_Init+0x2d0>)
 80044c4:	68da      	ldr	r2, [r3, #12]
 80044c6:	69bb      	ldr	r3, [r7, #24]
 80044c8:	43db      	mvns	r3, r3
 80044ca:	491e      	ldr	r1, [pc, #120]	; (8004544 <HAL_GPIO_Init+0x2d0>)
 80044cc:	4013      	ands	r3, r2
 80044ce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d006      	beq.n	80044ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80044dc:	4b19      	ldr	r3, [pc, #100]	; (8004544 <HAL_GPIO_Init+0x2d0>)
 80044de:	685a      	ldr	r2, [r3, #4]
 80044e0:	4918      	ldr	r1, [pc, #96]	; (8004544 <HAL_GPIO_Init+0x2d0>)
 80044e2:	69bb      	ldr	r3, [r7, #24]
 80044e4:	4313      	orrs	r3, r2
 80044e6:	604b      	str	r3, [r1, #4]
 80044e8:	e006      	b.n	80044f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80044ea:	4b16      	ldr	r3, [pc, #88]	; (8004544 <HAL_GPIO_Init+0x2d0>)
 80044ec:	685a      	ldr	r2, [r3, #4]
 80044ee:	69bb      	ldr	r3, [r7, #24]
 80044f0:	43db      	mvns	r3, r3
 80044f2:	4914      	ldr	r1, [pc, #80]	; (8004544 <HAL_GPIO_Init+0x2d0>)
 80044f4:	4013      	ands	r3, r2
 80044f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004500:	2b00      	cmp	r3, #0
 8004502:	d021      	beq.n	8004548 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004504:	4b0f      	ldr	r3, [pc, #60]	; (8004544 <HAL_GPIO_Init+0x2d0>)
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	490e      	ldr	r1, [pc, #56]	; (8004544 <HAL_GPIO_Init+0x2d0>)
 800450a:	69bb      	ldr	r3, [r7, #24]
 800450c:	4313      	orrs	r3, r2
 800450e:	600b      	str	r3, [r1, #0]
 8004510:	e021      	b.n	8004556 <HAL_GPIO_Init+0x2e2>
 8004512:	bf00      	nop
 8004514:	10320000 	.word	0x10320000
 8004518:	10310000 	.word	0x10310000
 800451c:	10220000 	.word	0x10220000
 8004520:	10210000 	.word	0x10210000
 8004524:	10120000 	.word	0x10120000
 8004528:	10110000 	.word	0x10110000
 800452c:	40021000 	.word	0x40021000
 8004530:	40010000 	.word	0x40010000
 8004534:	40010800 	.word	0x40010800
 8004538:	40010c00 	.word	0x40010c00
 800453c:	40011000 	.word	0x40011000
 8004540:	40011400 	.word	0x40011400
 8004544:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004548:	4b0b      	ldr	r3, [pc, #44]	; (8004578 <HAL_GPIO_Init+0x304>)
 800454a:	681a      	ldr	r2, [r3, #0]
 800454c:	69bb      	ldr	r3, [r7, #24]
 800454e:	43db      	mvns	r3, r3
 8004550:	4909      	ldr	r1, [pc, #36]	; (8004578 <HAL_GPIO_Init+0x304>)
 8004552:	4013      	ands	r3, r2
 8004554:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004558:	3301      	adds	r3, #1
 800455a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800455c:	683b      	ldr	r3, [r7, #0]
 800455e:	681a      	ldr	r2, [r3, #0]
 8004560:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004562:	fa22 f303 	lsr.w	r3, r2, r3
 8004566:	2b00      	cmp	r3, #0
 8004568:	f47f ae8e 	bne.w	8004288 <HAL_GPIO_Init+0x14>
  }
}
 800456c:	bf00      	nop
 800456e:	bf00      	nop
 8004570:	372c      	adds	r7, #44	; 0x2c
 8004572:	46bd      	mov	sp, r7
 8004574:	bc80      	pop	{r7}
 8004576:	4770      	bx	lr
 8004578:	40010400 	.word	0x40010400

0800457c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800457c:	b480      	push	{r7}
 800457e:	b085      	sub	sp, #20
 8004580:	af00      	add	r7, sp, #0
 8004582:	6078      	str	r0, [r7, #4]
 8004584:	460b      	mov	r3, r1
 8004586:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	887b      	ldrh	r3, [r7, #2]
 800458e:	4013      	ands	r3, r2
 8004590:	2b00      	cmp	r3, #0
 8004592:	d002      	beq.n	800459a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004594:	2301      	movs	r3, #1
 8004596:	73fb      	strb	r3, [r7, #15]
 8004598:	e001      	b.n	800459e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800459a:	2300      	movs	r3, #0
 800459c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800459e:	7bfb      	ldrb	r3, [r7, #15]
}
 80045a0:	4618      	mov	r0, r3
 80045a2:	3714      	adds	r7, #20
 80045a4:	46bd      	mov	sp, r7
 80045a6:	bc80      	pop	{r7}
 80045a8:	4770      	bx	lr

080045aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80045aa:	b480      	push	{r7}
 80045ac:	b083      	sub	sp, #12
 80045ae:	af00      	add	r7, sp, #0
 80045b0:	6078      	str	r0, [r7, #4]
 80045b2:	460b      	mov	r3, r1
 80045b4:	807b      	strh	r3, [r7, #2]
 80045b6:	4613      	mov	r3, r2
 80045b8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80045ba:	787b      	ldrb	r3, [r7, #1]
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d003      	beq.n	80045c8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80045c0:	887a      	ldrh	r2, [r7, #2]
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80045c6:	e003      	b.n	80045d0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80045c8:	887b      	ldrh	r3, [r7, #2]
 80045ca:	041a      	lsls	r2, r3, #16
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	611a      	str	r2, [r3, #16]
}
 80045d0:	bf00      	nop
 80045d2:	370c      	adds	r7, #12
 80045d4:	46bd      	mov	sp, r7
 80045d6:	bc80      	pop	{r7}
 80045d8:	4770      	bx	lr
	...

080045dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80045dc:	b580      	push	{r7, lr}
 80045de:	b086      	sub	sp, #24
 80045e0:	af00      	add	r7, sp, #0
 80045e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d101      	bne.n	80045ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80045ea:	2301      	movs	r3, #1
 80045ec:	e272      	b.n	8004ad4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80045ee:	687b      	ldr	r3, [r7, #4]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	f000 8087 	beq.w	800470a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80045fc:	4b92      	ldr	r3, [pc, #584]	; (8004848 <HAL_RCC_OscConfig+0x26c>)
 80045fe:	685b      	ldr	r3, [r3, #4]
 8004600:	f003 030c 	and.w	r3, r3, #12
 8004604:	2b04      	cmp	r3, #4
 8004606:	d00c      	beq.n	8004622 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004608:	4b8f      	ldr	r3, [pc, #572]	; (8004848 <HAL_RCC_OscConfig+0x26c>)
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	f003 030c 	and.w	r3, r3, #12
 8004610:	2b08      	cmp	r3, #8
 8004612:	d112      	bne.n	800463a <HAL_RCC_OscConfig+0x5e>
 8004614:	4b8c      	ldr	r3, [pc, #560]	; (8004848 <HAL_RCC_OscConfig+0x26c>)
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800461c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004620:	d10b      	bne.n	800463a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004622:	4b89      	ldr	r3, [pc, #548]	; (8004848 <HAL_RCC_OscConfig+0x26c>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800462a:	2b00      	cmp	r3, #0
 800462c:	d06c      	beq.n	8004708 <HAL_RCC_OscConfig+0x12c>
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	2b00      	cmp	r3, #0
 8004634:	d168      	bne.n	8004708 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004636:	2301      	movs	r3, #1
 8004638:	e24c      	b.n	8004ad4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004642:	d106      	bne.n	8004652 <HAL_RCC_OscConfig+0x76>
 8004644:	4b80      	ldr	r3, [pc, #512]	; (8004848 <HAL_RCC_OscConfig+0x26c>)
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	4a7f      	ldr	r2, [pc, #508]	; (8004848 <HAL_RCC_OscConfig+0x26c>)
 800464a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800464e:	6013      	str	r3, [r2, #0]
 8004650:	e02e      	b.n	80046b0 <HAL_RCC_OscConfig+0xd4>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	685b      	ldr	r3, [r3, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d10c      	bne.n	8004674 <HAL_RCC_OscConfig+0x98>
 800465a:	4b7b      	ldr	r3, [pc, #492]	; (8004848 <HAL_RCC_OscConfig+0x26c>)
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	4a7a      	ldr	r2, [pc, #488]	; (8004848 <HAL_RCC_OscConfig+0x26c>)
 8004660:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004664:	6013      	str	r3, [r2, #0]
 8004666:	4b78      	ldr	r3, [pc, #480]	; (8004848 <HAL_RCC_OscConfig+0x26c>)
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	4a77      	ldr	r2, [pc, #476]	; (8004848 <HAL_RCC_OscConfig+0x26c>)
 800466c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004670:	6013      	str	r3, [r2, #0]
 8004672:	e01d      	b.n	80046b0 <HAL_RCC_OscConfig+0xd4>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800467c:	d10c      	bne.n	8004698 <HAL_RCC_OscConfig+0xbc>
 800467e:	4b72      	ldr	r3, [pc, #456]	; (8004848 <HAL_RCC_OscConfig+0x26c>)
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a71      	ldr	r2, [pc, #452]	; (8004848 <HAL_RCC_OscConfig+0x26c>)
 8004684:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004688:	6013      	str	r3, [r2, #0]
 800468a:	4b6f      	ldr	r3, [pc, #444]	; (8004848 <HAL_RCC_OscConfig+0x26c>)
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a6e      	ldr	r2, [pc, #440]	; (8004848 <HAL_RCC_OscConfig+0x26c>)
 8004690:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004694:	6013      	str	r3, [r2, #0]
 8004696:	e00b      	b.n	80046b0 <HAL_RCC_OscConfig+0xd4>
 8004698:	4b6b      	ldr	r3, [pc, #428]	; (8004848 <HAL_RCC_OscConfig+0x26c>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4a6a      	ldr	r2, [pc, #424]	; (8004848 <HAL_RCC_OscConfig+0x26c>)
 800469e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80046a2:	6013      	str	r3, [r2, #0]
 80046a4:	4b68      	ldr	r3, [pc, #416]	; (8004848 <HAL_RCC_OscConfig+0x26c>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4a67      	ldr	r2, [pc, #412]	; (8004848 <HAL_RCC_OscConfig+0x26c>)
 80046aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80046ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	685b      	ldr	r3, [r3, #4]
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d013      	beq.n	80046e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b8:	f7fe fc5a 	bl	8002f70 <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046c0:	f7fe fc56 	bl	8002f70 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b64      	cmp	r3, #100	; 0x64
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e200      	b.n	8004ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80046d2:	4b5d      	ldr	r3, [pc, #372]	; (8004848 <HAL_RCC_OscConfig+0x26c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d0f0      	beq.n	80046c0 <HAL_RCC_OscConfig+0xe4>
 80046de:	e014      	b.n	800470a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046e0:	f7fe fc46 	bl	8002f70 <HAL_GetTick>
 80046e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046e6:	e008      	b.n	80046fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80046e8:	f7fe fc42 	bl	8002f70 <HAL_GetTick>
 80046ec:	4602      	mov	r2, r0
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	1ad3      	subs	r3, r2, r3
 80046f2:	2b64      	cmp	r3, #100	; 0x64
 80046f4:	d901      	bls.n	80046fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80046f6:	2303      	movs	r3, #3
 80046f8:	e1ec      	b.n	8004ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80046fa:	4b53      	ldr	r3, [pc, #332]	; (8004848 <HAL_RCC_OscConfig+0x26c>)
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004702:	2b00      	cmp	r3, #0
 8004704:	d1f0      	bne.n	80046e8 <HAL_RCC_OscConfig+0x10c>
 8004706:	e000      	b.n	800470a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004708:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	f003 0302 	and.w	r3, r3, #2
 8004712:	2b00      	cmp	r3, #0
 8004714:	d063      	beq.n	80047de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004716:	4b4c      	ldr	r3, [pc, #304]	; (8004848 <HAL_RCC_OscConfig+0x26c>)
 8004718:	685b      	ldr	r3, [r3, #4]
 800471a:	f003 030c 	and.w	r3, r3, #12
 800471e:	2b00      	cmp	r3, #0
 8004720:	d00b      	beq.n	800473a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004722:	4b49      	ldr	r3, [pc, #292]	; (8004848 <HAL_RCC_OscConfig+0x26c>)
 8004724:	685b      	ldr	r3, [r3, #4]
 8004726:	f003 030c 	and.w	r3, r3, #12
 800472a:	2b08      	cmp	r3, #8
 800472c:	d11c      	bne.n	8004768 <HAL_RCC_OscConfig+0x18c>
 800472e:	4b46      	ldr	r3, [pc, #280]	; (8004848 <HAL_RCC_OscConfig+0x26c>)
 8004730:	685b      	ldr	r3, [r3, #4]
 8004732:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004736:	2b00      	cmp	r3, #0
 8004738:	d116      	bne.n	8004768 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800473a:	4b43      	ldr	r3, [pc, #268]	; (8004848 <HAL_RCC_OscConfig+0x26c>)
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f003 0302 	and.w	r3, r3, #2
 8004742:	2b00      	cmp	r3, #0
 8004744:	d005      	beq.n	8004752 <HAL_RCC_OscConfig+0x176>
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	2b01      	cmp	r3, #1
 800474c:	d001      	beq.n	8004752 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800474e:	2301      	movs	r3, #1
 8004750:	e1c0      	b.n	8004ad4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004752:	4b3d      	ldr	r3, [pc, #244]	; (8004848 <HAL_RCC_OscConfig+0x26c>)
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	695b      	ldr	r3, [r3, #20]
 800475e:	00db      	lsls	r3, r3, #3
 8004760:	4939      	ldr	r1, [pc, #228]	; (8004848 <HAL_RCC_OscConfig+0x26c>)
 8004762:	4313      	orrs	r3, r2
 8004764:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004766:	e03a      	b.n	80047de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	2b00      	cmp	r3, #0
 800476e:	d020      	beq.n	80047b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004770:	4b36      	ldr	r3, [pc, #216]	; (800484c <HAL_RCC_OscConfig+0x270>)
 8004772:	2201      	movs	r2, #1
 8004774:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004776:	f7fe fbfb 	bl	8002f70 <HAL_GetTick>
 800477a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800477c:	e008      	b.n	8004790 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800477e:	f7fe fbf7 	bl	8002f70 <HAL_GetTick>
 8004782:	4602      	mov	r2, r0
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	1ad3      	subs	r3, r2, r3
 8004788:	2b02      	cmp	r3, #2
 800478a:	d901      	bls.n	8004790 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800478c:	2303      	movs	r3, #3
 800478e:	e1a1      	b.n	8004ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004790:	4b2d      	ldr	r3, [pc, #180]	; (8004848 <HAL_RCC_OscConfig+0x26c>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f003 0302 	and.w	r3, r3, #2
 8004798:	2b00      	cmp	r3, #0
 800479a:	d0f0      	beq.n	800477e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800479c:	4b2a      	ldr	r3, [pc, #168]	; (8004848 <HAL_RCC_OscConfig+0x26c>)
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	695b      	ldr	r3, [r3, #20]
 80047a8:	00db      	lsls	r3, r3, #3
 80047aa:	4927      	ldr	r1, [pc, #156]	; (8004848 <HAL_RCC_OscConfig+0x26c>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	600b      	str	r3, [r1, #0]
 80047b0:	e015      	b.n	80047de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80047b2:	4b26      	ldr	r3, [pc, #152]	; (800484c <HAL_RCC_OscConfig+0x270>)
 80047b4:	2200      	movs	r2, #0
 80047b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80047b8:	f7fe fbda 	bl	8002f70 <HAL_GetTick>
 80047bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047be:	e008      	b.n	80047d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80047c0:	f7fe fbd6 	bl	8002f70 <HAL_GetTick>
 80047c4:	4602      	mov	r2, r0
 80047c6:	693b      	ldr	r3, [r7, #16]
 80047c8:	1ad3      	subs	r3, r2, r3
 80047ca:	2b02      	cmp	r3, #2
 80047cc:	d901      	bls.n	80047d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80047ce:	2303      	movs	r3, #3
 80047d0:	e180      	b.n	8004ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80047d2:	4b1d      	ldr	r3, [pc, #116]	; (8004848 <HAL_RCC_OscConfig+0x26c>)
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f003 0302 	and.w	r3, r3, #2
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1f0      	bne.n	80047c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	f003 0308 	and.w	r3, r3, #8
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d03a      	beq.n	8004860 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	699b      	ldr	r3, [r3, #24]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	d019      	beq.n	8004826 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80047f2:	4b17      	ldr	r3, [pc, #92]	; (8004850 <HAL_RCC_OscConfig+0x274>)
 80047f4:	2201      	movs	r2, #1
 80047f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80047f8:	f7fe fbba 	bl	8002f70 <HAL_GetTick>
 80047fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80047fe:	e008      	b.n	8004812 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004800:	f7fe fbb6 	bl	8002f70 <HAL_GetTick>
 8004804:	4602      	mov	r2, r0
 8004806:	693b      	ldr	r3, [r7, #16]
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	2b02      	cmp	r3, #2
 800480c:	d901      	bls.n	8004812 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800480e:	2303      	movs	r3, #3
 8004810:	e160      	b.n	8004ad4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004812:	4b0d      	ldr	r3, [pc, #52]	; (8004848 <HAL_RCC_OscConfig+0x26c>)
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	f003 0302 	and.w	r3, r3, #2
 800481a:	2b00      	cmp	r3, #0
 800481c:	d0f0      	beq.n	8004800 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800481e:	2001      	movs	r0, #1
 8004820:	f000 face 	bl	8004dc0 <RCC_Delay>
 8004824:	e01c      	b.n	8004860 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004826:	4b0a      	ldr	r3, [pc, #40]	; (8004850 <HAL_RCC_OscConfig+0x274>)
 8004828:	2200      	movs	r2, #0
 800482a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800482c:	f7fe fba0 	bl	8002f70 <HAL_GetTick>
 8004830:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004832:	e00f      	b.n	8004854 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004834:	f7fe fb9c 	bl	8002f70 <HAL_GetTick>
 8004838:	4602      	mov	r2, r0
 800483a:	693b      	ldr	r3, [r7, #16]
 800483c:	1ad3      	subs	r3, r2, r3
 800483e:	2b02      	cmp	r3, #2
 8004840:	d908      	bls.n	8004854 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004842:	2303      	movs	r3, #3
 8004844:	e146      	b.n	8004ad4 <HAL_RCC_OscConfig+0x4f8>
 8004846:	bf00      	nop
 8004848:	40021000 	.word	0x40021000
 800484c:	42420000 	.word	0x42420000
 8004850:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004854:	4b92      	ldr	r3, [pc, #584]	; (8004aa0 <HAL_RCC_OscConfig+0x4c4>)
 8004856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004858:	f003 0302 	and.w	r3, r3, #2
 800485c:	2b00      	cmp	r3, #0
 800485e:	d1e9      	bne.n	8004834 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0304 	and.w	r3, r3, #4
 8004868:	2b00      	cmp	r3, #0
 800486a:	f000 80a6 	beq.w	80049ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800486e:	2300      	movs	r3, #0
 8004870:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004872:	4b8b      	ldr	r3, [pc, #556]	; (8004aa0 <HAL_RCC_OscConfig+0x4c4>)
 8004874:	69db      	ldr	r3, [r3, #28]
 8004876:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10d      	bne.n	800489a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800487e:	4b88      	ldr	r3, [pc, #544]	; (8004aa0 <HAL_RCC_OscConfig+0x4c4>)
 8004880:	69db      	ldr	r3, [r3, #28]
 8004882:	4a87      	ldr	r2, [pc, #540]	; (8004aa0 <HAL_RCC_OscConfig+0x4c4>)
 8004884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004888:	61d3      	str	r3, [r2, #28]
 800488a:	4b85      	ldr	r3, [pc, #532]	; (8004aa0 <HAL_RCC_OscConfig+0x4c4>)
 800488c:	69db      	ldr	r3, [r3, #28]
 800488e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004892:	60bb      	str	r3, [r7, #8]
 8004894:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004896:	2301      	movs	r3, #1
 8004898:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800489a:	4b82      	ldr	r3, [pc, #520]	; (8004aa4 <HAL_RCC_OscConfig+0x4c8>)
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d118      	bne.n	80048d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80048a6:	4b7f      	ldr	r3, [pc, #508]	; (8004aa4 <HAL_RCC_OscConfig+0x4c8>)
 80048a8:	681b      	ldr	r3, [r3, #0]
 80048aa:	4a7e      	ldr	r2, [pc, #504]	; (8004aa4 <HAL_RCC_OscConfig+0x4c8>)
 80048ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80048b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80048b2:	f7fe fb5d 	bl	8002f70 <HAL_GetTick>
 80048b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048b8:	e008      	b.n	80048cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80048ba:	f7fe fb59 	bl	8002f70 <HAL_GetTick>
 80048be:	4602      	mov	r2, r0
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	1ad3      	subs	r3, r2, r3
 80048c4:	2b64      	cmp	r3, #100	; 0x64
 80048c6:	d901      	bls.n	80048cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80048c8:	2303      	movs	r3, #3
 80048ca:	e103      	b.n	8004ad4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80048cc:	4b75      	ldr	r3, [pc, #468]	; (8004aa4 <HAL_RCC_OscConfig+0x4c8>)
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d0f0      	beq.n	80048ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	2b01      	cmp	r3, #1
 80048de:	d106      	bne.n	80048ee <HAL_RCC_OscConfig+0x312>
 80048e0:	4b6f      	ldr	r3, [pc, #444]	; (8004aa0 <HAL_RCC_OscConfig+0x4c4>)
 80048e2:	6a1b      	ldr	r3, [r3, #32]
 80048e4:	4a6e      	ldr	r2, [pc, #440]	; (8004aa0 <HAL_RCC_OscConfig+0x4c4>)
 80048e6:	f043 0301 	orr.w	r3, r3, #1
 80048ea:	6213      	str	r3, [r2, #32]
 80048ec:	e02d      	b.n	800494a <HAL_RCC_OscConfig+0x36e>
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	68db      	ldr	r3, [r3, #12]
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d10c      	bne.n	8004910 <HAL_RCC_OscConfig+0x334>
 80048f6:	4b6a      	ldr	r3, [pc, #424]	; (8004aa0 <HAL_RCC_OscConfig+0x4c4>)
 80048f8:	6a1b      	ldr	r3, [r3, #32]
 80048fa:	4a69      	ldr	r2, [pc, #420]	; (8004aa0 <HAL_RCC_OscConfig+0x4c4>)
 80048fc:	f023 0301 	bic.w	r3, r3, #1
 8004900:	6213      	str	r3, [r2, #32]
 8004902:	4b67      	ldr	r3, [pc, #412]	; (8004aa0 <HAL_RCC_OscConfig+0x4c4>)
 8004904:	6a1b      	ldr	r3, [r3, #32]
 8004906:	4a66      	ldr	r2, [pc, #408]	; (8004aa0 <HAL_RCC_OscConfig+0x4c4>)
 8004908:	f023 0304 	bic.w	r3, r3, #4
 800490c:	6213      	str	r3, [r2, #32]
 800490e:	e01c      	b.n	800494a <HAL_RCC_OscConfig+0x36e>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	2b05      	cmp	r3, #5
 8004916:	d10c      	bne.n	8004932 <HAL_RCC_OscConfig+0x356>
 8004918:	4b61      	ldr	r3, [pc, #388]	; (8004aa0 <HAL_RCC_OscConfig+0x4c4>)
 800491a:	6a1b      	ldr	r3, [r3, #32]
 800491c:	4a60      	ldr	r2, [pc, #384]	; (8004aa0 <HAL_RCC_OscConfig+0x4c4>)
 800491e:	f043 0304 	orr.w	r3, r3, #4
 8004922:	6213      	str	r3, [r2, #32]
 8004924:	4b5e      	ldr	r3, [pc, #376]	; (8004aa0 <HAL_RCC_OscConfig+0x4c4>)
 8004926:	6a1b      	ldr	r3, [r3, #32]
 8004928:	4a5d      	ldr	r2, [pc, #372]	; (8004aa0 <HAL_RCC_OscConfig+0x4c4>)
 800492a:	f043 0301 	orr.w	r3, r3, #1
 800492e:	6213      	str	r3, [r2, #32]
 8004930:	e00b      	b.n	800494a <HAL_RCC_OscConfig+0x36e>
 8004932:	4b5b      	ldr	r3, [pc, #364]	; (8004aa0 <HAL_RCC_OscConfig+0x4c4>)
 8004934:	6a1b      	ldr	r3, [r3, #32]
 8004936:	4a5a      	ldr	r2, [pc, #360]	; (8004aa0 <HAL_RCC_OscConfig+0x4c4>)
 8004938:	f023 0301 	bic.w	r3, r3, #1
 800493c:	6213      	str	r3, [r2, #32]
 800493e:	4b58      	ldr	r3, [pc, #352]	; (8004aa0 <HAL_RCC_OscConfig+0x4c4>)
 8004940:	6a1b      	ldr	r3, [r3, #32]
 8004942:	4a57      	ldr	r2, [pc, #348]	; (8004aa0 <HAL_RCC_OscConfig+0x4c4>)
 8004944:	f023 0304 	bic.w	r3, r3, #4
 8004948:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	68db      	ldr	r3, [r3, #12]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d015      	beq.n	800497e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004952:	f7fe fb0d 	bl	8002f70 <HAL_GetTick>
 8004956:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004958:	e00a      	b.n	8004970 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800495a:	f7fe fb09 	bl	8002f70 <HAL_GetTick>
 800495e:	4602      	mov	r2, r0
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	1ad3      	subs	r3, r2, r3
 8004964:	f241 3288 	movw	r2, #5000	; 0x1388
 8004968:	4293      	cmp	r3, r2
 800496a:	d901      	bls.n	8004970 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800496c:	2303      	movs	r3, #3
 800496e:	e0b1      	b.n	8004ad4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004970:	4b4b      	ldr	r3, [pc, #300]	; (8004aa0 <HAL_RCC_OscConfig+0x4c4>)
 8004972:	6a1b      	ldr	r3, [r3, #32]
 8004974:	f003 0302 	and.w	r3, r3, #2
 8004978:	2b00      	cmp	r3, #0
 800497a:	d0ee      	beq.n	800495a <HAL_RCC_OscConfig+0x37e>
 800497c:	e014      	b.n	80049a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800497e:	f7fe faf7 	bl	8002f70 <HAL_GetTick>
 8004982:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004984:	e00a      	b.n	800499c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004986:	f7fe faf3 	bl	8002f70 <HAL_GetTick>
 800498a:	4602      	mov	r2, r0
 800498c:	693b      	ldr	r3, [r7, #16]
 800498e:	1ad3      	subs	r3, r2, r3
 8004990:	f241 3288 	movw	r2, #5000	; 0x1388
 8004994:	4293      	cmp	r3, r2
 8004996:	d901      	bls.n	800499c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e09b      	b.n	8004ad4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800499c:	4b40      	ldr	r3, [pc, #256]	; (8004aa0 <HAL_RCC_OscConfig+0x4c4>)
 800499e:	6a1b      	ldr	r3, [r3, #32]
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d1ee      	bne.n	8004986 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80049a8:	7dfb      	ldrb	r3, [r7, #23]
 80049aa:	2b01      	cmp	r3, #1
 80049ac:	d105      	bne.n	80049ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80049ae:	4b3c      	ldr	r3, [pc, #240]	; (8004aa0 <HAL_RCC_OscConfig+0x4c4>)
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	4a3b      	ldr	r2, [pc, #236]	; (8004aa0 <HAL_RCC_OscConfig+0x4c4>)
 80049b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80049b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	69db      	ldr	r3, [r3, #28]
 80049be:	2b00      	cmp	r3, #0
 80049c0:	f000 8087 	beq.w	8004ad2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80049c4:	4b36      	ldr	r3, [pc, #216]	; (8004aa0 <HAL_RCC_OscConfig+0x4c4>)
 80049c6:	685b      	ldr	r3, [r3, #4]
 80049c8:	f003 030c 	and.w	r3, r3, #12
 80049cc:	2b08      	cmp	r3, #8
 80049ce:	d061      	beq.n	8004a94 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	69db      	ldr	r3, [r3, #28]
 80049d4:	2b02      	cmp	r3, #2
 80049d6:	d146      	bne.n	8004a66 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80049d8:	4b33      	ldr	r3, [pc, #204]	; (8004aa8 <HAL_RCC_OscConfig+0x4cc>)
 80049da:	2200      	movs	r2, #0
 80049dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049de:	f7fe fac7 	bl	8002f70 <HAL_GetTick>
 80049e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049e4:	e008      	b.n	80049f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80049e6:	f7fe fac3 	bl	8002f70 <HAL_GetTick>
 80049ea:	4602      	mov	r2, r0
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	1ad3      	subs	r3, r2, r3
 80049f0:	2b02      	cmp	r3, #2
 80049f2:	d901      	bls.n	80049f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80049f4:	2303      	movs	r3, #3
 80049f6:	e06d      	b.n	8004ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80049f8:	4b29      	ldr	r3, [pc, #164]	; (8004aa0 <HAL_RCC_OscConfig+0x4c4>)
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d1f0      	bne.n	80049e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a1b      	ldr	r3, [r3, #32]
 8004a08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004a0c:	d108      	bne.n	8004a20 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8004a0e:	4b24      	ldr	r3, [pc, #144]	; (8004aa0 <HAL_RCC_OscConfig+0x4c4>)
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	689b      	ldr	r3, [r3, #8]
 8004a1a:	4921      	ldr	r1, [pc, #132]	; (8004aa0 <HAL_RCC_OscConfig+0x4c4>)
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004a20:	4b1f      	ldr	r3, [pc, #124]	; (8004aa0 <HAL_RCC_OscConfig+0x4c4>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	6a19      	ldr	r1, [r3, #32]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a30:	430b      	orrs	r3, r1
 8004a32:	491b      	ldr	r1, [pc, #108]	; (8004aa0 <HAL_RCC_OscConfig+0x4c4>)
 8004a34:	4313      	orrs	r3, r2
 8004a36:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004a38:	4b1b      	ldr	r3, [pc, #108]	; (8004aa8 <HAL_RCC_OscConfig+0x4cc>)
 8004a3a:	2201      	movs	r2, #1
 8004a3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a3e:	f7fe fa97 	bl	8002f70 <HAL_GetTick>
 8004a42:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a44:	e008      	b.n	8004a58 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a46:	f7fe fa93 	bl	8002f70 <HAL_GetTick>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	1ad3      	subs	r3, r2, r3
 8004a50:	2b02      	cmp	r3, #2
 8004a52:	d901      	bls.n	8004a58 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004a54:	2303      	movs	r3, #3
 8004a56:	e03d      	b.n	8004ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004a58:	4b11      	ldr	r3, [pc, #68]	; (8004aa0 <HAL_RCC_OscConfig+0x4c4>)
 8004a5a:	681b      	ldr	r3, [r3, #0]
 8004a5c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d0f0      	beq.n	8004a46 <HAL_RCC_OscConfig+0x46a>
 8004a64:	e035      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004a66:	4b10      	ldr	r3, [pc, #64]	; (8004aa8 <HAL_RCC_OscConfig+0x4cc>)
 8004a68:	2200      	movs	r2, #0
 8004a6a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a6c:	f7fe fa80 	bl	8002f70 <HAL_GetTick>
 8004a70:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a72:	e008      	b.n	8004a86 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004a74:	f7fe fa7c 	bl	8002f70 <HAL_GetTick>
 8004a78:	4602      	mov	r2, r0
 8004a7a:	693b      	ldr	r3, [r7, #16]
 8004a7c:	1ad3      	subs	r3, r2, r3
 8004a7e:	2b02      	cmp	r3, #2
 8004a80:	d901      	bls.n	8004a86 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004a82:	2303      	movs	r3, #3
 8004a84:	e026      	b.n	8004ad4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004a86:	4b06      	ldr	r3, [pc, #24]	; (8004aa0 <HAL_RCC_OscConfig+0x4c4>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d1f0      	bne.n	8004a74 <HAL_RCC_OscConfig+0x498>
 8004a92:	e01e      	b.n	8004ad2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	69db      	ldr	r3, [r3, #28]
 8004a98:	2b01      	cmp	r3, #1
 8004a9a:	d107      	bne.n	8004aac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8004a9c:	2301      	movs	r3, #1
 8004a9e:	e019      	b.n	8004ad4 <HAL_RCC_OscConfig+0x4f8>
 8004aa0:	40021000 	.word	0x40021000
 8004aa4:	40007000 	.word	0x40007000
 8004aa8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8004aac:	4b0b      	ldr	r3, [pc, #44]	; (8004adc <HAL_RCC_OscConfig+0x500>)
 8004aae:	685b      	ldr	r3, [r3, #4]
 8004ab0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6a1b      	ldr	r3, [r3, #32]
 8004abc:	429a      	cmp	r2, r3
 8004abe:	d106      	bne.n	8004ace <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004aca:	429a      	cmp	r2, r3
 8004acc:	d001      	beq.n	8004ad2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8004ace:	2301      	movs	r3, #1
 8004ad0:	e000      	b.n	8004ad4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8004ad2:	2300      	movs	r3, #0
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	3718      	adds	r7, #24
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	bd80      	pop	{r7, pc}
 8004adc:	40021000 	.word	0x40021000

08004ae0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004ae0:	b580      	push	{r7, lr}
 8004ae2:	b084      	sub	sp, #16
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	6078      	str	r0, [r7, #4]
 8004ae8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d101      	bne.n	8004af4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004af0:	2301      	movs	r3, #1
 8004af2:	e0d0      	b.n	8004c96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004af4:	4b6a      	ldr	r3, [pc, #424]	; (8004ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	f003 0307 	and.w	r3, r3, #7
 8004afc:	683a      	ldr	r2, [r7, #0]
 8004afe:	429a      	cmp	r2, r3
 8004b00:	d910      	bls.n	8004b24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b02:	4b67      	ldr	r3, [pc, #412]	; (8004ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f023 0207 	bic.w	r2, r3, #7
 8004b0a:	4965      	ldr	r1, [pc, #404]	; (8004ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b0c:	683b      	ldr	r3, [r7, #0]
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b12:	4b63      	ldr	r3, [pc, #396]	; (8004ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f003 0307 	and.w	r3, r3, #7
 8004b1a:	683a      	ldr	r2, [r7, #0]
 8004b1c:	429a      	cmp	r2, r3
 8004b1e:	d001      	beq.n	8004b24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004b20:	2301      	movs	r3, #1
 8004b22:	e0b8      	b.n	8004c96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f003 0302 	and.w	r3, r3, #2
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d020      	beq.n	8004b72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0304 	and.w	r3, r3, #4
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d005      	beq.n	8004b48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004b3c:	4b59      	ldr	r3, [pc, #356]	; (8004ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	4a58      	ldr	r2, [pc, #352]	; (8004ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004b46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0308 	and.w	r3, r3, #8
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d005      	beq.n	8004b60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004b54:	4b53      	ldr	r3, [pc, #332]	; (8004ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b56:	685b      	ldr	r3, [r3, #4]
 8004b58:	4a52      	ldr	r2, [pc, #328]	; (8004ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b5a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004b5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004b60:	4b50      	ldr	r3, [pc, #320]	; (8004ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	689b      	ldr	r3, [r3, #8]
 8004b6c:	494d      	ldr	r1, [pc, #308]	; (8004ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b6e:	4313      	orrs	r3, r2
 8004b70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d040      	beq.n	8004c00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	685b      	ldr	r3, [r3, #4]
 8004b82:	2b01      	cmp	r3, #1
 8004b84:	d107      	bne.n	8004b96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004b86:	4b47      	ldr	r3, [pc, #284]	; (8004ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d115      	bne.n	8004bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004b92:	2301      	movs	r3, #1
 8004b94:	e07f      	b.n	8004c96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	685b      	ldr	r3, [r3, #4]
 8004b9a:	2b02      	cmp	r3, #2
 8004b9c:	d107      	bne.n	8004bae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004b9e:	4b41      	ldr	r3, [pc, #260]	; (8004ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d109      	bne.n	8004bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004baa:	2301      	movs	r3, #1
 8004bac:	e073      	b.n	8004c96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004bae:	4b3d      	ldr	r3, [pc, #244]	; (8004ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8004bb0:	681b      	ldr	r3, [r3, #0]
 8004bb2:	f003 0302 	and.w	r3, r3, #2
 8004bb6:	2b00      	cmp	r3, #0
 8004bb8:	d101      	bne.n	8004bbe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004bba:	2301      	movs	r3, #1
 8004bbc:	e06b      	b.n	8004c96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004bbe:	4b39      	ldr	r3, [pc, #228]	; (8004ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8004bc0:	685b      	ldr	r3, [r3, #4]
 8004bc2:	f023 0203 	bic.w	r2, r3, #3
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	4936      	ldr	r1, [pc, #216]	; (8004ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004bd0:	f7fe f9ce 	bl	8002f70 <HAL_GetTick>
 8004bd4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bd6:	e00a      	b.n	8004bee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004bd8:	f7fe f9ca 	bl	8002f70 <HAL_GetTick>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	1ad3      	subs	r3, r2, r3
 8004be2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004be6:	4293      	cmp	r3, r2
 8004be8:	d901      	bls.n	8004bee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004bea:	2303      	movs	r3, #3
 8004bec:	e053      	b.n	8004c96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004bee:	4b2d      	ldr	r3, [pc, #180]	; (8004ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f003 020c 	and.w	r2, r3, #12
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	685b      	ldr	r3, [r3, #4]
 8004bfa:	009b      	lsls	r3, r3, #2
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	d1eb      	bne.n	8004bd8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004c00:	4b27      	ldr	r3, [pc, #156]	; (8004ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f003 0307 	and.w	r3, r3, #7
 8004c08:	683a      	ldr	r2, [r7, #0]
 8004c0a:	429a      	cmp	r2, r3
 8004c0c:	d210      	bcs.n	8004c30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004c0e:	4b24      	ldr	r3, [pc, #144]	; (8004ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f023 0207 	bic.w	r2, r3, #7
 8004c16:	4922      	ldr	r1, [pc, #136]	; (8004ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	4313      	orrs	r3, r2
 8004c1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004c1e:	4b20      	ldr	r3, [pc, #128]	; (8004ca0 <HAL_RCC_ClockConfig+0x1c0>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f003 0307 	and.w	r3, r3, #7
 8004c26:	683a      	ldr	r2, [r7, #0]
 8004c28:	429a      	cmp	r2, r3
 8004c2a:	d001      	beq.n	8004c30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004c2c:	2301      	movs	r3, #1
 8004c2e:	e032      	b.n	8004c96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f003 0304 	and.w	r3, r3, #4
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d008      	beq.n	8004c4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004c3c:	4b19      	ldr	r3, [pc, #100]	; (8004ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	68db      	ldr	r3, [r3, #12]
 8004c48:	4916      	ldr	r1, [pc, #88]	; (8004ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c4a:	4313      	orrs	r3, r2
 8004c4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f003 0308 	and.w	r3, r3, #8
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d009      	beq.n	8004c6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004c5a:	4b12      	ldr	r3, [pc, #72]	; (8004ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c5c:	685b      	ldr	r3, [r3, #4]
 8004c5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	00db      	lsls	r3, r3, #3
 8004c68:	490e      	ldr	r1, [pc, #56]	; (8004ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c6a:	4313      	orrs	r3, r2
 8004c6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004c6e:	f000 f821 	bl	8004cb4 <HAL_RCC_GetSysClockFreq>
 8004c72:	4602      	mov	r2, r0
 8004c74:	4b0b      	ldr	r3, [pc, #44]	; (8004ca4 <HAL_RCC_ClockConfig+0x1c4>)
 8004c76:	685b      	ldr	r3, [r3, #4]
 8004c78:	091b      	lsrs	r3, r3, #4
 8004c7a:	f003 030f 	and.w	r3, r3, #15
 8004c7e:	490a      	ldr	r1, [pc, #40]	; (8004ca8 <HAL_RCC_ClockConfig+0x1c8>)
 8004c80:	5ccb      	ldrb	r3, [r1, r3]
 8004c82:	fa22 f303 	lsr.w	r3, r2, r3
 8004c86:	4a09      	ldr	r2, [pc, #36]	; (8004cac <HAL_RCC_ClockConfig+0x1cc>)
 8004c88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004c8a:	4b09      	ldr	r3, [pc, #36]	; (8004cb0 <HAL_RCC_ClockConfig+0x1d0>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	4618      	mov	r0, r3
 8004c90:	f7fe f92c 	bl	8002eec <HAL_InitTick>

  return HAL_OK;
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3710      	adds	r7, #16
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	40022000 	.word	0x40022000
 8004ca4:	40021000 	.word	0x40021000
 8004ca8:	0800786c 	.word	0x0800786c
 8004cac:	20000204 	.word	0x20000204
 8004cb0:	20000208 	.word	0x20000208

08004cb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004cb4:	b480      	push	{r7}
 8004cb6:	b087      	sub	sp, #28
 8004cb8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004cba:	2300      	movs	r3, #0
 8004cbc:	60fb      	str	r3, [r7, #12]
 8004cbe:	2300      	movs	r3, #0
 8004cc0:	60bb      	str	r3, [r7, #8]
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	617b      	str	r3, [r7, #20]
 8004cc6:	2300      	movs	r3, #0
 8004cc8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004cca:	2300      	movs	r3, #0
 8004ccc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004cce:	4b1e      	ldr	r3, [pc, #120]	; (8004d48 <HAL_RCC_GetSysClockFreq+0x94>)
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	f003 030c 	and.w	r3, r3, #12
 8004cda:	2b04      	cmp	r3, #4
 8004cdc:	d002      	beq.n	8004ce4 <HAL_RCC_GetSysClockFreq+0x30>
 8004cde:	2b08      	cmp	r3, #8
 8004ce0:	d003      	beq.n	8004cea <HAL_RCC_GetSysClockFreq+0x36>
 8004ce2:	e027      	b.n	8004d34 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004ce4:	4b19      	ldr	r3, [pc, #100]	; (8004d4c <HAL_RCC_GetSysClockFreq+0x98>)
 8004ce6:	613b      	str	r3, [r7, #16]
      break;
 8004ce8:	e027      	b.n	8004d3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	0c9b      	lsrs	r3, r3, #18
 8004cee:	f003 030f 	and.w	r3, r3, #15
 8004cf2:	4a17      	ldr	r2, [pc, #92]	; (8004d50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004cf4:	5cd3      	ldrb	r3, [r2, r3]
 8004cf6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d010      	beq.n	8004d24 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004d02:	4b11      	ldr	r3, [pc, #68]	; (8004d48 <HAL_RCC_GetSysClockFreq+0x94>)
 8004d04:	685b      	ldr	r3, [r3, #4]
 8004d06:	0c5b      	lsrs	r3, r3, #17
 8004d08:	f003 0301 	and.w	r3, r3, #1
 8004d0c:	4a11      	ldr	r2, [pc, #68]	; (8004d54 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004d0e:	5cd3      	ldrb	r3, [r2, r3]
 8004d10:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	4a0d      	ldr	r2, [pc, #52]	; (8004d4c <HAL_RCC_GetSysClockFreq+0x98>)
 8004d16:	fb03 f202 	mul.w	r2, r3, r2
 8004d1a:	68bb      	ldr	r3, [r7, #8]
 8004d1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d20:	617b      	str	r3, [r7, #20]
 8004d22:	e004      	b.n	8004d2e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	4a0c      	ldr	r2, [pc, #48]	; (8004d58 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004d28:	fb02 f303 	mul.w	r3, r2, r3
 8004d2c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004d2e:	697b      	ldr	r3, [r7, #20]
 8004d30:	613b      	str	r3, [r7, #16]
      break;
 8004d32:	e002      	b.n	8004d3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004d34:	4b05      	ldr	r3, [pc, #20]	; (8004d4c <HAL_RCC_GetSysClockFreq+0x98>)
 8004d36:	613b      	str	r3, [r7, #16]
      break;
 8004d38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004d3a:	693b      	ldr	r3, [r7, #16]
}
 8004d3c:	4618      	mov	r0, r3
 8004d3e:	371c      	adds	r7, #28
 8004d40:	46bd      	mov	sp, r7
 8004d42:	bc80      	pop	{r7}
 8004d44:	4770      	bx	lr
 8004d46:	bf00      	nop
 8004d48:	40021000 	.word	0x40021000
 8004d4c:	007a1200 	.word	0x007a1200
 8004d50:	08007884 	.word	0x08007884
 8004d54:	08007894 	.word	0x08007894
 8004d58:	003d0900 	.word	0x003d0900

08004d5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004d5c:	b480      	push	{r7}
 8004d5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004d60:	4b02      	ldr	r3, [pc, #8]	; (8004d6c <HAL_RCC_GetHCLKFreq+0x10>)
 8004d62:	681b      	ldr	r3, [r3, #0]
}
 8004d64:	4618      	mov	r0, r3
 8004d66:	46bd      	mov	sp, r7
 8004d68:	bc80      	pop	{r7}
 8004d6a:	4770      	bx	lr
 8004d6c:	20000204 	.word	0x20000204

08004d70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004d74:	f7ff fff2 	bl	8004d5c <HAL_RCC_GetHCLKFreq>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	4b05      	ldr	r3, [pc, #20]	; (8004d90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004d7c:	685b      	ldr	r3, [r3, #4]
 8004d7e:	0a1b      	lsrs	r3, r3, #8
 8004d80:	f003 0307 	and.w	r3, r3, #7
 8004d84:	4903      	ldr	r1, [pc, #12]	; (8004d94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004d86:	5ccb      	ldrb	r3, [r1, r3]
 8004d88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004d8c:	4618      	mov	r0, r3
 8004d8e:	bd80      	pop	{r7, pc}
 8004d90:	40021000 	.word	0x40021000
 8004d94:	0800787c 	.word	0x0800787c

08004d98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004d98:	b580      	push	{r7, lr}
 8004d9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004d9c:	f7ff ffde 	bl	8004d5c <HAL_RCC_GetHCLKFreq>
 8004da0:	4602      	mov	r2, r0
 8004da2:	4b05      	ldr	r3, [pc, #20]	; (8004db8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	0adb      	lsrs	r3, r3, #11
 8004da8:	f003 0307 	and.w	r3, r3, #7
 8004dac:	4903      	ldr	r1, [pc, #12]	; (8004dbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004dae:	5ccb      	ldrb	r3, [r1, r3]
 8004db0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004db4:	4618      	mov	r0, r3
 8004db6:	bd80      	pop	{r7, pc}
 8004db8:	40021000 	.word	0x40021000
 8004dbc:	0800787c 	.word	0x0800787c

08004dc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b085      	sub	sp, #20
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004dc8:	4b0a      	ldr	r3, [pc, #40]	; (8004df4 <RCC_Delay+0x34>)
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	4a0a      	ldr	r2, [pc, #40]	; (8004df8 <RCC_Delay+0x38>)
 8004dce:	fba2 2303 	umull	r2, r3, r2, r3
 8004dd2:	0a5b      	lsrs	r3, r3, #9
 8004dd4:	687a      	ldr	r2, [r7, #4]
 8004dd6:	fb02 f303 	mul.w	r3, r2, r3
 8004dda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004ddc:	bf00      	nop
  }
  while (Delay --);
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	1e5a      	subs	r2, r3, #1
 8004de2:	60fa      	str	r2, [r7, #12]
 8004de4:	2b00      	cmp	r3, #0
 8004de6:	d1f9      	bne.n	8004ddc <RCC_Delay+0x1c>
}
 8004de8:	bf00      	nop
 8004dea:	bf00      	nop
 8004dec:	3714      	adds	r7, #20
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bc80      	pop	{r7}
 8004df2:	4770      	bx	lr
 8004df4:	20000204 	.word	0x20000204
 8004df8:	10624dd3 	.word	0x10624dd3

08004dfc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b086      	sub	sp, #24
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004e04:	2300      	movs	r3, #0
 8004e06:	613b      	str	r3, [r7, #16]
 8004e08:	2300      	movs	r3, #0
 8004e0a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f003 0301 	and.w	r3, r3, #1
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d07d      	beq.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004e1c:	4b4f      	ldr	r3, [pc, #316]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e1e:	69db      	ldr	r3, [r3, #28]
 8004e20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d10d      	bne.n	8004e44 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004e28:	4b4c      	ldr	r3, [pc, #304]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e2a:	69db      	ldr	r3, [r3, #28]
 8004e2c:	4a4b      	ldr	r2, [pc, #300]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004e32:	61d3      	str	r3, [r2, #28]
 8004e34:	4b49      	ldr	r3, [pc, #292]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e36:	69db      	ldr	r3, [r3, #28]
 8004e38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004e3c:	60bb      	str	r3, [r7, #8]
 8004e3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004e40:	2301      	movs	r3, #1
 8004e42:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e44:	4b46      	ldr	r3, [pc, #280]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e4c:	2b00      	cmp	r3, #0
 8004e4e:	d118      	bne.n	8004e82 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004e50:	4b43      	ldr	r3, [pc, #268]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	4a42      	ldr	r2, [pc, #264]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004e5c:	f7fe f888 	bl	8002f70 <HAL_GetTick>
 8004e60:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e62:	e008      	b.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e64:	f7fe f884 	bl	8002f70 <HAL_GetTick>
 8004e68:	4602      	mov	r2, r0
 8004e6a:	693b      	ldr	r3, [r7, #16]
 8004e6c:	1ad3      	subs	r3, r2, r3
 8004e6e:	2b64      	cmp	r3, #100	; 0x64
 8004e70:	d901      	bls.n	8004e76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004e72:	2303      	movs	r3, #3
 8004e74:	e06d      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e76:	4b3a      	ldr	r3, [pc, #232]	; (8004f60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d0f0      	beq.n	8004e64 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004e82:	4b36      	ldr	r3, [pc, #216]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e84:	6a1b      	ldr	r3, [r3, #32]
 8004e86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e8a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d02e      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	685b      	ldr	r3, [r3, #4]
 8004e96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e9a:	68fa      	ldr	r2, [r7, #12]
 8004e9c:	429a      	cmp	r2, r3
 8004e9e:	d027      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004ea0:	4b2e      	ldr	r3, [pc, #184]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ea2:	6a1b      	ldr	r3, [r3, #32]
 8004ea4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ea8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004eaa:	4b2e      	ldr	r3, [pc, #184]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004eac:	2201      	movs	r2, #1
 8004eae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004eb0:	4b2c      	ldr	r3, [pc, #176]	; (8004f64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004eb6:	4a29      	ldr	r2, [pc, #164]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d014      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ec6:	f7fe f853 	bl	8002f70 <HAL_GetTick>
 8004eca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ecc:	e00a      	b.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ece:	f7fe f84f 	bl	8002f70 <HAL_GetTick>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	693b      	ldr	r3, [r7, #16]
 8004ed6:	1ad3      	subs	r3, r2, r3
 8004ed8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d901      	bls.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004ee0:	2303      	movs	r3, #3
 8004ee2:	e036      	b.n	8004f52 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004ee4:	4b1d      	ldr	r3, [pc, #116]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ee6:	6a1b      	ldr	r3, [r3, #32]
 8004ee8:	f003 0302 	and.w	r3, r3, #2
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d0ee      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004ef0:	4b1a      	ldr	r3, [pc, #104]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004ef2:	6a1b      	ldr	r3, [r3, #32]
 8004ef4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	4917      	ldr	r1, [pc, #92]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004efe:	4313      	orrs	r3, r2
 8004f00:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004f02:	7dfb      	ldrb	r3, [r7, #23]
 8004f04:	2b01      	cmp	r3, #1
 8004f06:	d105      	bne.n	8004f14 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004f08:	4b14      	ldr	r3, [pc, #80]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f0a:	69db      	ldr	r3, [r3, #28]
 8004f0c:	4a13      	ldr	r2, [pc, #76]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004f12:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f003 0302 	and.w	r3, r3, #2
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d008      	beq.n	8004f32 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004f20:	4b0e      	ldr	r3, [pc, #56]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	689b      	ldr	r3, [r3, #8]
 8004f2c:	490b      	ldr	r1, [pc, #44]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f003 0310 	and.w	r3, r3, #16
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d008      	beq.n	8004f50 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004f3e:	4b07      	ldr	r3, [pc, #28]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f40:	685b      	ldr	r3, [r3, #4]
 8004f42:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	68db      	ldr	r3, [r3, #12]
 8004f4a:	4904      	ldr	r1, [pc, #16]	; (8004f5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004f4c:	4313      	orrs	r3, r2
 8004f4e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004f50:	2300      	movs	r3, #0
}
 8004f52:	4618      	mov	r0, r3
 8004f54:	3718      	adds	r7, #24
 8004f56:	46bd      	mov	sp, r7
 8004f58:	bd80      	pop	{r7, pc}
 8004f5a:	bf00      	nop
 8004f5c:	40021000 	.word	0x40021000
 8004f60:	40007000 	.word	0x40007000
 8004f64:	42420440 	.word	0x42420440

08004f68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004f68:	b580      	push	{r7, lr}
 8004f6a:	b082      	sub	sp, #8
 8004f6c:	af00      	add	r7, sp, #0
 8004f6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e041      	b.n	8004ffe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f80:	b2db      	uxtb	r3, r3
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d106      	bne.n	8004f94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	2200      	movs	r2, #0
 8004f8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f7fd fdf2 	bl	8002b78 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	2202      	movs	r2, #2
 8004f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	3304      	adds	r3, #4
 8004fa4:	4619      	mov	r1, r3
 8004fa6:	4610      	mov	r0, r2
 8004fa8:	f000 f940 	bl	800522c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2201      	movs	r2, #1
 8004fb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	2201      	movs	r2, #1
 8004fc0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	2201      	movs	r2, #1
 8004fd0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2201      	movs	r2, #1
 8004fd8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	2201      	movs	r2, #1
 8004fe0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	2201      	movs	r2, #1
 8004ff0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2201      	movs	r2, #1
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ffc:	2300      	movs	r3, #0
}
 8004ffe:	4618      	mov	r0, r3
 8005000:	3708      	adds	r7, #8
 8005002:	46bd      	mov	sp, r7
 8005004:	bd80      	pop	{r7, pc}
	...

08005008 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8005008:	b480      	push	{r7}
 800500a:	b085      	sub	sp, #20
 800500c:	af00      	add	r7, sp, #0
 800500e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005016:	b2db      	uxtb	r3, r3
 8005018:	2b01      	cmp	r3, #1
 800501a:	d001      	beq.n	8005020 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e032      	b.n	8005086 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	2202      	movs	r2, #2
 8005024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a18      	ldr	r2, [pc, #96]	; (8005090 <HAL_TIM_Base_Start+0x88>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d00e      	beq.n	8005050 <HAL_TIM_Base_Start+0x48>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800503a:	d009      	beq.n	8005050 <HAL_TIM_Base_Start+0x48>
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a14      	ldr	r2, [pc, #80]	; (8005094 <HAL_TIM_Base_Start+0x8c>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d004      	beq.n	8005050 <HAL_TIM_Base_Start+0x48>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	681b      	ldr	r3, [r3, #0]
 800504a:	4a13      	ldr	r2, [pc, #76]	; (8005098 <HAL_TIM_Base_Start+0x90>)
 800504c:	4293      	cmp	r3, r2
 800504e:	d111      	bne.n	8005074 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	689b      	ldr	r3, [r3, #8]
 8005056:	f003 0307 	and.w	r3, r3, #7
 800505a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	2b06      	cmp	r3, #6
 8005060:	d010      	beq.n	8005084 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	681a      	ldr	r2, [r3, #0]
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	f042 0201 	orr.w	r2, r2, #1
 8005070:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005072:	e007      	b.n	8005084 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f042 0201 	orr.w	r2, r2, #1
 8005082:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005084:	2300      	movs	r3, #0
}
 8005086:	4618      	mov	r0, r3
 8005088:	3714      	adds	r7, #20
 800508a:	46bd      	mov	sp, r7
 800508c:	bc80      	pop	{r7}
 800508e:	4770      	bx	lr
 8005090:	40012c00 	.word	0x40012c00
 8005094:	40000400 	.word	0x40000400
 8005098:	40000800 	.word	0x40000800

0800509c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800509c:	b580      	push	{r7, lr}
 800509e:	b084      	sub	sp, #16
 80050a0:	af00      	add	r7, sp, #0
 80050a2:	6078      	str	r0, [r7, #4]
 80050a4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80050a6:	2300      	movs	r3, #0
 80050a8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d101      	bne.n	80050b8 <HAL_TIM_ConfigClockSource+0x1c>
 80050b4:	2302      	movs	r3, #2
 80050b6:	e0b4      	b.n	8005222 <HAL_TIM_ConfigClockSource+0x186>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	2201      	movs	r2, #1
 80050bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	2202      	movs	r2, #2
 80050c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	689b      	ldr	r3, [r3, #8]
 80050ce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80050d6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80050d8:	68bb      	ldr	r3, [r7, #8]
 80050da:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050de:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	68ba      	ldr	r2, [r7, #8]
 80050e6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050f0:	d03e      	beq.n	8005170 <HAL_TIM_ConfigClockSource+0xd4>
 80050f2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050f6:	f200 8087 	bhi.w	8005208 <HAL_TIM_ConfigClockSource+0x16c>
 80050fa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050fe:	f000 8086 	beq.w	800520e <HAL_TIM_ConfigClockSource+0x172>
 8005102:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005106:	d87f      	bhi.n	8005208 <HAL_TIM_ConfigClockSource+0x16c>
 8005108:	2b70      	cmp	r3, #112	; 0x70
 800510a:	d01a      	beq.n	8005142 <HAL_TIM_ConfigClockSource+0xa6>
 800510c:	2b70      	cmp	r3, #112	; 0x70
 800510e:	d87b      	bhi.n	8005208 <HAL_TIM_ConfigClockSource+0x16c>
 8005110:	2b60      	cmp	r3, #96	; 0x60
 8005112:	d050      	beq.n	80051b6 <HAL_TIM_ConfigClockSource+0x11a>
 8005114:	2b60      	cmp	r3, #96	; 0x60
 8005116:	d877      	bhi.n	8005208 <HAL_TIM_ConfigClockSource+0x16c>
 8005118:	2b50      	cmp	r3, #80	; 0x50
 800511a:	d03c      	beq.n	8005196 <HAL_TIM_ConfigClockSource+0xfa>
 800511c:	2b50      	cmp	r3, #80	; 0x50
 800511e:	d873      	bhi.n	8005208 <HAL_TIM_ConfigClockSource+0x16c>
 8005120:	2b40      	cmp	r3, #64	; 0x40
 8005122:	d058      	beq.n	80051d6 <HAL_TIM_ConfigClockSource+0x13a>
 8005124:	2b40      	cmp	r3, #64	; 0x40
 8005126:	d86f      	bhi.n	8005208 <HAL_TIM_ConfigClockSource+0x16c>
 8005128:	2b30      	cmp	r3, #48	; 0x30
 800512a:	d064      	beq.n	80051f6 <HAL_TIM_ConfigClockSource+0x15a>
 800512c:	2b30      	cmp	r3, #48	; 0x30
 800512e:	d86b      	bhi.n	8005208 <HAL_TIM_ConfigClockSource+0x16c>
 8005130:	2b20      	cmp	r3, #32
 8005132:	d060      	beq.n	80051f6 <HAL_TIM_ConfigClockSource+0x15a>
 8005134:	2b20      	cmp	r3, #32
 8005136:	d867      	bhi.n	8005208 <HAL_TIM_ConfigClockSource+0x16c>
 8005138:	2b00      	cmp	r3, #0
 800513a:	d05c      	beq.n	80051f6 <HAL_TIM_ConfigClockSource+0x15a>
 800513c:	2b10      	cmp	r3, #16
 800513e:	d05a      	beq.n	80051f6 <HAL_TIM_ConfigClockSource+0x15a>
 8005140:	e062      	b.n	8005208 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	6818      	ldr	r0, [r3, #0]
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	6899      	ldr	r1, [r3, #8]
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	685a      	ldr	r2, [r3, #4]
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	68db      	ldr	r3, [r3, #12]
 8005152:	f000 f944 	bl	80053de <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	689b      	ldr	r3, [r3, #8]
 800515c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800515e:	68bb      	ldr	r3, [r7, #8]
 8005160:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005164:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	68ba      	ldr	r2, [r7, #8]
 800516c:	609a      	str	r2, [r3, #8]
      break;
 800516e:	e04f      	b.n	8005210 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	6818      	ldr	r0, [r3, #0]
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	6899      	ldr	r1, [r3, #8]
 8005178:	683b      	ldr	r3, [r7, #0]
 800517a:	685a      	ldr	r2, [r3, #4]
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	68db      	ldr	r3, [r3, #12]
 8005180:	f000 f92d 	bl	80053de <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	689a      	ldr	r2, [r3, #8]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005192:	609a      	str	r2, [r3, #8]
      break;
 8005194:	e03c      	b.n	8005210 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	6818      	ldr	r0, [r3, #0]
 800519a:	683b      	ldr	r3, [r7, #0]
 800519c:	6859      	ldr	r1, [r3, #4]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	68db      	ldr	r3, [r3, #12]
 80051a2:	461a      	mov	r2, r3
 80051a4:	f000 f8a4 	bl	80052f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	681b      	ldr	r3, [r3, #0]
 80051ac:	2150      	movs	r1, #80	; 0x50
 80051ae:	4618      	mov	r0, r3
 80051b0:	f000 f8fb 	bl	80053aa <TIM_ITRx_SetConfig>
      break;
 80051b4:	e02c      	b.n	8005210 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6818      	ldr	r0, [r3, #0]
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	6859      	ldr	r1, [r3, #4]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	68db      	ldr	r3, [r3, #12]
 80051c2:	461a      	mov	r2, r3
 80051c4:	f000 f8c2 	bl	800534c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	2160      	movs	r1, #96	; 0x60
 80051ce:	4618      	mov	r0, r3
 80051d0:	f000 f8eb 	bl	80053aa <TIM_ITRx_SetConfig>
      break;
 80051d4:	e01c      	b.n	8005210 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	6818      	ldr	r0, [r3, #0]
 80051da:	683b      	ldr	r3, [r7, #0]
 80051dc:	6859      	ldr	r1, [r3, #4]
 80051de:	683b      	ldr	r3, [r7, #0]
 80051e0:	68db      	ldr	r3, [r3, #12]
 80051e2:	461a      	mov	r2, r3
 80051e4:	f000 f884 	bl	80052f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	2140      	movs	r1, #64	; 0x40
 80051ee:	4618      	mov	r0, r3
 80051f0:	f000 f8db 	bl	80053aa <TIM_ITRx_SetConfig>
      break;
 80051f4:	e00c      	b.n	8005210 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681a      	ldr	r2, [r3, #0]
 80051fa:	683b      	ldr	r3, [r7, #0]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	4619      	mov	r1, r3
 8005200:	4610      	mov	r0, r2
 8005202:	f000 f8d2 	bl	80053aa <TIM_ITRx_SetConfig>
      break;
 8005206:	e003      	b.n	8005210 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005208:	2301      	movs	r3, #1
 800520a:	73fb      	strb	r3, [r7, #15]
      break;
 800520c:	e000      	b.n	8005210 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800520e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2201      	movs	r2, #1
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	2200      	movs	r2, #0
 800521c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005220:	7bfb      	ldrb	r3, [r7, #15]
}
 8005222:	4618      	mov	r0, r3
 8005224:	3710      	adds	r7, #16
 8005226:	46bd      	mov	sp, r7
 8005228:	bd80      	pop	{r7, pc}
	...

0800522c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a29      	ldr	r2, [pc, #164]	; (80052e4 <TIM_Base_SetConfig+0xb8>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d00b      	beq.n	800525c <TIM_Base_SetConfig+0x30>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800524a:	d007      	beq.n	800525c <TIM_Base_SetConfig+0x30>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a26      	ldr	r2, [pc, #152]	; (80052e8 <TIM_Base_SetConfig+0xbc>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d003      	beq.n	800525c <TIM_Base_SetConfig+0x30>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a25      	ldr	r2, [pc, #148]	; (80052ec <TIM_Base_SetConfig+0xc0>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d108      	bne.n	800526e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005262:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005264:	683b      	ldr	r3, [r7, #0]
 8005266:	685b      	ldr	r3, [r3, #4]
 8005268:	68fa      	ldr	r2, [r7, #12]
 800526a:	4313      	orrs	r3, r2
 800526c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	4a1c      	ldr	r2, [pc, #112]	; (80052e4 <TIM_Base_SetConfig+0xb8>)
 8005272:	4293      	cmp	r3, r2
 8005274:	d00b      	beq.n	800528e <TIM_Base_SetConfig+0x62>
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800527c:	d007      	beq.n	800528e <TIM_Base_SetConfig+0x62>
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a19      	ldr	r2, [pc, #100]	; (80052e8 <TIM_Base_SetConfig+0xbc>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d003      	beq.n	800528e <TIM_Base_SetConfig+0x62>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	4a18      	ldr	r2, [pc, #96]	; (80052ec <TIM_Base_SetConfig+0xc0>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d108      	bne.n	80052a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005294:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005296:	683b      	ldr	r3, [r7, #0]
 8005298:	68db      	ldr	r3, [r3, #12]
 800529a:	68fa      	ldr	r2, [r7, #12]
 800529c:	4313      	orrs	r3, r2
 800529e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	4313      	orrs	r3, r2
 80052ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	68fa      	ldr	r2, [r7, #12]
 80052b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80052b4:	683b      	ldr	r3, [r7, #0]
 80052b6:	689a      	ldr	r2, [r3, #8]
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80052bc:	683b      	ldr	r3, [r7, #0]
 80052be:	681a      	ldr	r2, [r3, #0]
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	4a07      	ldr	r2, [pc, #28]	; (80052e4 <TIM_Base_SetConfig+0xb8>)
 80052c8:	4293      	cmp	r3, r2
 80052ca:	d103      	bne.n	80052d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	691a      	ldr	r2, [r3, #16]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	615a      	str	r2, [r3, #20]
}
 80052da:	bf00      	nop
 80052dc:	3714      	adds	r7, #20
 80052de:	46bd      	mov	sp, r7
 80052e0:	bc80      	pop	{r7}
 80052e2:	4770      	bx	lr
 80052e4:	40012c00 	.word	0x40012c00
 80052e8:	40000400 	.word	0x40000400
 80052ec:	40000800 	.word	0x40000800

080052f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b087      	sub	sp, #28
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	60f8      	str	r0, [r7, #12]
 80052f8:	60b9      	str	r1, [r7, #8]
 80052fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	6a1b      	ldr	r3, [r3, #32]
 8005300:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	6a1b      	ldr	r3, [r3, #32]
 8005306:	f023 0201 	bic.w	r2, r3, #1
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	699b      	ldr	r3, [r3, #24]
 8005312:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005314:	693b      	ldr	r3, [r7, #16]
 8005316:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800531a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	011b      	lsls	r3, r3, #4
 8005320:	693a      	ldr	r2, [r7, #16]
 8005322:	4313      	orrs	r3, r2
 8005324:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005326:	697b      	ldr	r3, [r7, #20]
 8005328:	f023 030a 	bic.w	r3, r3, #10
 800532c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800532e:	697a      	ldr	r2, [r7, #20]
 8005330:	68bb      	ldr	r3, [r7, #8]
 8005332:	4313      	orrs	r3, r2
 8005334:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	693a      	ldr	r2, [r7, #16]
 800533a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	697a      	ldr	r2, [r7, #20]
 8005340:	621a      	str	r2, [r3, #32]
}
 8005342:	bf00      	nop
 8005344:	371c      	adds	r7, #28
 8005346:	46bd      	mov	sp, r7
 8005348:	bc80      	pop	{r7}
 800534a:	4770      	bx	lr

0800534c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800534c:	b480      	push	{r7}
 800534e:	b087      	sub	sp, #28
 8005350:	af00      	add	r7, sp, #0
 8005352:	60f8      	str	r0, [r7, #12]
 8005354:	60b9      	str	r1, [r7, #8]
 8005356:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	6a1b      	ldr	r3, [r3, #32]
 800535c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800535e:	68fb      	ldr	r3, [r7, #12]
 8005360:	6a1b      	ldr	r3, [r3, #32]
 8005362:	f023 0210 	bic.w	r2, r3, #16
 8005366:	68fb      	ldr	r3, [r7, #12]
 8005368:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	699b      	ldr	r3, [r3, #24]
 800536e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005370:	693b      	ldr	r3, [r7, #16]
 8005372:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005376:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	031b      	lsls	r3, r3, #12
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	4313      	orrs	r3, r2
 8005380:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005382:	697b      	ldr	r3, [r7, #20]
 8005384:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005388:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	011b      	lsls	r3, r3, #4
 800538e:	697a      	ldr	r2, [r7, #20]
 8005390:	4313      	orrs	r3, r2
 8005392:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	693a      	ldr	r2, [r7, #16]
 8005398:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800539a:	68fb      	ldr	r3, [r7, #12]
 800539c:	697a      	ldr	r2, [r7, #20]
 800539e:	621a      	str	r2, [r3, #32]
}
 80053a0:	bf00      	nop
 80053a2:	371c      	adds	r7, #28
 80053a4:	46bd      	mov	sp, r7
 80053a6:	bc80      	pop	{r7}
 80053a8:	4770      	bx	lr

080053aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80053aa:	b480      	push	{r7}
 80053ac:	b085      	sub	sp, #20
 80053ae:	af00      	add	r7, sp, #0
 80053b0:	6078      	str	r0, [r7, #4]
 80053b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	689b      	ldr	r3, [r3, #8]
 80053b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80053c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80053c2:	683a      	ldr	r2, [r7, #0]
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	4313      	orrs	r3, r2
 80053c8:	f043 0307 	orr.w	r3, r3, #7
 80053cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	68fa      	ldr	r2, [r7, #12]
 80053d2:	609a      	str	r2, [r3, #8]
}
 80053d4:	bf00      	nop
 80053d6:	3714      	adds	r7, #20
 80053d8:	46bd      	mov	sp, r7
 80053da:	bc80      	pop	{r7}
 80053dc:	4770      	bx	lr

080053de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80053de:	b480      	push	{r7}
 80053e0:	b087      	sub	sp, #28
 80053e2:	af00      	add	r7, sp, #0
 80053e4:	60f8      	str	r0, [r7, #12]
 80053e6:	60b9      	str	r1, [r7, #8]
 80053e8:	607a      	str	r2, [r7, #4]
 80053ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80053f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	021a      	lsls	r2, r3, #8
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	431a      	orrs	r2, r3
 8005402:	68bb      	ldr	r3, [r7, #8]
 8005404:	4313      	orrs	r3, r2
 8005406:	697a      	ldr	r2, [r7, #20]
 8005408:	4313      	orrs	r3, r2
 800540a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	609a      	str	r2, [r3, #8]
}
 8005412:	bf00      	nop
 8005414:	371c      	adds	r7, #28
 8005416:	46bd      	mov	sp, r7
 8005418:	bc80      	pop	{r7}
 800541a:	4770      	bx	lr

0800541c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800541c:	b480      	push	{r7}
 800541e:	b085      	sub	sp, #20
 8005420:	af00      	add	r7, sp, #0
 8005422:	6078      	str	r0, [r7, #4]
 8005424:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800542c:	2b01      	cmp	r3, #1
 800542e:	d101      	bne.n	8005434 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005430:	2302      	movs	r3, #2
 8005432:	e046      	b.n	80054c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2201      	movs	r2, #1
 8005438:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2202      	movs	r2, #2
 8005440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800545a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800545c:	683b      	ldr	r3, [r7, #0]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	68fa      	ldr	r2, [r7, #12]
 8005462:	4313      	orrs	r3, r2
 8005464:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	68fa      	ldr	r2, [r7, #12]
 800546c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	4a16      	ldr	r2, [pc, #88]	; (80054cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005474:	4293      	cmp	r3, r2
 8005476:	d00e      	beq.n	8005496 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	681b      	ldr	r3, [r3, #0]
 800547c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005480:	d009      	beq.n	8005496 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	681b      	ldr	r3, [r3, #0]
 8005486:	4a12      	ldr	r2, [pc, #72]	; (80054d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005488:	4293      	cmp	r3, r2
 800548a:	d004      	beq.n	8005496 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	4a10      	ldr	r2, [pc, #64]	; (80054d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005492:	4293      	cmp	r3, r2
 8005494:	d10c      	bne.n	80054b0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800549c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800549e:	683b      	ldr	r3, [r7, #0]
 80054a0:	685b      	ldr	r3, [r3, #4]
 80054a2:	68ba      	ldr	r2, [r7, #8]
 80054a4:	4313      	orrs	r3, r2
 80054a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	68ba      	ldr	r2, [r7, #8]
 80054ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80054c0:	2300      	movs	r3, #0
}
 80054c2:	4618      	mov	r0, r3
 80054c4:	3714      	adds	r7, #20
 80054c6:	46bd      	mov	sp, r7
 80054c8:	bc80      	pop	{r7}
 80054ca:	4770      	bx	lr
 80054cc:	40012c00 	.word	0x40012c00
 80054d0:	40000400 	.word	0x40000400
 80054d4:	40000800 	.word	0x40000800

080054d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b082      	sub	sp, #8
 80054dc:	af00      	add	r7, sp, #0
 80054de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2b00      	cmp	r3, #0
 80054e4:	d101      	bne.n	80054ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80054e6:	2301      	movs	r3, #1
 80054e8:	e042      	b.n	8005570 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80054f0:	b2db      	uxtb	r3, r3
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d106      	bne.n	8005504 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80054f6:	687b      	ldr	r3, [r7, #4]
 80054f8:	2200      	movs	r2, #0
 80054fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80054fe:	6878      	ldr	r0, [r7, #4]
 8005500:	f7fd fb56 	bl	8002bb0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2224      	movs	r2, #36	; 0x24
 8005508:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	68da      	ldr	r2, [r3, #12]
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800551a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800551c:	6878      	ldr	r0, [r7, #4]
 800551e:	f000 fdc5 	bl	80060ac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	691a      	ldr	r2, [r3, #16]
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005530:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	695a      	ldr	r2, [r3, #20]
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005540:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68da      	ldr	r2, [r3, #12]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005550:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	2200      	movs	r2, #0
 8005556:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2220      	movs	r2, #32
 800555c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2220      	movs	r2, #32
 8005564:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	2200      	movs	r2, #0
 800556c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}

08005578 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b08a      	sub	sp, #40	; 0x28
 800557c:	af02      	add	r7, sp, #8
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	603b      	str	r3, [r7, #0]
 8005584:	4613      	mov	r3, r2
 8005586:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005588:	2300      	movs	r3, #0
 800558a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b20      	cmp	r3, #32
 8005596:	d16d      	bne.n	8005674 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d002      	beq.n	80055a4 <HAL_UART_Transmit+0x2c>
 800559e:	88fb      	ldrh	r3, [r7, #6]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d101      	bne.n	80055a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e066      	b.n	8005676 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	2221      	movs	r2, #33	; 0x21
 80055b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80055b6:	f7fd fcdb 	bl	8002f70 <HAL_GetTick>
 80055ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	88fa      	ldrh	r2, [r7, #6]
 80055c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	88fa      	ldrh	r2, [r7, #6]
 80055c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80055d0:	d108      	bne.n	80055e4 <HAL_UART_Transmit+0x6c>
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d104      	bne.n	80055e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80055da:	2300      	movs	r3, #0
 80055dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80055de:	68bb      	ldr	r3, [r7, #8]
 80055e0:	61bb      	str	r3, [r7, #24]
 80055e2:	e003      	b.n	80055ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80055e4:	68bb      	ldr	r3, [r7, #8]
 80055e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80055e8:	2300      	movs	r3, #0
 80055ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80055ec:	e02a      	b.n	8005644 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80055ee:	683b      	ldr	r3, [r7, #0]
 80055f0:	9300      	str	r3, [sp, #0]
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	2200      	movs	r2, #0
 80055f6:	2180      	movs	r1, #128	; 0x80
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f000 fb14 	bl	8005c26 <UART_WaitOnFlagUntilTimeout>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d001      	beq.n	8005608 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005604:	2303      	movs	r3, #3
 8005606:	e036      	b.n	8005676 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005608:	69fb      	ldr	r3, [r7, #28]
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10b      	bne.n	8005626 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800560e:	69bb      	ldr	r3, [r7, #24]
 8005610:	881b      	ldrh	r3, [r3, #0]
 8005612:	461a      	mov	r2, r3
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800561c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800561e:	69bb      	ldr	r3, [r7, #24]
 8005620:	3302      	adds	r3, #2
 8005622:	61bb      	str	r3, [r7, #24]
 8005624:	e007      	b.n	8005636 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005626:	69fb      	ldr	r3, [r7, #28]
 8005628:	781a      	ldrb	r2, [r3, #0]
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005630:	69fb      	ldr	r3, [r7, #28]
 8005632:	3301      	adds	r3, #1
 8005634:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800563a:	b29b      	uxth	r3, r3
 800563c:	3b01      	subs	r3, #1
 800563e:	b29a      	uxth	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005648:	b29b      	uxth	r3, r3
 800564a:	2b00      	cmp	r3, #0
 800564c:	d1cf      	bne.n	80055ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800564e:	683b      	ldr	r3, [r7, #0]
 8005650:	9300      	str	r3, [sp, #0]
 8005652:	697b      	ldr	r3, [r7, #20]
 8005654:	2200      	movs	r2, #0
 8005656:	2140      	movs	r1, #64	; 0x40
 8005658:	68f8      	ldr	r0, [r7, #12]
 800565a:	f000 fae4 	bl	8005c26 <UART_WaitOnFlagUntilTimeout>
 800565e:	4603      	mov	r3, r0
 8005660:	2b00      	cmp	r3, #0
 8005662:	d001      	beq.n	8005668 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005664:	2303      	movs	r3, #3
 8005666:	e006      	b.n	8005676 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	2220      	movs	r2, #32
 800566c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005670:	2300      	movs	r3, #0
 8005672:	e000      	b.n	8005676 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005674:	2302      	movs	r3, #2
  }
}
 8005676:	4618      	mov	r0, r3
 8005678:	3720      	adds	r7, #32
 800567a:	46bd      	mov	sp, r7
 800567c:	bd80      	pop	{r7, pc}

0800567e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800567e:	b580      	push	{r7, lr}
 8005680:	b084      	sub	sp, #16
 8005682:	af00      	add	r7, sp, #0
 8005684:	60f8      	str	r0, [r7, #12]
 8005686:	60b9      	str	r1, [r7, #8]
 8005688:	4613      	mov	r3, r2
 800568a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005692:	b2db      	uxtb	r3, r3
 8005694:	2b20      	cmp	r3, #32
 8005696:	d112      	bne.n	80056be <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005698:	68bb      	ldr	r3, [r7, #8]
 800569a:	2b00      	cmp	r3, #0
 800569c:	d002      	beq.n	80056a4 <HAL_UART_Receive_IT+0x26>
 800569e:	88fb      	ldrh	r3, [r7, #6]
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d101      	bne.n	80056a8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e00b      	b.n	80056c0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	2200      	movs	r2, #0
 80056ac:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80056ae:	88fb      	ldrh	r3, [r7, #6]
 80056b0:	461a      	mov	r2, r3
 80056b2:	68b9      	ldr	r1, [r7, #8]
 80056b4:	68f8      	ldr	r0, [r7, #12]
 80056b6:	f000 fb24 	bl	8005d02 <UART_Start_Receive_IT>
 80056ba:	4603      	mov	r3, r0
 80056bc:	e000      	b.n	80056c0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80056be:	2302      	movs	r3, #2
  }
}
 80056c0:	4618      	mov	r0, r3
 80056c2:	3710      	adds	r7, #16
 80056c4:	46bd      	mov	sp, r7
 80056c6:	bd80      	pop	{r7, pc}

080056c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80056c8:	b580      	push	{r7, lr}
 80056ca:	b0ba      	sub	sp, #232	; 0xe8
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681b      	ldr	r3, [r3, #0]
 80056de:	68db      	ldr	r3, [r3, #12]
 80056e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	681b      	ldr	r3, [r3, #0]
 80056e8:	695b      	ldr	r3, [r3, #20]
 80056ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80056ee:	2300      	movs	r3, #0
 80056f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80056f4:	2300      	movs	r3, #0
 80056f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80056fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056fe:	f003 030f 	and.w	r3, r3, #15
 8005702:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005706:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10f      	bne.n	800572e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800570e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005712:	f003 0320 	and.w	r3, r3, #32
 8005716:	2b00      	cmp	r3, #0
 8005718:	d009      	beq.n	800572e <HAL_UART_IRQHandler+0x66>
 800571a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800571e:	f003 0320 	and.w	r3, r3, #32
 8005722:	2b00      	cmp	r3, #0
 8005724:	d003      	beq.n	800572e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005726:	6878      	ldr	r0, [r7, #4]
 8005728:	f000 fc01 	bl	8005f2e <UART_Receive_IT>
      return;
 800572c:	e25b      	b.n	8005be6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800572e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005732:	2b00      	cmp	r3, #0
 8005734:	f000 80de 	beq.w	80058f4 <HAL_UART_IRQHandler+0x22c>
 8005738:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800573c:	f003 0301 	and.w	r3, r3, #1
 8005740:	2b00      	cmp	r3, #0
 8005742:	d106      	bne.n	8005752 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005744:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005748:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800574c:	2b00      	cmp	r3, #0
 800574e:	f000 80d1 	beq.w	80058f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005752:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005756:	f003 0301 	and.w	r3, r3, #1
 800575a:	2b00      	cmp	r3, #0
 800575c:	d00b      	beq.n	8005776 <HAL_UART_IRQHandler+0xae>
 800575e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005762:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005766:	2b00      	cmp	r3, #0
 8005768:	d005      	beq.n	8005776 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800576e:	f043 0201 	orr.w	r2, r3, #1
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005776:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800577a:	f003 0304 	and.w	r3, r3, #4
 800577e:	2b00      	cmp	r3, #0
 8005780:	d00b      	beq.n	800579a <HAL_UART_IRQHandler+0xd2>
 8005782:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005786:	f003 0301 	and.w	r3, r3, #1
 800578a:	2b00      	cmp	r3, #0
 800578c:	d005      	beq.n	800579a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005792:	f043 0202 	orr.w	r2, r3, #2
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800579a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800579e:	f003 0302 	and.w	r3, r3, #2
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00b      	beq.n	80057be <HAL_UART_IRQHandler+0xf6>
 80057a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057aa:	f003 0301 	and.w	r3, r3, #1
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d005      	beq.n	80057be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057b6:	f043 0204 	orr.w	r2, r3, #4
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80057be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057c2:	f003 0308 	and.w	r3, r3, #8
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d011      	beq.n	80057ee <HAL_UART_IRQHandler+0x126>
 80057ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80057ce:	f003 0320 	and.w	r3, r3, #32
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d105      	bne.n	80057e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80057d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80057da:	f003 0301 	and.w	r3, r3, #1
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d005      	beq.n	80057ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057e6:	f043 0208 	orr.w	r2, r3, #8
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	f000 81f2 	beq.w	8005bdc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80057f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80057fc:	f003 0320 	and.w	r3, r3, #32
 8005800:	2b00      	cmp	r3, #0
 8005802:	d008      	beq.n	8005816 <HAL_UART_IRQHandler+0x14e>
 8005804:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005808:	f003 0320 	and.w	r3, r3, #32
 800580c:	2b00      	cmp	r3, #0
 800580e:	d002      	beq.n	8005816 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005810:	6878      	ldr	r0, [r7, #4]
 8005812:	f000 fb8c 	bl	8005f2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	695b      	ldr	r3, [r3, #20]
 800581c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005820:	2b00      	cmp	r3, #0
 8005822:	bf14      	ite	ne
 8005824:	2301      	movne	r3, #1
 8005826:	2300      	moveq	r3, #0
 8005828:	b2db      	uxtb	r3, r3
 800582a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005832:	f003 0308 	and.w	r3, r3, #8
 8005836:	2b00      	cmp	r3, #0
 8005838:	d103      	bne.n	8005842 <HAL_UART_IRQHandler+0x17a>
 800583a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800583e:	2b00      	cmp	r3, #0
 8005840:	d04f      	beq.n	80058e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 fa96 	bl	8005d74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	695b      	ldr	r3, [r3, #20]
 800584e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005852:	2b00      	cmp	r3, #0
 8005854:	d041      	beq.n	80058da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	3314      	adds	r3, #20
 800585c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005860:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005864:	e853 3f00 	ldrex	r3, [r3]
 8005868:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800586c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005870:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005874:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	3314      	adds	r3, #20
 800587e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005882:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005886:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800588a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800588e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005892:	e841 2300 	strex	r3, r2, [r1]
 8005896:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800589a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800589e:	2b00      	cmp	r3, #0
 80058a0:	d1d9      	bne.n	8005856 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d013      	beq.n	80058d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058ae:	4a7e      	ldr	r2, [pc, #504]	; (8005aa8 <HAL_UART_IRQHandler+0x3e0>)
 80058b0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058b6:	4618      	mov	r0, r3
 80058b8:	f7fe fb30 	bl	8003f1c <HAL_DMA_Abort_IT>
 80058bc:	4603      	mov	r3, r0
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d016      	beq.n	80058f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80058c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80058c8:	687a      	ldr	r2, [r7, #4]
 80058ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80058cc:	4610      	mov	r0, r2
 80058ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058d0:	e00e      	b.n	80058f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80058d2:	6878      	ldr	r0, [r7, #4]
 80058d4:	f000 f993 	bl	8005bfe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058d8:	e00a      	b.n	80058f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80058da:	6878      	ldr	r0, [r7, #4]
 80058dc:	f000 f98f 	bl	8005bfe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058e0:	e006      	b.n	80058f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f000 f98b 	bl	8005bfe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	2200      	movs	r2, #0
 80058ec:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80058ee:	e175      	b.n	8005bdc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80058f0:	bf00      	nop
    return;
 80058f2:	e173      	b.n	8005bdc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80058f8:	2b01      	cmp	r3, #1
 80058fa:	f040 814f 	bne.w	8005b9c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80058fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005902:	f003 0310 	and.w	r3, r3, #16
 8005906:	2b00      	cmp	r3, #0
 8005908:	f000 8148 	beq.w	8005b9c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800590c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005910:	f003 0310 	and.w	r3, r3, #16
 8005914:	2b00      	cmp	r3, #0
 8005916:	f000 8141 	beq.w	8005b9c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800591a:	2300      	movs	r3, #0
 800591c:	60bb      	str	r3, [r7, #8]
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	681b      	ldr	r3, [r3, #0]
 8005924:	60bb      	str	r3, [r7, #8]
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	685b      	ldr	r3, [r3, #4]
 800592c:	60bb      	str	r3, [r7, #8]
 800592e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	695b      	ldr	r3, [r3, #20]
 8005936:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800593a:	2b00      	cmp	r3, #0
 800593c:	f000 80b6 	beq.w	8005aac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	685b      	ldr	r3, [r3, #4]
 8005948:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800594c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005950:	2b00      	cmp	r3, #0
 8005952:	f000 8145 	beq.w	8005be0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800595a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800595e:	429a      	cmp	r2, r3
 8005960:	f080 813e 	bcs.w	8005be0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800596a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	2b20      	cmp	r3, #32
 8005974:	f000 8088 	beq.w	8005a88 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	330c      	adds	r3, #12
 800597e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005982:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005986:	e853 3f00 	ldrex	r3, [r3]
 800598a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800598e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005992:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005996:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	681b      	ldr	r3, [r3, #0]
 800599e:	330c      	adds	r3, #12
 80059a0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80059a4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80059a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ac:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80059b0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80059b4:	e841 2300 	strex	r3, r2, [r1]
 80059b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80059bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1d9      	bne.n	8005978 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	3314      	adds	r3, #20
 80059ca:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80059ce:	e853 3f00 	ldrex	r3, [r3]
 80059d2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80059d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80059d6:	f023 0301 	bic.w	r3, r3, #1
 80059da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	3314      	adds	r3, #20
 80059e4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80059e8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80059ec:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059ee:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80059f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80059f4:	e841 2300 	strex	r3, r2, [r1]
 80059f8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80059fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d1e1      	bne.n	80059c4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	3314      	adds	r3, #20
 8005a06:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a08:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8005a0a:	e853 3f00 	ldrex	r3, [r3]
 8005a0e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005a10:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005a12:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005a16:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	3314      	adds	r3, #20
 8005a20:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005a24:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005a26:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a28:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8005a2a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8005a2c:	e841 2300 	strex	r3, r2, [r1]
 8005a30:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005a32:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d1e3      	bne.n	8005a00 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2200      	movs	r2, #0
 8005a44:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	330c      	adds	r3, #12
 8005a4c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a4e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005a50:	e853 3f00 	ldrex	r3, [r3]
 8005a54:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005a56:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a58:	f023 0310 	bic.w	r3, r3, #16
 8005a5c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	330c      	adds	r3, #12
 8005a66:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8005a6a:	65ba      	str	r2, [r7, #88]	; 0x58
 8005a6c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a6e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005a70:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005a72:	e841 2300 	strex	r3, r2, [r1]
 8005a76:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005a78:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d1e3      	bne.n	8005a46 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a82:	4618      	mov	r0, r3
 8005a84:	f7fe fa0e 	bl	8003ea4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	1ad3      	subs	r3, r2, r3
 8005a9a:	b29b      	uxth	r3, r3
 8005a9c:	4619      	mov	r1, r3
 8005a9e:	6878      	ldr	r0, [r7, #4]
 8005aa0:	f000 f8b6 	bl	8005c10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005aa4:	e09c      	b.n	8005be0 <HAL_UART_IRQHandler+0x518>
 8005aa6:	bf00      	nop
 8005aa8:	08005e39 	.word	0x08005e39
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ab4:	b29b      	uxth	r3, r3
 8005ab6:	1ad3      	subs	r3, r2, r3
 8005ab8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ac0:	b29b      	uxth	r3, r3
 8005ac2:	2b00      	cmp	r3, #0
 8005ac4:	f000 808e 	beq.w	8005be4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005ac8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	f000 8089 	beq.w	8005be4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	330c      	adds	r3, #12
 8005ad8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005adc:	e853 3f00 	ldrex	r3, [r3]
 8005ae0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8005ae2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ae4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005ae8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	330c      	adds	r3, #12
 8005af2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8005af6:	647a      	str	r2, [r7, #68]	; 0x44
 8005af8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005afa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8005afc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005afe:	e841 2300 	strex	r3, r2, [r1]
 8005b02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005b04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d1e3      	bne.n	8005ad2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	3314      	adds	r3, #20
 8005b10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b14:	e853 3f00 	ldrex	r3, [r3]
 8005b18:	623b      	str	r3, [r7, #32]
   return(result);
 8005b1a:	6a3b      	ldr	r3, [r7, #32]
 8005b1c:	f023 0301 	bic.w	r3, r3, #1
 8005b20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	3314      	adds	r3, #20
 8005b2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005b2e:	633a      	str	r2, [r7, #48]	; 0x30
 8005b30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005b34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005b36:	e841 2300 	strex	r3, r2, [r1]
 8005b3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005b3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d1e3      	bne.n	8005b0a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	2220      	movs	r2, #32
 8005b46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005b4a:	687b      	ldr	r3, [r7, #4]
 8005b4c:	2200      	movs	r2, #0
 8005b4e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	330c      	adds	r3, #12
 8005b56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b58:	693b      	ldr	r3, [r7, #16]
 8005b5a:	e853 3f00 	ldrex	r3, [r3]
 8005b5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f023 0310 	bic.w	r3, r3, #16
 8005b66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	681b      	ldr	r3, [r3, #0]
 8005b6e:	330c      	adds	r3, #12
 8005b70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005b74:	61fa      	str	r2, [r7, #28]
 8005b76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b78:	69b9      	ldr	r1, [r7, #24]
 8005b7a:	69fa      	ldr	r2, [r7, #28]
 8005b7c:	e841 2300 	strex	r3, r2, [r1]
 8005b80:	617b      	str	r3, [r7, #20]
   return(result);
 8005b82:	697b      	ldr	r3, [r7, #20]
 8005b84:	2b00      	cmp	r3, #0
 8005b86:	d1e3      	bne.n	8005b50 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2202      	movs	r2, #2
 8005b8c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005b8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005b92:	4619      	mov	r1, r3
 8005b94:	6878      	ldr	r0, [r7, #4]
 8005b96:	f000 f83b 	bl	8005c10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005b9a:	e023      	b.n	8005be4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005b9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ba0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d009      	beq.n	8005bbc <HAL_UART_IRQHandler+0x4f4>
 8005ba8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d003      	beq.n	8005bbc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005bb4:	6878      	ldr	r0, [r7, #4]
 8005bb6:	f000 f953 	bl	8005e60 <UART_Transmit_IT>
    return;
 8005bba:	e014      	b.n	8005be6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005bbc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	d00e      	beq.n	8005be6 <HAL_UART_IRQHandler+0x51e>
 8005bc8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005bcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	d008      	beq.n	8005be6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005bd4:	6878      	ldr	r0, [r7, #4]
 8005bd6:	f000 f992 	bl	8005efe <UART_EndTransmit_IT>
    return;
 8005bda:	e004      	b.n	8005be6 <HAL_UART_IRQHandler+0x51e>
    return;
 8005bdc:	bf00      	nop
 8005bde:	e002      	b.n	8005be6 <HAL_UART_IRQHandler+0x51e>
      return;
 8005be0:	bf00      	nop
 8005be2:	e000      	b.n	8005be6 <HAL_UART_IRQHandler+0x51e>
      return;
 8005be4:	bf00      	nop
  }
}
 8005be6:	37e8      	adds	r7, #232	; 0xe8
 8005be8:	46bd      	mov	sp, r7
 8005bea:	bd80      	pop	{r7, pc}

08005bec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005bec:	b480      	push	{r7}
 8005bee:	b083      	sub	sp, #12
 8005bf0:	af00      	add	r7, sp, #0
 8005bf2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005bf4:	bf00      	nop
 8005bf6:	370c      	adds	r7, #12
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	bc80      	pop	{r7}
 8005bfc:	4770      	bx	lr

08005bfe <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005bfe:	b480      	push	{r7}
 8005c00:	b083      	sub	sp, #12
 8005c02:	af00      	add	r7, sp, #0
 8005c04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005c06:	bf00      	nop
 8005c08:	370c      	adds	r7, #12
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	bc80      	pop	{r7}
 8005c0e:	4770      	bx	lr

08005c10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005c10:	b480      	push	{r7}
 8005c12:	b083      	sub	sp, #12
 8005c14:	af00      	add	r7, sp, #0
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	460b      	mov	r3, r1
 8005c1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005c1c:	bf00      	nop
 8005c1e:	370c      	adds	r7, #12
 8005c20:	46bd      	mov	sp, r7
 8005c22:	bc80      	pop	{r7}
 8005c24:	4770      	bx	lr

08005c26 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005c26:	b580      	push	{r7, lr}
 8005c28:	b090      	sub	sp, #64	; 0x40
 8005c2a:	af00      	add	r7, sp, #0
 8005c2c:	60f8      	str	r0, [r7, #12]
 8005c2e:	60b9      	str	r1, [r7, #8]
 8005c30:	603b      	str	r3, [r7, #0]
 8005c32:	4613      	mov	r3, r2
 8005c34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005c36:	e050      	b.n	8005cda <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005c38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c3e:	d04c      	beq.n	8005cda <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005c40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005c42:	2b00      	cmp	r3, #0
 8005c44:	d007      	beq.n	8005c56 <UART_WaitOnFlagUntilTimeout+0x30>
 8005c46:	f7fd f993 	bl	8002f70 <HAL_GetTick>
 8005c4a:	4602      	mov	r2, r0
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	1ad3      	subs	r3, r2, r3
 8005c50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005c52:	429a      	cmp	r2, r3
 8005c54:	d241      	bcs.n	8005cda <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	681b      	ldr	r3, [r3, #0]
 8005c5a:	330c      	adds	r3, #12
 8005c5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005c60:	e853 3f00 	ldrex	r3, [r3]
 8005c64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c68:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c6e:	68fb      	ldr	r3, [r7, #12]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	330c      	adds	r3, #12
 8005c74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005c76:	637a      	str	r2, [r7, #52]	; 0x34
 8005c78:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005c7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c7e:	e841 2300 	strex	r3, r2, [r1]
 8005c82:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d1e5      	bne.n	8005c56 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	3314      	adds	r3, #20
 8005c90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c92:	697b      	ldr	r3, [r7, #20]
 8005c94:	e853 3f00 	ldrex	r3, [r3]
 8005c98:	613b      	str	r3, [r7, #16]
   return(result);
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	f023 0301 	bic.w	r3, r3, #1
 8005ca0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	3314      	adds	r3, #20
 8005ca8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005caa:	623a      	str	r2, [r7, #32]
 8005cac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cae:	69f9      	ldr	r1, [r7, #28]
 8005cb0:	6a3a      	ldr	r2, [r7, #32]
 8005cb2:	e841 2300 	strex	r3, r2, [r1]
 8005cb6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005cb8:	69bb      	ldr	r3, [r7, #24]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d1e5      	bne.n	8005c8a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2220      	movs	r2, #32
 8005cc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	2220      	movs	r2, #32
 8005cca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	2200      	movs	r2, #0
 8005cd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005cd6:	2303      	movs	r3, #3
 8005cd8:	e00f      	b.n	8005cfa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	68bb      	ldr	r3, [r7, #8]
 8005ce2:	4013      	ands	r3, r2
 8005ce4:	68ba      	ldr	r2, [r7, #8]
 8005ce6:	429a      	cmp	r2, r3
 8005ce8:	bf0c      	ite	eq
 8005cea:	2301      	moveq	r3, #1
 8005cec:	2300      	movne	r3, #0
 8005cee:	b2db      	uxtb	r3, r3
 8005cf0:	461a      	mov	r2, r3
 8005cf2:	79fb      	ldrb	r3, [r7, #7]
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d09f      	beq.n	8005c38 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005cf8:	2300      	movs	r3, #0
}
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	3740      	adds	r7, #64	; 0x40
 8005cfe:	46bd      	mov	sp, r7
 8005d00:	bd80      	pop	{r7, pc}

08005d02 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005d02:	b480      	push	{r7}
 8005d04:	b085      	sub	sp, #20
 8005d06:	af00      	add	r7, sp, #0
 8005d08:	60f8      	str	r0, [r7, #12]
 8005d0a:	60b9      	str	r1, [r7, #8]
 8005d0c:	4613      	mov	r3, r2
 8005d0e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	68ba      	ldr	r2, [r7, #8]
 8005d14:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005d16:	68fb      	ldr	r3, [r7, #12]
 8005d18:	88fa      	ldrh	r2, [r7, #6]
 8005d1a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	88fa      	ldrh	r2, [r7, #6]
 8005d20:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d22:	68fb      	ldr	r3, [r7, #12]
 8005d24:	2200      	movs	r2, #0
 8005d26:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d28:	68fb      	ldr	r3, [r7, #12]
 8005d2a:	2222      	movs	r2, #34	; 0x22
 8005d2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005d30:	68fb      	ldr	r3, [r7, #12]
 8005d32:	691b      	ldr	r3, [r3, #16]
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d007      	beq.n	8005d48 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	68da      	ldr	r2, [r3, #12]
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	681b      	ldr	r3, [r3, #0]
 8005d42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005d46:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	695a      	ldr	r2, [r3, #20]
 8005d4e:	68fb      	ldr	r3, [r7, #12]
 8005d50:	681b      	ldr	r3, [r3, #0]
 8005d52:	f042 0201 	orr.w	r2, r2, #1
 8005d56:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	68da      	ldr	r2, [r3, #12]
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	f042 0220 	orr.w	r2, r2, #32
 8005d66:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005d68:	2300      	movs	r3, #0
}
 8005d6a:	4618      	mov	r0, r3
 8005d6c:	3714      	adds	r7, #20
 8005d6e:	46bd      	mov	sp, r7
 8005d70:	bc80      	pop	{r7}
 8005d72:	4770      	bx	lr

08005d74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b095      	sub	sp, #84	; 0x54
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	330c      	adds	r3, #12
 8005d82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005d84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d86:	e853 3f00 	ldrex	r3, [r3]
 8005d8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005d8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005d92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	330c      	adds	r3, #12
 8005d9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d9c:	643a      	str	r2, [r7, #64]	; 0x40
 8005d9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005da0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005da2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005da4:	e841 2300 	strex	r3, r2, [r1]
 8005da8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005daa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d1e5      	bne.n	8005d7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	3314      	adds	r3, #20
 8005db6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005db8:	6a3b      	ldr	r3, [r7, #32]
 8005dba:	e853 3f00 	ldrex	r3, [r3]
 8005dbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005dc0:	69fb      	ldr	r3, [r7, #28]
 8005dc2:	f023 0301 	bic.w	r3, r3, #1
 8005dc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	3314      	adds	r3, #20
 8005dce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005dd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005dd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005dd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005dd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005dd8:	e841 2300 	strex	r3, r2, [r1]
 8005ddc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005dde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005de0:	2b00      	cmp	r3, #0
 8005de2:	d1e5      	bne.n	8005db0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005de8:	2b01      	cmp	r3, #1
 8005dea:	d119      	bne.n	8005e20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	681b      	ldr	r3, [r3, #0]
 8005df0:	330c      	adds	r3, #12
 8005df2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	e853 3f00 	ldrex	r3, [r3]
 8005dfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8005dfc:	68bb      	ldr	r3, [r7, #8]
 8005dfe:	f023 0310 	bic.w	r3, r3, #16
 8005e02:	647b      	str	r3, [r7, #68]	; 0x44
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	330c      	adds	r3, #12
 8005e0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e0c:	61ba      	str	r2, [r7, #24]
 8005e0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e10:	6979      	ldr	r1, [r7, #20]
 8005e12:	69ba      	ldr	r2, [r7, #24]
 8005e14:	e841 2300 	strex	r3, r2, [r1]
 8005e18:	613b      	str	r3, [r7, #16]
   return(result);
 8005e1a:	693b      	ldr	r3, [r7, #16]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d1e5      	bne.n	8005dec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2220      	movs	r2, #32
 8005e24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005e2e:	bf00      	nop
 8005e30:	3754      	adds	r7, #84	; 0x54
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bc80      	pop	{r7}
 8005e36:	4770      	bx	lr

08005e38 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005e52:	68f8      	ldr	r0, [r7, #12]
 8005e54:	f7ff fed3 	bl	8005bfe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005e58:	bf00      	nop
 8005e5a:	3710      	adds	r7, #16
 8005e5c:	46bd      	mov	sp, r7
 8005e5e:	bd80      	pop	{r7, pc}

08005e60 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005e60:	b480      	push	{r7}
 8005e62:	b085      	sub	sp, #20
 8005e64:	af00      	add	r7, sp, #0
 8005e66:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e6e:	b2db      	uxtb	r3, r3
 8005e70:	2b21      	cmp	r3, #33	; 0x21
 8005e72:	d13e      	bne.n	8005ef2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e7c:	d114      	bne.n	8005ea8 <UART_Transmit_IT+0x48>
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	691b      	ldr	r3, [r3, #16]
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d110      	bne.n	8005ea8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	6a1b      	ldr	r3, [r3, #32]
 8005e8a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	881b      	ldrh	r3, [r3, #0]
 8005e90:	461a      	mov	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005e9a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	6a1b      	ldr	r3, [r3, #32]
 8005ea0:	1c9a      	adds	r2, r3, #2
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	621a      	str	r2, [r3, #32]
 8005ea6:	e008      	b.n	8005eba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	6a1b      	ldr	r3, [r3, #32]
 8005eac:	1c59      	adds	r1, r3, #1
 8005eae:	687a      	ldr	r2, [r7, #4]
 8005eb0:	6211      	str	r1, [r2, #32]
 8005eb2:	781a      	ldrb	r2, [r3, #0]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005ebe:	b29b      	uxth	r3, r3
 8005ec0:	3b01      	subs	r3, #1
 8005ec2:	b29b      	uxth	r3, r3
 8005ec4:	687a      	ldr	r2, [r7, #4]
 8005ec6:	4619      	mov	r1, r3
 8005ec8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d10f      	bne.n	8005eee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	68da      	ldr	r2, [r3, #12]
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005edc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	68da      	ldr	r2, [r3, #12]
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005eec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005eee:	2300      	movs	r3, #0
 8005ef0:	e000      	b.n	8005ef4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005ef2:	2302      	movs	r3, #2
  }
}
 8005ef4:	4618      	mov	r0, r3
 8005ef6:	3714      	adds	r7, #20
 8005ef8:	46bd      	mov	sp, r7
 8005efa:	bc80      	pop	{r7}
 8005efc:	4770      	bx	lr

08005efe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005efe:	b580      	push	{r7, lr}
 8005f00:	b082      	sub	sp, #8
 8005f02:	af00      	add	r7, sp, #0
 8005f04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	68da      	ldr	r2, [r3, #12]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005f14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	2220      	movs	r2, #32
 8005f1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f7ff fe64 	bl	8005bec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005f24:	2300      	movs	r3, #0
}
 8005f26:	4618      	mov	r0, r3
 8005f28:	3708      	adds	r7, #8
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005f2e:	b580      	push	{r7, lr}
 8005f30:	b08c      	sub	sp, #48	; 0x30
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005f3c:	b2db      	uxtb	r3, r3
 8005f3e:	2b22      	cmp	r3, #34	; 0x22
 8005f40:	f040 80ae 	bne.w	80060a0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f4c:	d117      	bne.n	8005f7e <UART_Receive_IT+0x50>
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	691b      	ldr	r3, [r3, #16]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d113      	bne.n	8005f7e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005f56:	2300      	movs	r3, #0
 8005f58:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f5e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	685b      	ldr	r3, [r3, #4]
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005f6c:	b29a      	uxth	r2, r3
 8005f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005f70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f76:	1c9a      	adds	r2, r3, #2
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	629a      	str	r2, [r3, #40]	; 0x28
 8005f7c:	e026      	b.n	8005fcc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f82:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005f84:	2300      	movs	r3, #0
 8005f86:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	689b      	ldr	r3, [r3, #8]
 8005f8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005f90:	d007      	beq.n	8005fa2 <UART_Receive_IT+0x74>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	689b      	ldr	r3, [r3, #8]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d10a      	bne.n	8005fb0 <UART_Receive_IT+0x82>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	691b      	ldr	r3, [r3, #16]
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d106      	bne.n	8005fb0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	685b      	ldr	r3, [r3, #4]
 8005fa8:	b2da      	uxtb	r2, r3
 8005faa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fac:	701a      	strb	r2, [r3, #0]
 8005fae:	e008      	b.n	8005fc2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	b2db      	uxtb	r3, r3
 8005fb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005fbc:	b2da      	uxtb	r2, r3
 8005fbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005fc0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005fc6:	1c5a      	adds	r2, r3, #1
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	687a      	ldr	r2, [r7, #4]
 8005fd8:	4619      	mov	r1, r3
 8005fda:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005fdc:	2b00      	cmp	r3, #0
 8005fde:	d15d      	bne.n	800609c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	68da      	ldr	r2, [r3, #12]
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	f022 0220 	bic.w	r2, r2, #32
 8005fee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	68da      	ldr	r2, [r3, #12]
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005ffe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	695a      	ldr	r2, [r3, #20]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	f022 0201 	bic.w	r2, r2, #1
 800600e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2220      	movs	r2, #32
 8006014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2200      	movs	r2, #0
 800601c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006022:	2b01      	cmp	r3, #1
 8006024:	d135      	bne.n	8006092 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	2200      	movs	r2, #0
 800602a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	330c      	adds	r3, #12
 8006032:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006034:	697b      	ldr	r3, [r7, #20]
 8006036:	e853 3f00 	ldrex	r3, [r3]
 800603a:	613b      	str	r3, [r7, #16]
   return(result);
 800603c:	693b      	ldr	r3, [r7, #16]
 800603e:	f023 0310 	bic.w	r3, r3, #16
 8006042:	627b      	str	r3, [r7, #36]	; 0x24
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	330c      	adds	r3, #12
 800604a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800604c:	623a      	str	r2, [r7, #32]
 800604e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006050:	69f9      	ldr	r1, [r7, #28]
 8006052:	6a3a      	ldr	r2, [r7, #32]
 8006054:	e841 2300 	strex	r3, r2, [r1]
 8006058:	61bb      	str	r3, [r7, #24]
   return(result);
 800605a:	69bb      	ldr	r3, [r7, #24]
 800605c:	2b00      	cmp	r3, #0
 800605e:	d1e5      	bne.n	800602c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	f003 0310 	and.w	r3, r3, #16
 800606a:	2b10      	cmp	r3, #16
 800606c:	d10a      	bne.n	8006084 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800606e:	2300      	movs	r3, #0
 8006070:	60fb      	str	r3, [r7, #12]
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	60fb      	str	r3, [r7, #12]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	60fb      	str	r3, [r7, #12]
 8006082:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006088:	4619      	mov	r1, r3
 800608a:	6878      	ldr	r0, [r7, #4]
 800608c:	f7ff fdc0 	bl	8005c10 <HAL_UARTEx_RxEventCallback>
 8006090:	e002      	b.n	8006098 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8006092:	6878      	ldr	r0, [r7, #4]
 8006094:	f7fc fa44 	bl	8002520 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8006098:	2300      	movs	r3, #0
 800609a:	e002      	b.n	80060a2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800609c:	2300      	movs	r3, #0
 800609e:	e000      	b.n	80060a2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80060a0:	2302      	movs	r3, #2
  }
}
 80060a2:	4618      	mov	r0, r3
 80060a4:	3730      	adds	r7, #48	; 0x30
 80060a6:	46bd      	mov	sp, r7
 80060a8:	bd80      	pop	{r7, pc}
	...

080060ac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80060ac:	b580      	push	{r7, lr}
 80060ae:	b084      	sub	sp, #16
 80060b0:	af00      	add	r7, sp, #0
 80060b2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	691b      	ldr	r3, [r3, #16]
 80060ba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	68da      	ldr	r2, [r3, #12]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	430a      	orrs	r2, r1
 80060c8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	689a      	ldr	r2, [r3, #8]
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	691b      	ldr	r3, [r3, #16]
 80060d2:	431a      	orrs	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	695b      	ldr	r3, [r3, #20]
 80060d8:	4313      	orrs	r3, r2
 80060da:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	68db      	ldr	r3, [r3, #12]
 80060e2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80060e6:	f023 030c 	bic.w	r3, r3, #12
 80060ea:	687a      	ldr	r2, [r7, #4]
 80060ec:	6812      	ldr	r2, [r2, #0]
 80060ee:	68b9      	ldr	r1, [r7, #8]
 80060f0:	430b      	orrs	r3, r1
 80060f2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	681b      	ldr	r3, [r3, #0]
 80060f8:	695b      	ldr	r3, [r3, #20]
 80060fa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	699a      	ldr	r2, [r3, #24]
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	430a      	orrs	r2, r1
 8006108:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	4a2c      	ldr	r2, [pc, #176]	; (80061c0 <UART_SetConfig+0x114>)
 8006110:	4293      	cmp	r3, r2
 8006112:	d103      	bne.n	800611c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006114:	f7fe fe40 	bl	8004d98 <HAL_RCC_GetPCLK2Freq>
 8006118:	60f8      	str	r0, [r7, #12]
 800611a:	e002      	b.n	8006122 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800611c:	f7fe fe28 	bl	8004d70 <HAL_RCC_GetPCLK1Freq>
 8006120:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006122:	68fa      	ldr	r2, [r7, #12]
 8006124:	4613      	mov	r3, r2
 8006126:	009b      	lsls	r3, r3, #2
 8006128:	4413      	add	r3, r2
 800612a:	009a      	lsls	r2, r3, #2
 800612c:	441a      	add	r2, r3
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	009b      	lsls	r3, r3, #2
 8006134:	fbb2 f3f3 	udiv	r3, r2, r3
 8006138:	4a22      	ldr	r2, [pc, #136]	; (80061c4 <UART_SetConfig+0x118>)
 800613a:	fba2 2303 	umull	r2, r3, r2, r3
 800613e:	095b      	lsrs	r3, r3, #5
 8006140:	0119      	lsls	r1, r3, #4
 8006142:	68fa      	ldr	r2, [r7, #12]
 8006144:	4613      	mov	r3, r2
 8006146:	009b      	lsls	r3, r3, #2
 8006148:	4413      	add	r3, r2
 800614a:	009a      	lsls	r2, r3, #2
 800614c:	441a      	add	r2, r3
 800614e:	687b      	ldr	r3, [r7, #4]
 8006150:	685b      	ldr	r3, [r3, #4]
 8006152:	009b      	lsls	r3, r3, #2
 8006154:	fbb2 f2f3 	udiv	r2, r2, r3
 8006158:	4b1a      	ldr	r3, [pc, #104]	; (80061c4 <UART_SetConfig+0x118>)
 800615a:	fba3 0302 	umull	r0, r3, r3, r2
 800615e:	095b      	lsrs	r3, r3, #5
 8006160:	2064      	movs	r0, #100	; 0x64
 8006162:	fb00 f303 	mul.w	r3, r0, r3
 8006166:	1ad3      	subs	r3, r2, r3
 8006168:	011b      	lsls	r3, r3, #4
 800616a:	3332      	adds	r3, #50	; 0x32
 800616c:	4a15      	ldr	r2, [pc, #84]	; (80061c4 <UART_SetConfig+0x118>)
 800616e:	fba2 2303 	umull	r2, r3, r2, r3
 8006172:	095b      	lsrs	r3, r3, #5
 8006174:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006178:	4419      	add	r1, r3
 800617a:	68fa      	ldr	r2, [r7, #12]
 800617c:	4613      	mov	r3, r2
 800617e:	009b      	lsls	r3, r3, #2
 8006180:	4413      	add	r3, r2
 8006182:	009a      	lsls	r2, r3, #2
 8006184:	441a      	add	r2, r3
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	685b      	ldr	r3, [r3, #4]
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006190:	4b0c      	ldr	r3, [pc, #48]	; (80061c4 <UART_SetConfig+0x118>)
 8006192:	fba3 0302 	umull	r0, r3, r3, r2
 8006196:	095b      	lsrs	r3, r3, #5
 8006198:	2064      	movs	r0, #100	; 0x64
 800619a:	fb00 f303 	mul.w	r3, r0, r3
 800619e:	1ad3      	subs	r3, r2, r3
 80061a0:	011b      	lsls	r3, r3, #4
 80061a2:	3332      	adds	r3, #50	; 0x32
 80061a4:	4a07      	ldr	r2, [pc, #28]	; (80061c4 <UART_SetConfig+0x118>)
 80061a6:	fba2 2303 	umull	r2, r3, r2, r3
 80061aa:	095b      	lsrs	r3, r3, #5
 80061ac:	f003 020f 	and.w	r2, r3, #15
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	440a      	add	r2, r1
 80061b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80061b8:	bf00      	nop
 80061ba:	3710      	adds	r7, #16
 80061bc:	46bd      	mov	sp, r7
 80061be:	bd80      	pop	{r7, pc}
 80061c0:	40013800 	.word	0x40013800
 80061c4:	51eb851f 	.word	0x51eb851f

080061c8 <__errno>:
 80061c8:	4b01      	ldr	r3, [pc, #4]	; (80061d0 <__errno+0x8>)
 80061ca:	6818      	ldr	r0, [r3, #0]
 80061cc:	4770      	bx	lr
 80061ce:	bf00      	nop
 80061d0:	20000210 	.word	0x20000210

080061d4 <__libc_init_array>:
 80061d4:	b570      	push	{r4, r5, r6, lr}
 80061d6:	2600      	movs	r6, #0
 80061d8:	4d0c      	ldr	r5, [pc, #48]	; (800620c <__libc_init_array+0x38>)
 80061da:	4c0d      	ldr	r4, [pc, #52]	; (8006210 <__libc_init_array+0x3c>)
 80061dc:	1b64      	subs	r4, r4, r5
 80061de:	10a4      	asrs	r4, r4, #2
 80061e0:	42a6      	cmp	r6, r4
 80061e2:	d109      	bne.n	80061f8 <__libc_init_array+0x24>
 80061e4:	f001 fb10 	bl	8007808 <_init>
 80061e8:	2600      	movs	r6, #0
 80061ea:	4d0a      	ldr	r5, [pc, #40]	; (8006214 <__libc_init_array+0x40>)
 80061ec:	4c0a      	ldr	r4, [pc, #40]	; (8006218 <__libc_init_array+0x44>)
 80061ee:	1b64      	subs	r4, r4, r5
 80061f0:	10a4      	asrs	r4, r4, #2
 80061f2:	42a6      	cmp	r6, r4
 80061f4:	d105      	bne.n	8006202 <__libc_init_array+0x2e>
 80061f6:	bd70      	pop	{r4, r5, r6, pc}
 80061f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80061fc:	4798      	blx	r3
 80061fe:	3601      	adds	r6, #1
 8006200:	e7ee      	b.n	80061e0 <__libc_init_array+0xc>
 8006202:	f855 3b04 	ldr.w	r3, [r5], #4
 8006206:	4798      	blx	r3
 8006208:	3601      	adds	r6, #1
 800620a:	e7f2      	b.n	80061f2 <__libc_init_array+0x1e>
 800620c:	080079e0 	.word	0x080079e0
 8006210:	080079e0 	.word	0x080079e0
 8006214:	080079e0 	.word	0x080079e0
 8006218:	080079e4 	.word	0x080079e4

0800621c <memcpy>:
 800621c:	440a      	add	r2, r1
 800621e:	4291      	cmp	r1, r2
 8006220:	f100 33ff 	add.w	r3, r0, #4294967295
 8006224:	d100      	bne.n	8006228 <memcpy+0xc>
 8006226:	4770      	bx	lr
 8006228:	b510      	push	{r4, lr}
 800622a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800622e:	4291      	cmp	r1, r2
 8006230:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006234:	d1f9      	bne.n	800622a <memcpy+0xe>
 8006236:	bd10      	pop	{r4, pc}

08006238 <memset>:
 8006238:	4603      	mov	r3, r0
 800623a:	4402      	add	r2, r0
 800623c:	4293      	cmp	r3, r2
 800623e:	d100      	bne.n	8006242 <memset+0xa>
 8006240:	4770      	bx	lr
 8006242:	f803 1b01 	strb.w	r1, [r3], #1
 8006246:	e7f9      	b.n	800623c <memset+0x4>

08006248 <rand>:
 8006248:	4b16      	ldr	r3, [pc, #88]	; (80062a4 <rand+0x5c>)
 800624a:	b510      	push	{r4, lr}
 800624c:	681c      	ldr	r4, [r3, #0]
 800624e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006250:	b9b3      	cbnz	r3, 8006280 <rand+0x38>
 8006252:	2018      	movs	r0, #24
 8006254:	f000 f886 	bl	8006364 <malloc>
 8006258:	4602      	mov	r2, r0
 800625a:	63a0      	str	r0, [r4, #56]	; 0x38
 800625c:	b920      	cbnz	r0, 8006268 <rand+0x20>
 800625e:	214e      	movs	r1, #78	; 0x4e
 8006260:	4b11      	ldr	r3, [pc, #68]	; (80062a8 <rand+0x60>)
 8006262:	4812      	ldr	r0, [pc, #72]	; (80062ac <rand+0x64>)
 8006264:	f000 f84e 	bl	8006304 <__assert_func>
 8006268:	4911      	ldr	r1, [pc, #68]	; (80062b0 <rand+0x68>)
 800626a:	4b12      	ldr	r3, [pc, #72]	; (80062b4 <rand+0x6c>)
 800626c:	e9c0 1300 	strd	r1, r3, [r0]
 8006270:	4b11      	ldr	r3, [pc, #68]	; (80062b8 <rand+0x70>)
 8006272:	2100      	movs	r1, #0
 8006274:	6083      	str	r3, [r0, #8]
 8006276:	230b      	movs	r3, #11
 8006278:	8183      	strh	r3, [r0, #12]
 800627a:	2001      	movs	r0, #1
 800627c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006280:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8006282:	4a0e      	ldr	r2, [pc, #56]	; (80062bc <rand+0x74>)
 8006284:	6920      	ldr	r0, [r4, #16]
 8006286:	6963      	ldr	r3, [r4, #20]
 8006288:	4342      	muls	r2, r0
 800628a:	490d      	ldr	r1, [pc, #52]	; (80062c0 <rand+0x78>)
 800628c:	fb01 2203 	mla	r2, r1, r3, r2
 8006290:	fba0 0101 	umull	r0, r1, r0, r1
 8006294:	1c43      	adds	r3, r0, #1
 8006296:	eb42 0001 	adc.w	r0, r2, r1
 800629a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800629e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80062a2:	bd10      	pop	{r4, pc}
 80062a4:	20000210 	.word	0x20000210
 80062a8:	0800789c 	.word	0x0800789c
 80062ac:	080078b3 	.word	0x080078b3
 80062b0:	abcd330e 	.word	0xabcd330e
 80062b4:	e66d1234 	.word	0xe66d1234
 80062b8:	0005deec 	.word	0x0005deec
 80062bc:	5851f42d 	.word	0x5851f42d
 80062c0:	4c957f2d 	.word	0x4c957f2d

080062c4 <siprintf>:
 80062c4:	b40e      	push	{r1, r2, r3}
 80062c6:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80062ca:	b500      	push	{lr}
 80062cc:	b09c      	sub	sp, #112	; 0x70
 80062ce:	ab1d      	add	r3, sp, #116	; 0x74
 80062d0:	9002      	str	r0, [sp, #8]
 80062d2:	9006      	str	r0, [sp, #24]
 80062d4:	9107      	str	r1, [sp, #28]
 80062d6:	9104      	str	r1, [sp, #16]
 80062d8:	4808      	ldr	r0, [pc, #32]	; (80062fc <siprintf+0x38>)
 80062da:	4909      	ldr	r1, [pc, #36]	; (8006300 <siprintf+0x3c>)
 80062dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80062e0:	9105      	str	r1, [sp, #20]
 80062e2:	6800      	ldr	r0, [r0, #0]
 80062e4:	a902      	add	r1, sp, #8
 80062e6:	9301      	str	r3, [sp, #4]
 80062e8:	f000 f97c 	bl	80065e4 <_svfiprintf_r>
 80062ec:	2200      	movs	r2, #0
 80062ee:	9b02      	ldr	r3, [sp, #8]
 80062f0:	701a      	strb	r2, [r3, #0]
 80062f2:	b01c      	add	sp, #112	; 0x70
 80062f4:	f85d eb04 	ldr.w	lr, [sp], #4
 80062f8:	b003      	add	sp, #12
 80062fa:	4770      	bx	lr
 80062fc:	20000210 	.word	0x20000210
 8006300:	ffff0208 	.word	0xffff0208

08006304 <__assert_func>:
 8006304:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006306:	4614      	mov	r4, r2
 8006308:	461a      	mov	r2, r3
 800630a:	4b09      	ldr	r3, [pc, #36]	; (8006330 <__assert_func+0x2c>)
 800630c:	4605      	mov	r5, r0
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	68d8      	ldr	r0, [r3, #12]
 8006312:	b14c      	cbz	r4, 8006328 <__assert_func+0x24>
 8006314:	4b07      	ldr	r3, [pc, #28]	; (8006334 <__assert_func+0x30>)
 8006316:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800631a:	9100      	str	r1, [sp, #0]
 800631c:	462b      	mov	r3, r5
 800631e:	4906      	ldr	r1, [pc, #24]	; (8006338 <__assert_func+0x34>)
 8006320:	f000 f80e 	bl	8006340 <fiprintf>
 8006324:	f000 fe1c 	bl	8006f60 <abort>
 8006328:	4b04      	ldr	r3, [pc, #16]	; (800633c <__assert_func+0x38>)
 800632a:	461c      	mov	r4, r3
 800632c:	e7f3      	b.n	8006316 <__assert_func+0x12>
 800632e:	bf00      	nop
 8006330:	20000210 	.word	0x20000210
 8006334:	0800790e 	.word	0x0800790e
 8006338:	0800791b 	.word	0x0800791b
 800633c:	08007949 	.word	0x08007949

08006340 <fiprintf>:
 8006340:	b40e      	push	{r1, r2, r3}
 8006342:	b503      	push	{r0, r1, lr}
 8006344:	4601      	mov	r1, r0
 8006346:	ab03      	add	r3, sp, #12
 8006348:	4805      	ldr	r0, [pc, #20]	; (8006360 <fiprintf+0x20>)
 800634a:	f853 2b04 	ldr.w	r2, [r3], #4
 800634e:	6800      	ldr	r0, [r0, #0]
 8006350:	9301      	str	r3, [sp, #4]
 8006352:	f000 fa6f 	bl	8006834 <_vfiprintf_r>
 8006356:	b002      	add	sp, #8
 8006358:	f85d eb04 	ldr.w	lr, [sp], #4
 800635c:	b003      	add	sp, #12
 800635e:	4770      	bx	lr
 8006360:	20000210 	.word	0x20000210

08006364 <malloc>:
 8006364:	4b02      	ldr	r3, [pc, #8]	; (8006370 <malloc+0xc>)
 8006366:	4601      	mov	r1, r0
 8006368:	6818      	ldr	r0, [r3, #0]
 800636a:	f000 b86b 	b.w	8006444 <_malloc_r>
 800636e:	bf00      	nop
 8006370:	20000210 	.word	0x20000210

08006374 <_free_r>:
 8006374:	b538      	push	{r3, r4, r5, lr}
 8006376:	4605      	mov	r5, r0
 8006378:	2900      	cmp	r1, #0
 800637a:	d040      	beq.n	80063fe <_free_r+0x8a>
 800637c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006380:	1f0c      	subs	r4, r1, #4
 8006382:	2b00      	cmp	r3, #0
 8006384:	bfb8      	it	lt
 8006386:	18e4      	addlt	r4, r4, r3
 8006388:	f001 f836 	bl	80073f8 <__malloc_lock>
 800638c:	4a1c      	ldr	r2, [pc, #112]	; (8006400 <_free_r+0x8c>)
 800638e:	6813      	ldr	r3, [r2, #0]
 8006390:	b933      	cbnz	r3, 80063a0 <_free_r+0x2c>
 8006392:	6063      	str	r3, [r4, #4]
 8006394:	6014      	str	r4, [r2, #0]
 8006396:	4628      	mov	r0, r5
 8006398:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800639c:	f001 b832 	b.w	8007404 <__malloc_unlock>
 80063a0:	42a3      	cmp	r3, r4
 80063a2:	d908      	bls.n	80063b6 <_free_r+0x42>
 80063a4:	6820      	ldr	r0, [r4, #0]
 80063a6:	1821      	adds	r1, r4, r0
 80063a8:	428b      	cmp	r3, r1
 80063aa:	bf01      	itttt	eq
 80063ac:	6819      	ldreq	r1, [r3, #0]
 80063ae:	685b      	ldreq	r3, [r3, #4]
 80063b0:	1809      	addeq	r1, r1, r0
 80063b2:	6021      	streq	r1, [r4, #0]
 80063b4:	e7ed      	b.n	8006392 <_free_r+0x1e>
 80063b6:	461a      	mov	r2, r3
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	b10b      	cbz	r3, 80063c0 <_free_r+0x4c>
 80063bc:	42a3      	cmp	r3, r4
 80063be:	d9fa      	bls.n	80063b6 <_free_r+0x42>
 80063c0:	6811      	ldr	r1, [r2, #0]
 80063c2:	1850      	adds	r0, r2, r1
 80063c4:	42a0      	cmp	r0, r4
 80063c6:	d10b      	bne.n	80063e0 <_free_r+0x6c>
 80063c8:	6820      	ldr	r0, [r4, #0]
 80063ca:	4401      	add	r1, r0
 80063cc:	1850      	adds	r0, r2, r1
 80063ce:	4283      	cmp	r3, r0
 80063d0:	6011      	str	r1, [r2, #0]
 80063d2:	d1e0      	bne.n	8006396 <_free_r+0x22>
 80063d4:	6818      	ldr	r0, [r3, #0]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	4401      	add	r1, r0
 80063da:	6011      	str	r1, [r2, #0]
 80063dc:	6053      	str	r3, [r2, #4]
 80063de:	e7da      	b.n	8006396 <_free_r+0x22>
 80063e0:	d902      	bls.n	80063e8 <_free_r+0x74>
 80063e2:	230c      	movs	r3, #12
 80063e4:	602b      	str	r3, [r5, #0]
 80063e6:	e7d6      	b.n	8006396 <_free_r+0x22>
 80063e8:	6820      	ldr	r0, [r4, #0]
 80063ea:	1821      	adds	r1, r4, r0
 80063ec:	428b      	cmp	r3, r1
 80063ee:	bf01      	itttt	eq
 80063f0:	6819      	ldreq	r1, [r3, #0]
 80063f2:	685b      	ldreq	r3, [r3, #4]
 80063f4:	1809      	addeq	r1, r1, r0
 80063f6:	6021      	streq	r1, [r4, #0]
 80063f8:	6063      	str	r3, [r4, #4]
 80063fa:	6054      	str	r4, [r2, #4]
 80063fc:	e7cb      	b.n	8006396 <_free_r+0x22>
 80063fe:	bd38      	pop	{r3, r4, r5, pc}
 8006400:	20000c30 	.word	0x20000c30

08006404 <sbrk_aligned>:
 8006404:	b570      	push	{r4, r5, r6, lr}
 8006406:	4e0e      	ldr	r6, [pc, #56]	; (8006440 <sbrk_aligned+0x3c>)
 8006408:	460c      	mov	r4, r1
 800640a:	6831      	ldr	r1, [r6, #0]
 800640c:	4605      	mov	r5, r0
 800640e:	b911      	cbnz	r1, 8006416 <sbrk_aligned+0x12>
 8006410:	f000 fcd6 	bl	8006dc0 <_sbrk_r>
 8006414:	6030      	str	r0, [r6, #0]
 8006416:	4621      	mov	r1, r4
 8006418:	4628      	mov	r0, r5
 800641a:	f000 fcd1 	bl	8006dc0 <_sbrk_r>
 800641e:	1c43      	adds	r3, r0, #1
 8006420:	d00a      	beq.n	8006438 <sbrk_aligned+0x34>
 8006422:	1cc4      	adds	r4, r0, #3
 8006424:	f024 0403 	bic.w	r4, r4, #3
 8006428:	42a0      	cmp	r0, r4
 800642a:	d007      	beq.n	800643c <sbrk_aligned+0x38>
 800642c:	1a21      	subs	r1, r4, r0
 800642e:	4628      	mov	r0, r5
 8006430:	f000 fcc6 	bl	8006dc0 <_sbrk_r>
 8006434:	3001      	adds	r0, #1
 8006436:	d101      	bne.n	800643c <sbrk_aligned+0x38>
 8006438:	f04f 34ff 	mov.w	r4, #4294967295
 800643c:	4620      	mov	r0, r4
 800643e:	bd70      	pop	{r4, r5, r6, pc}
 8006440:	20000c34 	.word	0x20000c34

08006444 <_malloc_r>:
 8006444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006448:	1ccd      	adds	r5, r1, #3
 800644a:	f025 0503 	bic.w	r5, r5, #3
 800644e:	3508      	adds	r5, #8
 8006450:	2d0c      	cmp	r5, #12
 8006452:	bf38      	it	cc
 8006454:	250c      	movcc	r5, #12
 8006456:	2d00      	cmp	r5, #0
 8006458:	4607      	mov	r7, r0
 800645a:	db01      	blt.n	8006460 <_malloc_r+0x1c>
 800645c:	42a9      	cmp	r1, r5
 800645e:	d905      	bls.n	800646c <_malloc_r+0x28>
 8006460:	230c      	movs	r3, #12
 8006462:	2600      	movs	r6, #0
 8006464:	603b      	str	r3, [r7, #0]
 8006466:	4630      	mov	r0, r6
 8006468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800646c:	4e2e      	ldr	r6, [pc, #184]	; (8006528 <_malloc_r+0xe4>)
 800646e:	f000 ffc3 	bl	80073f8 <__malloc_lock>
 8006472:	6833      	ldr	r3, [r6, #0]
 8006474:	461c      	mov	r4, r3
 8006476:	bb34      	cbnz	r4, 80064c6 <_malloc_r+0x82>
 8006478:	4629      	mov	r1, r5
 800647a:	4638      	mov	r0, r7
 800647c:	f7ff ffc2 	bl	8006404 <sbrk_aligned>
 8006480:	1c43      	adds	r3, r0, #1
 8006482:	4604      	mov	r4, r0
 8006484:	d14d      	bne.n	8006522 <_malloc_r+0xde>
 8006486:	6834      	ldr	r4, [r6, #0]
 8006488:	4626      	mov	r6, r4
 800648a:	2e00      	cmp	r6, #0
 800648c:	d140      	bne.n	8006510 <_malloc_r+0xcc>
 800648e:	6823      	ldr	r3, [r4, #0]
 8006490:	4631      	mov	r1, r6
 8006492:	4638      	mov	r0, r7
 8006494:	eb04 0803 	add.w	r8, r4, r3
 8006498:	f000 fc92 	bl	8006dc0 <_sbrk_r>
 800649c:	4580      	cmp	r8, r0
 800649e:	d13a      	bne.n	8006516 <_malloc_r+0xd2>
 80064a0:	6821      	ldr	r1, [r4, #0]
 80064a2:	3503      	adds	r5, #3
 80064a4:	1a6d      	subs	r5, r5, r1
 80064a6:	f025 0503 	bic.w	r5, r5, #3
 80064aa:	3508      	adds	r5, #8
 80064ac:	2d0c      	cmp	r5, #12
 80064ae:	bf38      	it	cc
 80064b0:	250c      	movcc	r5, #12
 80064b2:	4638      	mov	r0, r7
 80064b4:	4629      	mov	r1, r5
 80064b6:	f7ff ffa5 	bl	8006404 <sbrk_aligned>
 80064ba:	3001      	adds	r0, #1
 80064bc:	d02b      	beq.n	8006516 <_malloc_r+0xd2>
 80064be:	6823      	ldr	r3, [r4, #0]
 80064c0:	442b      	add	r3, r5
 80064c2:	6023      	str	r3, [r4, #0]
 80064c4:	e00e      	b.n	80064e4 <_malloc_r+0xa0>
 80064c6:	6822      	ldr	r2, [r4, #0]
 80064c8:	1b52      	subs	r2, r2, r5
 80064ca:	d41e      	bmi.n	800650a <_malloc_r+0xc6>
 80064cc:	2a0b      	cmp	r2, #11
 80064ce:	d916      	bls.n	80064fe <_malloc_r+0xba>
 80064d0:	1961      	adds	r1, r4, r5
 80064d2:	42a3      	cmp	r3, r4
 80064d4:	6025      	str	r5, [r4, #0]
 80064d6:	bf18      	it	ne
 80064d8:	6059      	strne	r1, [r3, #4]
 80064da:	6863      	ldr	r3, [r4, #4]
 80064dc:	bf08      	it	eq
 80064de:	6031      	streq	r1, [r6, #0]
 80064e0:	5162      	str	r2, [r4, r5]
 80064e2:	604b      	str	r3, [r1, #4]
 80064e4:	4638      	mov	r0, r7
 80064e6:	f104 060b 	add.w	r6, r4, #11
 80064ea:	f000 ff8b 	bl	8007404 <__malloc_unlock>
 80064ee:	f026 0607 	bic.w	r6, r6, #7
 80064f2:	1d23      	adds	r3, r4, #4
 80064f4:	1af2      	subs	r2, r6, r3
 80064f6:	d0b6      	beq.n	8006466 <_malloc_r+0x22>
 80064f8:	1b9b      	subs	r3, r3, r6
 80064fa:	50a3      	str	r3, [r4, r2]
 80064fc:	e7b3      	b.n	8006466 <_malloc_r+0x22>
 80064fe:	6862      	ldr	r2, [r4, #4]
 8006500:	42a3      	cmp	r3, r4
 8006502:	bf0c      	ite	eq
 8006504:	6032      	streq	r2, [r6, #0]
 8006506:	605a      	strne	r2, [r3, #4]
 8006508:	e7ec      	b.n	80064e4 <_malloc_r+0xa0>
 800650a:	4623      	mov	r3, r4
 800650c:	6864      	ldr	r4, [r4, #4]
 800650e:	e7b2      	b.n	8006476 <_malloc_r+0x32>
 8006510:	4634      	mov	r4, r6
 8006512:	6876      	ldr	r6, [r6, #4]
 8006514:	e7b9      	b.n	800648a <_malloc_r+0x46>
 8006516:	230c      	movs	r3, #12
 8006518:	4638      	mov	r0, r7
 800651a:	603b      	str	r3, [r7, #0]
 800651c:	f000 ff72 	bl	8007404 <__malloc_unlock>
 8006520:	e7a1      	b.n	8006466 <_malloc_r+0x22>
 8006522:	6025      	str	r5, [r4, #0]
 8006524:	e7de      	b.n	80064e4 <_malloc_r+0xa0>
 8006526:	bf00      	nop
 8006528:	20000c30 	.word	0x20000c30

0800652c <__ssputs_r>:
 800652c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006530:	688e      	ldr	r6, [r1, #8]
 8006532:	4682      	mov	sl, r0
 8006534:	429e      	cmp	r6, r3
 8006536:	460c      	mov	r4, r1
 8006538:	4690      	mov	r8, r2
 800653a:	461f      	mov	r7, r3
 800653c:	d838      	bhi.n	80065b0 <__ssputs_r+0x84>
 800653e:	898a      	ldrh	r2, [r1, #12]
 8006540:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8006544:	d032      	beq.n	80065ac <__ssputs_r+0x80>
 8006546:	6825      	ldr	r5, [r4, #0]
 8006548:	6909      	ldr	r1, [r1, #16]
 800654a:	3301      	adds	r3, #1
 800654c:	eba5 0901 	sub.w	r9, r5, r1
 8006550:	6965      	ldr	r5, [r4, #20]
 8006552:	444b      	add	r3, r9
 8006554:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006558:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800655c:	106d      	asrs	r5, r5, #1
 800655e:	429d      	cmp	r5, r3
 8006560:	bf38      	it	cc
 8006562:	461d      	movcc	r5, r3
 8006564:	0553      	lsls	r3, r2, #21
 8006566:	d531      	bpl.n	80065cc <__ssputs_r+0xa0>
 8006568:	4629      	mov	r1, r5
 800656a:	f7ff ff6b 	bl	8006444 <_malloc_r>
 800656e:	4606      	mov	r6, r0
 8006570:	b950      	cbnz	r0, 8006588 <__ssputs_r+0x5c>
 8006572:	230c      	movs	r3, #12
 8006574:	f04f 30ff 	mov.w	r0, #4294967295
 8006578:	f8ca 3000 	str.w	r3, [sl]
 800657c:	89a3      	ldrh	r3, [r4, #12]
 800657e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006582:	81a3      	strh	r3, [r4, #12]
 8006584:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006588:	464a      	mov	r2, r9
 800658a:	6921      	ldr	r1, [r4, #16]
 800658c:	f7ff fe46 	bl	800621c <memcpy>
 8006590:	89a3      	ldrh	r3, [r4, #12]
 8006592:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006596:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800659a:	81a3      	strh	r3, [r4, #12]
 800659c:	6126      	str	r6, [r4, #16]
 800659e:	444e      	add	r6, r9
 80065a0:	6026      	str	r6, [r4, #0]
 80065a2:	463e      	mov	r6, r7
 80065a4:	6165      	str	r5, [r4, #20]
 80065a6:	eba5 0509 	sub.w	r5, r5, r9
 80065aa:	60a5      	str	r5, [r4, #8]
 80065ac:	42be      	cmp	r6, r7
 80065ae:	d900      	bls.n	80065b2 <__ssputs_r+0x86>
 80065b0:	463e      	mov	r6, r7
 80065b2:	4632      	mov	r2, r6
 80065b4:	4641      	mov	r1, r8
 80065b6:	6820      	ldr	r0, [r4, #0]
 80065b8:	f000 ff04 	bl	80073c4 <memmove>
 80065bc:	68a3      	ldr	r3, [r4, #8]
 80065be:	2000      	movs	r0, #0
 80065c0:	1b9b      	subs	r3, r3, r6
 80065c2:	60a3      	str	r3, [r4, #8]
 80065c4:	6823      	ldr	r3, [r4, #0]
 80065c6:	4433      	add	r3, r6
 80065c8:	6023      	str	r3, [r4, #0]
 80065ca:	e7db      	b.n	8006584 <__ssputs_r+0x58>
 80065cc:	462a      	mov	r2, r5
 80065ce:	f000 ff1f 	bl	8007410 <_realloc_r>
 80065d2:	4606      	mov	r6, r0
 80065d4:	2800      	cmp	r0, #0
 80065d6:	d1e1      	bne.n	800659c <__ssputs_r+0x70>
 80065d8:	4650      	mov	r0, sl
 80065da:	6921      	ldr	r1, [r4, #16]
 80065dc:	f7ff feca 	bl	8006374 <_free_r>
 80065e0:	e7c7      	b.n	8006572 <__ssputs_r+0x46>
	...

080065e4 <_svfiprintf_r>:
 80065e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80065e8:	4698      	mov	r8, r3
 80065ea:	898b      	ldrh	r3, [r1, #12]
 80065ec:	4607      	mov	r7, r0
 80065ee:	061b      	lsls	r3, r3, #24
 80065f0:	460d      	mov	r5, r1
 80065f2:	4614      	mov	r4, r2
 80065f4:	b09d      	sub	sp, #116	; 0x74
 80065f6:	d50e      	bpl.n	8006616 <_svfiprintf_r+0x32>
 80065f8:	690b      	ldr	r3, [r1, #16]
 80065fa:	b963      	cbnz	r3, 8006616 <_svfiprintf_r+0x32>
 80065fc:	2140      	movs	r1, #64	; 0x40
 80065fe:	f7ff ff21 	bl	8006444 <_malloc_r>
 8006602:	6028      	str	r0, [r5, #0]
 8006604:	6128      	str	r0, [r5, #16]
 8006606:	b920      	cbnz	r0, 8006612 <_svfiprintf_r+0x2e>
 8006608:	230c      	movs	r3, #12
 800660a:	603b      	str	r3, [r7, #0]
 800660c:	f04f 30ff 	mov.w	r0, #4294967295
 8006610:	e0d1      	b.n	80067b6 <_svfiprintf_r+0x1d2>
 8006612:	2340      	movs	r3, #64	; 0x40
 8006614:	616b      	str	r3, [r5, #20]
 8006616:	2300      	movs	r3, #0
 8006618:	9309      	str	r3, [sp, #36]	; 0x24
 800661a:	2320      	movs	r3, #32
 800661c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006620:	2330      	movs	r3, #48	; 0x30
 8006622:	f04f 0901 	mov.w	r9, #1
 8006626:	f8cd 800c 	str.w	r8, [sp, #12]
 800662a:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80067d0 <_svfiprintf_r+0x1ec>
 800662e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006632:	4623      	mov	r3, r4
 8006634:	469a      	mov	sl, r3
 8006636:	f813 2b01 	ldrb.w	r2, [r3], #1
 800663a:	b10a      	cbz	r2, 8006640 <_svfiprintf_r+0x5c>
 800663c:	2a25      	cmp	r2, #37	; 0x25
 800663e:	d1f9      	bne.n	8006634 <_svfiprintf_r+0x50>
 8006640:	ebba 0b04 	subs.w	fp, sl, r4
 8006644:	d00b      	beq.n	800665e <_svfiprintf_r+0x7a>
 8006646:	465b      	mov	r3, fp
 8006648:	4622      	mov	r2, r4
 800664a:	4629      	mov	r1, r5
 800664c:	4638      	mov	r0, r7
 800664e:	f7ff ff6d 	bl	800652c <__ssputs_r>
 8006652:	3001      	adds	r0, #1
 8006654:	f000 80aa 	beq.w	80067ac <_svfiprintf_r+0x1c8>
 8006658:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800665a:	445a      	add	r2, fp
 800665c:	9209      	str	r2, [sp, #36]	; 0x24
 800665e:	f89a 3000 	ldrb.w	r3, [sl]
 8006662:	2b00      	cmp	r3, #0
 8006664:	f000 80a2 	beq.w	80067ac <_svfiprintf_r+0x1c8>
 8006668:	2300      	movs	r3, #0
 800666a:	f04f 32ff 	mov.w	r2, #4294967295
 800666e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006672:	f10a 0a01 	add.w	sl, sl, #1
 8006676:	9304      	str	r3, [sp, #16]
 8006678:	9307      	str	r3, [sp, #28]
 800667a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800667e:	931a      	str	r3, [sp, #104]	; 0x68
 8006680:	4654      	mov	r4, sl
 8006682:	2205      	movs	r2, #5
 8006684:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006688:	4851      	ldr	r0, [pc, #324]	; (80067d0 <_svfiprintf_r+0x1ec>)
 800668a:	f000 fe8d 	bl	80073a8 <memchr>
 800668e:	9a04      	ldr	r2, [sp, #16]
 8006690:	b9d8      	cbnz	r0, 80066ca <_svfiprintf_r+0xe6>
 8006692:	06d0      	lsls	r0, r2, #27
 8006694:	bf44      	itt	mi
 8006696:	2320      	movmi	r3, #32
 8006698:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800669c:	0711      	lsls	r1, r2, #28
 800669e:	bf44      	itt	mi
 80066a0:	232b      	movmi	r3, #43	; 0x2b
 80066a2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80066a6:	f89a 3000 	ldrb.w	r3, [sl]
 80066aa:	2b2a      	cmp	r3, #42	; 0x2a
 80066ac:	d015      	beq.n	80066da <_svfiprintf_r+0xf6>
 80066ae:	4654      	mov	r4, sl
 80066b0:	2000      	movs	r0, #0
 80066b2:	f04f 0c0a 	mov.w	ip, #10
 80066b6:	9a07      	ldr	r2, [sp, #28]
 80066b8:	4621      	mov	r1, r4
 80066ba:	f811 3b01 	ldrb.w	r3, [r1], #1
 80066be:	3b30      	subs	r3, #48	; 0x30
 80066c0:	2b09      	cmp	r3, #9
 80066c2:	d94e      	bls.n	8006762 <_svfiprintf_r+0x17e>
 80066c4:	b1b0      	cbz	r0, 80066f4 <_svfiprintf_r+0x110>
 80066c6:	9207      	str	r2, [sp, #28]
 80066c8:	e014      	b.n	80066f4 <_svfiprintf_r+0x110>
 80066ca:	eba0 0308 	sub.w	r3, r0, r8
 80066ce:	fa09 f303 	lsl.w	r3, r9, r3
 80066d2:	4313      	orrs	r3, r2
 80066d4:	46a2      	mov	sl, r4
 80066d6:	9304      	str	r3, [sp, #16]
 80066d8:	e7d2      	b.n	8006680 <_svfiprintf_r+0x9c>
 80066da:	9b03      	ldr	r3, [sp, #12]
 80066dc:	1d19      	adds	r1, r3, #4
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	9103      	str	r1, [sp, #12]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	bfbb      	ittet	lt
 80066e6:	425b      	neglt	r3, r3
 80066e8:	f042 0202 	orrlt.w	r2, r2, #2
 80066ec:	9307      	strge	r3, [sp, #28]
 80066ee:	9307      	strlt	r3, [sp, #28]
 80066f0:	bfb8      	it	lt
 80066f2:	9204      	strlt	r2, [sp, #16]
 80066f4:	7823      	ldrb	r3, [r4, #0]
 80066f6:	2b2e      	cmp	r3, #46	; 0x2e
 80066f8:	d10c      	bne.n	8006714 <_svfiprintf_r+0x130>
 80066fa:	7863      	ldrb	r3, [r4, #1]
 80066fc:	2b2a      	cmp	r3, #42	; 0x2a
 80066fe:	d135      	bne.n	800676c <_svfiprintf_r+0x188>
 8006700:	9b03      	ldr	r3, [sp, #12]
 8006702:	3402      	adds	r4, #2
 8006704:	1d1a      	adds	r2, r3, #4
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	9203      	str	r2, [sp, #12]
 800670a:	2b00      	cmp	r3, #0
 800670c:	bfb8      	it	lt
 800670e:	f04f 33ff 	movlt.w	r3, #4294967295
 8006712:	9305      	str	r3, [sp, #20]
 8006714:	f8df a0bc 	ldr.w	sl, [pc, #188]	; 80067d4 <_svfiprintf_r+0x1f0>
 8006718:	2203      	movs	r2, #3
 800671a:	4650      	mov	r0, sl
 800671c:	7821      	ldrb	r1, [r4, #0]
 800671e:	f000 fe43 	bl	80073a8 <memchr>
 8006722:	b140      	cbz	r0, 8006736 <_svfiprintf_r+0x152>
 8006724:	2340      	movs	r3, #64	; 0x40
 8006726:	eba0 000a 	sub.w	r0, r0, sl
 800672a:	fa03 f000 	lsl.w	r0, r3, r0
 800672e:	9b04      	ldr	r3, [sp, #16]
 8006730:	3401      	adds	r4, #1
 8006732:	4303      	orrs	r3, r0
 8006734:	9304      	str	r3, [sp, #16]
 8006736:	f814 1b01 	ldrb.w	r1, [r4], #1
 800673a:	2206      	movs	r2, #6
 800673c:	4826      	ldr	r0, [pc, #152]	; (80067d8 <_svfiprintf_r+0x1f4>)
 800673e:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006742:	f000 fe31 	bl	80073a8 <memchr>
 8006746:	2800      	cmp	r0, #0
 8006748:	d038      	beq.n	80067bc <_svfiprintf_r+0x1d8>
 800674a:	4b24      	ldr	r3, [pc, #144]	; (80067dc <_svfiprintf_r+0x1f8>)
 800674c:	bb1b      	cbnz	r3, 8006796 <_svfiprintf_r+0x1b2>
 800674e:	9b03      	ldr	r3, [sp, #12]
 8006750:	3307      	adds	r3, #7
 8006752:	f023 0307 	bic.w	r3, r3, #7
 8006756:	3308      	adds	r3, #8
 8006758:	9303      	str	r3, [sp, #12]
 800675a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800675c:	4433      	add	r3, r6
 800675e:	9309      	str	r3, [sp, #36]	; 0x24
 8006760:	e767      	b.n	8006632 <_svfiprintf_r+0x4e>
 8006762:	460c      	mov	r4, r1
 8006764:	2001      	movs	r0, #1
 8006766:	fb0c 3202 	mla	r2, ip, r2, r3
 800676a:	e7a5      	b.n	80066b8 <_svfiprintf_r+0xd4>
 800676c:	2300      	movs	r3, #0
 800676e:	f04f 0c0a 	mov.w	ip, #10
 8006772:	4619      	mov	r1, r3
 8006774:	3401      	adds	r4, #1
 8006776:	9305      	str	r3, [sp, #20]
 8006778:	4620      	mov	r0, r4
 800677a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800677e:	3a30      	subs	r2, #48	; 0x30
 8006780:	2a09      	cmp	r2, #9
 8006782:	d903      	bls.n	800678c <_svfiprintf_r+0x1a8>
 8006784:	2b00      	cmp	r3, #0
 8006786:	d0c5      	beq.n	8006714 <_svfiprintf_r+0x130>
 8006788:	9105      	str	r1, [sp, #20]
 800678a:	e7c3      	b.n	8006714 <_svfiprintf_r+0x130>
 800678c:	4604      	mov	r4, r0
 800678e:	2301      	movs	r3, #1
 8006790:	fb0c 2101 	mla	r1, ip, r1, r2
 8006794:	e7f0      	b.n	8006778 <_svfiprintf_r+0x194>
 8006796:	ab03      	add	r3, sp, #12
 8006798:	9300      	str	r3, [sp, #0]
 800679a:	462a      	mov	r2, r5
 800679c:	4638      	mov	r0, r7
 800679e:	4b10      	ldr	r3, [pc, #64]	; (80067e0 <_svfiprintf_r+0x1fc>)
 80067a0:	a904      	add	r1, sp, #16
 80067a2:	f3af 8000 	nop.w
 80067a6:	1c42      	adds	r2, r0, #1
 80067a8:	4606      	mov	r6, r0
 80067aa:	d1d6      	bne.n	800675a <_svfiprintf_r+0x176>
 80067ac:	89ab      	ldrh	r3, [r5, #12]
 80067ae:	065b      	lsls	r3, r3, #25
 80067b0:	f53f af2c 	bmi.w	800660c <_svfiprintf_r+0x28>
 80067b4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80067b6:	b01d      	add	sp, #116	; 0x74
 80067b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80067bc:	ab03      	add	r3, sp, #12
 80067be:	9300      	str	r3, [sp, #0]
 80067c0:	462a      	mov	r2, r5
 80067c2:	4638      	mov	r0, r7
 80067c4:	4b06      	ldr	r3, [pc, #24]	; (80067e0 <_svfiprintf_r+0x1fc>)
 80067c6:	a904      	add	r1, sp, #16
 80067c8:	f000 f9d4 	bl	8006b74 <_printf_i>
 80067cc:	e7eb      	b.n	80067a6 <_svfiprintf_r+0x1c2>
 80067ce:	bf00      	nop
 80067d0:	0800794a 	.word	0x0800794a
 80067d4:	08007950 	.word	0x08007950
 80067d8:	08007954 	.word	0x08007954
 80067dc:	00000000 	.word	0x00000000
 80067e0:	0800652d 	.word	0x0800652d

080067e4 <__sfputc_r>:
 80067e4:	6893      	ldr	r3, [r2, #8]
 80067e6:	b410      	push	{r4}
 80067e8:	3b01      	subs	r3, #1
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	6093      	str	r3, [r2, #8]
 80067ee:	da07      	bge.n	8006800 <__sfputc_r+0x1c>
 80067f0:	6994      	ldr	r4, [r2, #24]
 80067f2:	42a3      	cmp	r3, r4
 80067f4:	db01      	blt.n	80067fa <__sfputc_r+0x16>
 80067f6:	290a      	cmp	r1, #10
 80067f8:	d102      	bne.n	8006800 <__sfputc_r+0x1c>
 80067fa:	bc10      	pop	{r4}
 80067fc:	f000 baf0 	b.w	8006de0 <__swbuf_r>
 8006800:	6813      	ldr	r3, [r2, #0]
 8006802:	1c58      	adds	r0, r3, #1
 8006804:	6010      	str	r0, [r2, #0]
 8006806:	7019      	strb	r1, [r3, #0]
 8006808:	4608      	mov	r0, r1
 800680a:	bc10      	pop	{r4}
 800680c:	4770      	bx	lr

0800680e <__sfputs_r>:
 800680e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006810:	4606      	mov	r6, r0
 8006812:	460f      	mov	r7, r1
 8006814:	4614      	mov	r4, r2
 8006816:	18d5      	adds	r5, r2, r3
 8006818:	42ac      	cmp	r4, r5
 800681a:	d101      	bne.n	8006820 <__sfputs_r+0x12>
 800681c:	2000      	movs	r0, #0
 800681e:	e007      	b.n	8006830 <__sfputs_r+0x22>
 8006820:	463a      	mov	r2, r7
 8006822:	4630      	mov	r0, r6
 8006824:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006828:	f7ff ffdc 	bl	80067e4 <__sfputc_r>
 800682c:	1c43      	adds	r3, r0, #1
 800682e:	d1f3      	bne.n	8006818 <__sfputs_r+0xa>
 8006830:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006834 <_vfiprintf_r>:
 8006834:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006838:	460d      	mov	r5, r1
 800683a:	4614      	mov	r4, r2
 800683c:	4698      	mov	r8, r3
 800683e:	4606      	mov	r6, r0
 8006840:	b09d      	sub	sp, #116	; 0x74
 8006842:	b118      	cbz	r0, 800684c <_vfiprintf_r+0x18>
 8006844:	6983      	ldr	r3, [r0, #24]
 8006846:	b90b      	cbnz	r3, 800684c <_vfiprintf_r+0x18>
 8006848:	f000 fca8 	bl	800719c <__sinit>
 800684c:	4b89      	ldr	r3, [pc, #548]	; (8006a74 <_vfiprintf_r+0x240>)
 800684e:	429d      	cmp	r5, r3
 8006850:	d11b      	bne.n	800688a <_vfiprintf_r+0x56>
 8006852:	6875      	ldr	r5, [r6, #4]
 8006854:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006856:	07d9      	lsls	r1, r3, #31
 8006858:	d405      	bmi.n	8006866 <_vfiprintf_r+0x32>
 800685a:	89ab      	ldrh	r3, [r5, #12]
 800685c:	059a      	lsls	r2, r3, #22
 800685e:	d402      	bmi.n	8006866 <_vfiprintf_r+0x32>
 8006860:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006862:	f000 fd39 	bl	80072d8 <__retarget_lock_acquire_recursive>
 8006866:	89ab      	ldrh	r3, [r5, #12]
 8006868:	071b      	lsls	r3, r3, #28
 800686a:	d501      	bpl.n	8006870 <_vfiprintf_r+0x3c>
 800686c:	692b      	ldr	r3, [r5, #16]
 800686e:	b9eb      	cbnz	r3, 80068ac <_vfiprintf_r+0x78>
 8006870:	4629      	mov	r1, r5
 8006872:	4630      	mov	r0, r6
 8006874:	f000 fb06 	bl	8006e84 <__swsetup_r>
 8006878:	b1c0      	cbz	r0, 80068ac <_vfiprintf_r+0x78>
 800687a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800687c:	07dc      	lsls	r4, r3, #31
 800687e:	d50e      	bpl.n	800689e <_vfiprintf_r+0x6a>
 8006880:	f04f 30ff 	mov.w	r0, #4294967295
 8006884:	b01d      	add	sp, #116	; 0x74
 8006886:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800688a:	4b7b      	ldr	r3, [pc, #492]	; (8006a78 <_vfiprintf_r+0x244>)
 800688c:	429d      	cmp	r5, r3
 800688e:	d101      	bne.n	8006894 <_vfiprintf_r+0x60>
 8006890:	68b5      	ldr	r5, [r6, #8]
 8006892:	e7df      	b.n	8006854 <_vfiprintf_r+0x20>
 8006894:	4b79      	ldr	r3, [pc, #484]	; (8006a7c <_vfiprintf_r+0x248>)
 8006896:	429d      	cmp	r5, r3
 8006898:	bf08      	it	eq
 800689a:	68f5      	ldreq	r5, [r6, #12]
 800689c:	e7da      	b.n	8006854 <_vfiprintf_r+0x20>
 800689e:	89ab      	ldrh	r3, [r5, #12]
 80068a0:	0598      	lsls	r0, r3, #22
 80068a2:	d4ed      	bmi.n	8006880 <_vfiprintf_r+0x4c>
 80068a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80068a6:	f000 fd18 	bl	80072da <__retarget_lock_release_recursive>
 80068aa:	e7e9      	b.n	8006880 <_vfiprintf_r+0x4c>
 80068ac:	2300      	movs	r3, #0
 80068ae:	9309      	str	r3, [sp, #36]	; 0x24
 80068b0:	2320      	movs	r3, #32
 80068b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80068b6:	2330      	movs	r3, #48	; 0x30
 80068b8:	f04f 0901 	mov.w	r9, #1
 80068bc:	f8cd 800c 	str.w	r8, [sp, #12]
 80068c0:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006a80 <_vfiprintf_r+0x24c>
 80068c4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80068c8:	4623      	mov	r3, r4
 80068ca:	469a      	mov	sl, r3
 80068cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80068d0:	b10a      	cbz	r2, 80068d6 <_vfiprintf_r+0xa2>
 80068d2:	2a25      	cmp	r2, #37	; 0x25
 80068d4:	d1f9      	bne.n	80068ca <_vfiprintf_r+0x96>
 80068d6:	ebba 0b04 	subs.w	fp, sl, r4
 80068da:	d00b      	beq.n	80068f4 <_vfiprintf_r+0xc0>
 80068dc:	465b      	mov	r3, fp
 80068de:	4622      	mov	r2, r4
 80068e0:	4629      	mov	r1, r5
 80068e2:	4630      	mov	r0, r6
 80068e4:	f7ff ff93 	bl	800680e <__sfputs_r>
 80068e8:	3001      	adds	r0, #1
 80068ea:	f000 80aa 	beq.w	8006a42 <_vfiprintf_r+0x20e>
 80068ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80068f0:	445a      	add	r2, fp
 80068f2:	9209      	str	r2, [sp, #36]	; 0x24
 80068f4:	f89a 3000 	ldrb.w	r3, [sl]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	f000 80a2 	beq.w	8006a42 <_vfiprintf_r+0x20e>
 80068fe:	2300      	movs	r3, #0
 8006900:	f04f 32ff 	mov.w	r2, #4294967295
 8006904:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006908:	f10a 0a01 	add.w	sl, sl, #1
 800690c:	9304      	str	r3, [sp, #16]
 800690e:	9307      	str	r3, [sp, #28]
 8006910:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006914:	931a      	str	r3, [sp, #104]	; 0x68
 8006916:	4654      	mov	r4, sl
 8006918:	2205      	movs	r2, #5
 800691a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800691e:	4858      	ldr	r0, [pc, #352]	; (8006a80 <_vfiprintf_r+0x24c>)
 8006920:	f000 fd42 	bl	80073a8 <memchr>
 8006924:	9a04      	ldr	r2, [sp, #16]
 8006926:	b9d8      	cbnz	r0, 8006960 <_vfiprintf_r+0x12c>
 8006928:	06d1      	lsls	r1, r2, #27
 800692a:	bf44      	itt	mi
 800692c:	2320      	movmi	r3, #32
 800692e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006932:	0713      	lsls	r3, r2, #28
 8006934:	bf44      	itt	mi
 8006936:	232b      	movmi	r3, #43	; 0x2b
 8006938:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800693c:	f89a 3000 	ldrb.w	r3, [sl]
 8006940:	2b2a      	cmp	r3, #42	; 0x2a
 8006942:	d015      	beq.n	8006970 <_vfiprintf_r+0x13c>
 8006944:	4654      	mov	r4, sl
 8006946:	2000      	movs	r0, #0
 8006948:	f04f 0c0a 	mov.w	ip, #10
 800694c:	9a07      	ldr	r2, [sp, #28]
 800694e:	4621      	mov	r1, r4
 8006950:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006954:	3b30      	subs	r3, #48	; 0x30
 8006956:	2b09      	cmp	r3, #9
 8006958:	d94e      	bls.n	80069f8 <_vfiprintf_r+0x1c4>
 800695a:	b1b0      	cbz	r0, 800698a <_vfiprintf_r+0x156>
 800695c:	9207      	str	r2, [sp, #28]
 800695e:	e014      	b.n	800698a <_vfiprintf_r+0x156>
 8006960:	eba0 0308 	sub.w	r3, r0, r8
 8006964:	fa09 f303 	lsl.w	r3, r9, r3
 8006968:	4313      	orrs	r3, r2
 800696a:	46a2      	mov	sl, r4
 800696c:	9304      	str	r3, [sp, #16]
 800696e:	e7d2      	b.n	8006916 <_vfiprintf_r+0xe2>
 8006970:	9b03      	ldr	r3, [sp, #12]
 8006972:	1d19      	adds	r1, r3, #4
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	9103      	str	r1, [sp, #12]
 8006978:	2b00      	cmp	r3, #0
 800697a:	bfbb      	ittet	lt
 800697c:	425b      	neglt	r3, r3
 800697e:	f042 0202 	orrlt.w	r2, r2, #2
 8006982:	9307      	strge	r3, [sp, #28]
 8006984:	9307      	strlt	r3, [sp, #28]
 8006986:	bfb8      	it	lt
 8006988:	9204      	strlt	r2, [sp, #16]
 800698a:	7823      	ldrb	r3, [r4, #0]
 800698c:	2b2e      	cmp	r3, #46	; 0x2e
 800698e:	d10c      	bne.n	80069aa <_vfiprintf_r+0x176>
 8006990:	7863      	ldrb	r3, [r4, #1]
 8006992:	2b2a      	cmp	r3, #42	; 0x2a
 8006994:	d135      	bne.n	8006a02 <_vfiprintf_r+0x1ce>
 8006996:	9b03      	ldr	r3, [sp, #12]
 8006998:	3402      	adds	r4, #2
 800699a:	1d1a      	adds	r2, r3, #4
 800699c:	681b      	ldr	r3, [r3, #0]
 800699e:	9203      	str	r2, [sp, #12]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	bfb8      	it	lt
 80069a4:	f04f 33ff 	movlt.w	r3, #4294967295
 80069a8:	9305      	str	r3, [sp, #20]
 80069aa:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 8006a84 <_vfiprintf_r+0x250>
 80069ae:	2203      	movs	r2, #3
 80069b0:	4650      	mov	r0, sl
 80069b2:	7821      	ldrb	r1, [r4, #0]
 80069b4:	f000 fcf8 	bl	80073a8 <memchr>
 80069b8:	b140      	cbz	r0, 80069cc <_vfiprintf_r+0x198>
 80069ba:	2340      	movs	r3, #64	; 0x40
 80069bc:	eba0 000a 	sub.w	r0, r0, sl
 80069c0:	fa03 f000 	lsl.w	r0, r3, r0
 80069c4:	9b04      	ldr	r3, [sp, #16]
 80069c6:	3401      	adds	r4, #1
 80069c8:	4303      	orrs	r3, r0
 80069ca:	9304      	str	r3, [sp, #16]
 80069cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 80069d0:	2206      	movs	r2, #6
 80069d2:	482d      	ldr	r0, [pc, #180]	; (8006a88 <_vfiprintf_r+0x254>)
 80069d4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80069d8:	f000 fce6 	bl	80073a8 <memchr>
 80069dc:	2800      	cmp	r0, #0
 80069de:	d03f      	beq.n	8006a60 <_vfiprintf_r+0x22c>
 80069e0:	4b2a      	ldr	r3, [pc, #168]	; (8006a8c <_vfiprintf_r+0x258>)
 80069e2:	bb1b      	cbnz	r3, 8006a2c <_vfiprintf_r+0x1f8>
 80069e4:	9b03      	ldr	r3, [sp, #12]
 80069e6:	3307      	adds	r3, #7
 80069e8:	f023 0307 	bic.w	r3, r3, #7
 80069ec:	3308      	adds	r3, #8
 80069ee:	9303      	str	r3, [sp, #12]
 80069f0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80069f2:	443b      	add	r3, r7
 80069f4:	9309      	str	r3, [sp, #36]	; 0x24
 80069f6:	e767      	b.n	80068c8 <_vfiprintf_r+0x94>
 80069f8:	460c      	mov	r4, r1
 80069fa:	2001      	movs	r0, #1
 80069fc:	fb0c 3202 	mla	r2, ip, r2, r3
 8006a00:	e7a5      	b.n	800694e <_vfiprintf_r+0x11a>
 8006a02:	2300      	movs	r3, #0
 8006a04:	f04f 0c0a 	mov.w	ip, #10
 8006a08:	4619      	mov	r1, r3
 8006a0a:	3401      	adds	r4, #1
 8006a0c:	9305      	str	r3, [sp, #20]
 8006a0e:	4620      	mov	r0, r4
 8006a10:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006a14:	3a30      	subs	r2, #48	; 0x30
 8006a16:	2a09      	cmp	r2, #9
 8006a18:	d903      	bls.n	8006a22 <_vfiprintf_r+0x1ee>
 8006a1a:	2b00      	cmp	r3, #0
 8006a1c:	d0c5      	beq.n	80069aa <_vfiprintf_r+0x176>
 8006a1e:	9105      	str	r1, [sp, #20]
 8006a20:	e7c3      	b.n	80069aa <_vfiprintf_r+0x176>
 8006a22:	4604      	mov	r4, r0
 8006a24:	2301      	movs	r3, #1
 8006a26:	fb0c 2101 	mla	r1, ip, r1, r2
 8006a2a:	e7f0      	b.n	8006a0e <_vfiprintf_r+0x1da>
 8006a2c:	ab03      	add	r3, sp, #12
 8006a2e:	9300      	str	r3, [sp, #0]
 8006a30:	462a      	mov	r2, r5
 8006a32:	4630      	mov	r0, r6
 8006a34:	4b16      	ldr	r3, [pc, #88]	; (8006a90 <_vfiprintf_r+0x25c>)
 8006a36:	a904      	add	r1, sp, #16
 8006a38:	f3af 8000 	nop.w
 8006a3c:	4607      	mov	r7, r0
 8006a3e:	1c78      	adds	r0, r7, #1
 8006a40:	d1d6      	bne.n	80069f0 <_vfiprintf_r+0x1bc>
 8006a42:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006a44:	07d9      	lsls	r1, r3, #31
 8006a46:	d405      	bmi.n	8006a54 <_vfiprintf_r+0x220>
 8006a48:	89ab      	ldrh	r3, [r5, #12]
 8006a4a:	059a      	lsls	r2, r3, #22
 8006a4c:	d402      	bmi.n	8006a54 <_vfiprintf_r+0x220>
 8006a4e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006a50:	f000 fc43 	bl	80072da <__retarget_lock_release_recursive>
 8006a54:	89ab      	ldrh	r3, [r5, #12]
 8006a56:	065b      	lsls	r3, r3, #25
 8006a58:	f53f af12 	bmi.w	8006880 <_vfiprintf_r+0x4c>
 8006a5c:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006a5e:	e711      	b.n	8006884 <_vfiprintf_r+0x50>
 8006a60:	ab03      	add	r3, sp, #12
 8006a62:	9300      	str	r3, [sp, #0]
 8006a64:	462a      	mov	r2, r5
 8006a66:	4630      	mov	r0, r6
 8006a68:	4b09      	ldr	r3, [pc, #36]	; (8006a90 <_vfiprintf_r+0x25c>)
 8006a6a:	a904      	add	r1, sp, #16
 8006a6c:	f000 f882 	bl	8006b74 <_printf_i>
 8006a70:	e7e4      	b.n	8006a3c <_vfiprintf_r+0x208>
 8006a72:	bf00      	nop
 8006a74:	080079a0 	.word	0x080079a0
 8006a78:	080079c0 	.word	0x080079c0
 8006a7c:	08007980 	.word	0x08007980
 8006a80:	0800794a 	.word	0x0800794a
 8006a84:	08007950 	.word	0x08007950
 8006a88:	08007954 	.word	0x08007954
 8006a8c:	00000000 	.word	0x00000000
 8006a90:	0800680f 	.word	0x0800680f

08006a94 <_printf_common>:
 8006a94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006a98:	4616      	mov	r6, r2
 8006a9a:	4699      	mov	r9, r3
 8006a9c:	688a      	ldr	r2, [r1, #8]
 8006a9e:	690b      	ldr	r3, [r1, #16]
 8006aa0:	4607      	mov	r7, r0
 8006aa2:	4293      	cmp	r3, r2
 8006aa4:	bfb8      	it	lt
 8006aa6:	4613      	movlt	r3, r2
 8006aa8:	6033      	str	r3, [r6, #0]
 8006aaa:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006aae:	460c      	mov	r4, r1
 8006ab0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006ab4:	b10a      	cbz	r2, 8006aba <_printf_common+0x26>
 8006ab6:	3301      	adds	r3, #1
 8006ab8:	6033      	str	r3, [r6, #0]
 8006aba:	6823      	ldr	r3, [r4, #0]
 8006abc:	0699      	lsls	r1, r3, #26
 8006abe:	bf42      	ittt	mi
 8006ac0:	6833      	ldrmi	r3, [r6, #0]
 8006ac2:	3302      	addmi	r3, #2
 8006ac4:	6033      	strmi	r3, [r6, #0]
 8006ac6:	6825      	ldr	r5, [r4, #0]
 8006ac8:	f015 0506 	ands.w	r5, r5, #6
 8006acc:	d106      	bne.n	8006adc <_printf_common+0x48>
 8006ace:	f104 0a19 	add.w	sl, r4, #25
 8006ad2:	68e3      	ldr	r3, [r4, #12]
 8006ad4:	6832      	ldr	r2, [r6, #0]
 8006ad6:	1a9b      	subs	r3, r3, r2
 8006ad8:	42ab      	cmp	r3, r5
 8006ada:	dc28      	bgt.n	8006b2e <_printf_common+0x9a>
 8006adc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006ae0:	1e13      	subs	r3, r2, #0
 8006ae2:	6822      	ldr	r2, [r4, #0]
 8006ae4:	bf18      	it	ne
 8006ae6:	2301      	movne	r3, #1
 8006ae8:	0692      	lsls	r2, r2, #26
 8006aea:	d42d      	bmi.n	8006b48 <_printf_common+0xb4>
 8006aec:	4649      	mov	r1, r9
 8006aee:	4638      	mov	r0, r7
 8006af0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006af4:	47c0      	blx	r8
 8006af6:	3001      	adds	r0, #1
 8006af8:	d020      	beq.n	8006b3c <_printf_common+0xa8>
 8006afa:	6823      	ldr	r3, [r4, #0]
 8006afc:	68e5      	ldr	r5, [r4, #12]
 8006afe:	f003 0306 	and.w	r3, r3, #6
 8006b02:	2b04      	cmp	r3, #4
 8006b04:	bf18      	it	ne
 8006b06:	2500      	movne	r5, #0
 8006b08:	6832      	ldr	r2, [r6, #0]
 8006b0a:	f04f 0600 	mov.w	r6, #0
 8006b0e:	68a3      	ldr	r3, [r4, #8]
 8006b10:	bf08      	it	eq
 8006b12:	1aad      	subeq	r5, r5, r2
 8006b14:	6922      	ldr	r2, [r4, #16]
 8006b16:	bf08      	it	eq
 8006b18:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b1c:	4293      	cmp	r3, r2
 8006b1e:	bfc4      	itt	gt
 8006b20:	1a9b      	subgt	r3, r3, r2
 8006b22:	18ed      	addgt	r5, r5, r3
 8006b24:	341a      	adds	r4, #26
 8006b26:	42b5      	cmp	r5, r6
 8006b28:	d11a      	bne.n	8006b60 <_printf_common+0xcc>
 8006b2a:	2000      	movs	r0, #0
 8006b2c:	e008      	b.n	8006b40 <_printf_common+0xac>
 8006b2e:	2301      	movs	r3, #1
 8006b30:	4652      	mov	r2, sl
 8006b32:	4649      	mov	r1, r9
 8006b34:	4638      	mov	r0, r7
 8006b36:	47c0      	blx	r8
 8006b38:	3001      	adds	r0, #1
 8006b3a:	d103      	bne.n	8006b44 <_printf_common+0xb0>
 8006b3c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b40:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b44:	3501      	adds	r5, #1
 8006b46:	e7c4      	b.n	8006ad2 <_printf_common+0x3e>
 8006b48:	2030      	movs	r0, #48	; 0x30
 8006b4a:	18e1      	adds	r1, r4, r3
 8006b4c:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006b50:	1c5a      	adds	r2, r3, #1
 8006b52:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006b56:	4422      	add	r2, r4
 8006b58:	3302      	adds	r3, #2
 8006b5a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006b5e:	e7c5      	b.n	8006aec <_printf_common+0x58>
 8006b60:	2301      	movs	r3, #1
 8006b62:	4622      	mov	r2, r4
 8006b64:	4649      	mov	r1, r9
 8006b66:	4638      	mov	r0, r7
 8006b68:	47c0      	blx	r8
 8006b6a:	3001      	adds	r0, #1
 8006b6c:	d0e6      	beq.n	8006b3c <_printf_common+0xa8>
 8006b6e:	3601      	adds	r6, #1
 8006b70:	e7d9      	b.n	8006b26 <_printf_common+0x92>
	...

08006b74 <_printf_i>:
 8006b74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006b78:	7e0f      	ldrb	r7, [r1, #24]
 8006b7a:	4691      	mov	r9, r2
 8006b7c:	2f78      	cmp	r7, #120	; 0x78
 8006b7e:	4680      	mov	r8, r0
 8006b80:	460c      	mov	r4, r1
 8006b82:	469a      	mov	sl, r3
 8006b84:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006b86:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006b8a:	d807      	bhi.n	8006b9c <_printf_i+0x28>
 8006b8c:	2f62      	cmp	r7, #98	; 0x62
 8006b8e:	d80a      	bhi.n	8006ba6 <_printf_i+0x32>
 8006b90:	2f00      	cmp	r7, #0
 8006b92:	f000 80d9 	beq.w	8006d48 <_printf_i+0x1d4>
 8006b96:	2f58      	cmp	r7, #88	; 0x58
 8006b98:	f000 80a4 	beq.w	8006ce4 <_printf_i+0x170>
 8006b9c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006ba0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006ba4:	e03a      	b.n	8006c1c <_printf_i+0xa8>
 8006ba6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006baa:	2b15      	cmp	r3, #21
 8006bac:	d8f6      	bhi.n	8006b9c <_printf_i+0x28>
 8006bae:	a101      	add	r1, pc, #4	; (adr r1, 8006bb4 <_printf_i+0x40>)
 8006bb0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006bb4:	08006c0d 	.word	0x08006c0d
 8006bb8:	08006c21 	.word	0x08006c21
 8006bbc:	08006b9d 	.word	0x08006b9d
 8006bc0:	08006b9d 	.word	0x08006b9d
 8006bc4:	08006b9d 	.word	0x08006b9d
 8006bc8:	08006b9d 	.word	0x08006b9d
 8006bcc:	08006c21 	.word	0x08006c21
 8006bd0:	08006b9d 	.word	0x08006b9d
 8006bd4:	08006b9d 	.word	0x08006b9d
 8006bd8:	08006b9d 	.word	0x08006b9d
 8006bdc:	08006b9d 	.word	0x08006b9d
 8006be0:	08006d2f 	.word	0x08006d2f
 8006be4:	08006c51 	.word	0x08006c51
 8006be8:	08006d11 	.word	0x08006d11
 8006bec:	08006b9d 	.word	0x08006b9d
 8006bf0:	08006b9d 	.word	0x08006b9d
 8006bf4:	08006d51 	.word	0x08006d51
 8006bf8:	08006b9d 	.word	0x08006b9d
 8006bfc:	08006c51 	.word	0x08006c51
 8006c00:	08006b9d 	.word	0x08006b9d
 8006c04:	08006b9d 	.word	0x08006b9d
 8006c08:	08006d19 	.word	0x08006d19
 8006c0c:	682b      	ldr	r3, [r5, #0]
 8006c0e:	1d1a      	adds	r2, r3, #4
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	602a      	str	r2, [r5, #0]
 8006c14:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006c18:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	e0a4      	b.n	8006d6a <_printf_i+0x1f6>
 8006c20:	6820      	ldr	r0, [r4, #0]
 8006c22:	6829      	ldr	r1, [r5, #0]
 8006c24:	0606      	lsls	r6, r0, #24
 8006c26:	f101 0304 	add.w	r3, r1, #4
 8006c2a:	d50a      	bpl.n	8006c42 <_printf_i+0xce>
 8006c2c:	680e      	ldr	r6, [r1, #0]
 8006c2e:	602b      	str	r3, [r5, #0]
 8006c30:	2e00      	cmp	r6, #0
 8006c32:	da03      	bge.n	8006c3c <_printf_i+0xc8>
 8006c34:	232d      	movs	r3, #45	; 0x2d
 8006c36:	4276      	negs	r6, r6
 8006c38:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006c3c:	230a      	movs	r3, #10
 8006c3e:	485e      	ldr	r0, [pc, #376]	; (8006db8 <_printf_i+0x244>)
 8006c40:	e019      	b.n	8006c76 <_printf_i+0x102>
 8006c42:	680e      	ldr	r6, [r1, #0]
 8006c44:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006c48:	602b      	str	r3, [r5, #0]
 8006c4a:	bf18      	it	ne
 8006c4c:	b236      	sxthne	r6, r6
 8006c4e:	e7ef      	b.n	8006c30 <_printf_i+0xbc>
 8006c50:	682b      	ldr	r3, [r5, #0]
 8006c52:	6820      	ldr	r0, [r4, #0]
 8006c54:	1d19      	adds	r1, r3, #4
 8006c56:	6029      	str	r1, [r5, #0]
 8006c58:	0601      	lsls	r1, r0, #24
 8006c5a:	d501      	bpl.n	8006c60 <_printf_i+0xec>
 8006c5c:	681e      	ldr	r6, [r3, #0]
 8006c5e:	e002      	b.n	8006c66 <_printf_i+0xf2>
 8006c60:	0646      	lsls	r6, r0, #25
 8006c62:	d5fb      	bpl.n	8006c5c <_printf_i+0xe8>
 8006c64:	881e      	ldrh	r6, [r3, #0]
 8006c66:	2f6f      	cmp	r7, #111	; 0x6f
 8006c68:	bf0c      	ite	eq
 8006c6a:	2308      	moveq	r3, #8
 8006c6c:	230a      	movne	r3, #10
 8006c6e:	4852      	ldr	r0, [pc, #328]	; (8006db8 <_printf_i+0x244>)
 8006c70:	2100      	movs	r1, #0
 8006c72:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006c76:	6865      	ldr	r5, [r4, #4]
 8006c78:	2d00      	cmp	r5, #0
 8006c7a:	bfa8      	it	ge
 8006c7c:	6821      	ldrge	r1, [r4, #0]
 8006c7e:	60a5      	str	r5, [r4, #8]
 8006c80:	bfa4      	itt	ge
 8006c82:	f021 0104 	bicge.w	r1, r1, #4
 8006c86:	6021      	strge	r1, [r4, #0]
 8006c88:	b90e      	cbnz	r6, 8006c8e <_printf_i+0x11a>
 8006c8a:	2d00      	cmp	r5, #0
 8006c8c:	d04d      	beq.n	8006d2a <_printf_i+0x1b6>
 8006c8e:	4615      	mov	r5, r2
 8006c90:	fbb6 f1f3 	udiv	r1, r6, r3
 8006c94:	fb03 6711 	mls	r7, r3, r1, r6
 8006c98:	5dc7      	ldrb	r7, [r0, r7]
 8006c9a:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006c9e:	4637      	mov	r7, r6
 8006ca0:	42bb      	cmp	r3, r7
 8006ca2:	460e      	mov	r6, r1
 8006ca4:	d9f4      	bls.n	8006c90 <_printf_i+0x11c>
 8006ca6:	2b08      	cmp	r3, #8
 8006ca8:	d10b      	bne.n	8006cc2 <_printf_i+0x14e>
 8006caa:	6823      	ldr	r3, [r4, #0]
 8006cac:	07de      	lsls	r6, r3, #31
 8006cae:	d508      	bpl.n	8006cc2 <_printf_i+0x14e>
 8006cb0:	6923      	ldr	r3, [r4, #16]
 8006cb2:	6861      	ldr	r1, [r4, #4]
 8006cb4:	4299      	cmp	r1, r3
 8006cb6:	bfde      	ittt	le
 8006cb8:	2330      	movle	r3, #48	; 0x30
 8006cba:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006cbe:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006cc2:	1b52      	subs	r2, r2, r5
 8006cc4:	6122      	str	r2, [r4, #16]
 8006cc6:	464b      	mov	r3, r9
 8006cc8:	4621      	mov	r1, r4
 8006cca:	4640      	mov	r0, r8
 8006ccc:	f8cd a000 	str.w	sl, [sp]
 8006cd0:	aa03      	add	r2, sp, #12
 8006cd2:	f7ff fedf 	bl	8006a94 <_printf_common>
 8006cd6:	3001      	adds	r0, #1
 8006cd8:	d14c      	bne.n	8006d74 <_printf_i+0x200>
 8006cda:	f04f 30ff 	mov.w	r0, #4294967295
 8006cde:	b004      	add	sp, #16
 8006ce0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ce4:	4834      	ldr	r0, [pc, #208]	; (8006db8 <_printf_i+0x244>)
 8006ce6:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8006cea:	6829      	ldr	r1, [r5, #0]
 8006cec:	6823      	ldr	r3, [r4, #0]
 8006cee:	f851 6b04 	ldr.w	r6, [r1], #4
 8006cf2:	6029      	str	r1, [r5, #0]
 8006cf4:	061d      	lsls	r5, r3, #24
 8006cf6:	d514      	bpl.n	8006d22 <_printf_i+0x1ae>
 8006cf8:	07df      	lsls	r7, r3, #31
 8006cfa:	bf44      	itt	mi
 8006cfc:	f043 0320 	orrmi.w	r3, r3, #32
 8006d00:	6023      	strmi	r3, [r4, #0]
 8006d02:	b91e      	cbnz	r6, 8006d0c <_printf_i+0x198>
 8006d04:	6823      	ldr	r3, [r4, #0]
 8006d06:	f023 0320 	bic.w	r3, r3, #32
 8006d0a:	6023      	str	r3, [r4, #0]
 8006d0c:	2310      	movs	r3, #16
 8006d0e:	e7af      	b.n	8006c70 <_printf_i+0xfc>
 8006d10:	6823      	ldr	r3, [r4, #0]
 8006d12:	f043 0320 	orr.w	r3, r3, #32
 8006d16:	6023      	str	r3, [r4, #0]
 8006d18:	2378      	movs	r3, #120	; 0x78
 8006d1a:	4828      	ldr	r0, [pc, #160]	; (8006dbc <_printf_i+0x248>)
 8006d1c:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006d20:	e7e3      	b.n	8006cea <_printf_i+0x176>
 8006d22:	0659      	lsls	r1, r3, #25
 8006d24:	bf48      	it	mi
 8006d26:	b2b6      	uxthmi	r6, r6
 8006d28:	e7e6      	b.n	8006cf8 <_printf_i+0x184>
 8006d2a:	4615      	mov	r5, r2
 8006d2c:	e7bb      	b.n	8006ca6 <_printf_i+0x132>
 8006d2e:	682b      	ldr	r3, [r5, #0]
 8006d30:	6826      	ldr	r6, [r4, #0]
 8006d32:	1d18      	adds	r0, r3, #4
 8006d34:	6961      	ldr	r1, [r4, #20]
 8006d36:	6028      	str	r0, [r5, #0]
 8006d38:	0635      	lsls	r5, r6, #24
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	d501      	bpl.n	8006d42 <_printf_i+0x1ce>
 8006d3e:	6019      	str	r1, [r3, #0]
 8006d40:	e002      	b.n	8006d48 <_printf_i+0x1d4>
 8006d42:	0670      	lsls	r0, r6, #25
 8006d44:	d5fb      	bpl.n	8006d3e <_printf_i+0x1ca>
 8006d46:	8019      	strh	r1, [r3, #0]
 8006d48:	2300      	movs	r3, #0
 8006d4a:	4615      	mov	r5, r2
 8006d4c:	6123      	str	r3, [r4, #16]
 8006d4e:	e7ba      	b.n	8006cc6 <_printf_i+0x152>
 8006d50:	682b      	ldr	r3, [r5, #0]
 8006d52:	2100      	movs	r1, #0
 8006d54:	1d1a      	adds	r2, r3, #4
 8006d56:	602a      	str	r2, [r5, #0]
 8006d58:	681d      	ldr	r5, [r3, #0]
 8006d5a:	6862      	ldr	r2, [r4, #4]
 8006d5c:	4628      	mov	r0, r5
 8006d5e:	f000 fb23 	bl	80073a8 <memchr>
 8006d62:	b108      	cbz	r0, 8006d68 <_printf_i+0x1f4>
 8006d64:	1b40      	subs	r0, r0, r5
 8006d66:	6060      	str	r0, [r4, #4]
 8006d68:	6863      	ldr	r3, [r4, #4]
 8006d6a:	6123      	str	r3, [r4, #16]
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006d72:	e7a8      	b.n	8006cc6 <_printf_i+0x152>
 8006d74:	462a      	mov	r2, r5
 8006d76:	4649      	mov	r1, r9
 8006d78:	4640      	mov	r0, r8
 8006d7a:	6923      	ldr	r3, [r4, #16]
 8006d7c:	47d0      	blx	sl
 8006d7e:	3001      	adds	r0, #1
 8006d80:	d0ab      	beq.n	8006cda <_printf_i+0x166>
 8006d82:	6823      	ldr	r3, [r4, #0]
 8006d84:	079b      	lsls	r3, r3, #30
 8006d86:	d413      	bmi.n	8006db0 <_printf_i+0x23c>
 8006d88:	68e0      	ldr	r0, [r4, #12]
 8006d8a:	9b03      	ldr	r3, [sp, #12]
 8006d8c:	4298      	cmp	r0, r3
 8006d8e:	bfb8      	it	lt
 8006d90:	4618      	movlt	r0, r3
 8006d92:	e7a4      	b.n	8006cde <_printf_i+0x16a>
 8006d94:	2301      	movs	r3, #1
 8006d96:	4632      	mov	r2, r6
 8006d98:	4649      	mov	r1, r9
 8006d9a:	4640      	mov	r0, r8
 8006d9c:	47d0      	blx	sl
 8006d9e:	3001      	adds	r0, #1
 8006da0:	d09b      	beq.n	8006cda <_printf_i+0x166>
 8006da2:	3501      	adds	r5, #1
 8006da4:	68e3      	ldr	r3, [r4, #12]
 8006da6:	9903      	ldr	r1, [sp, #12]
 8006da8:	1a5b      	subs	r3, r3, r1
 8006daa:	42ab      	cmp	r3, r5
 8006dac:	dcf2      	bgt.n	8006d94 <_printf_i+0x220>
 8006dae:	e7eb      	b.n	8006d88 <_printf_i+0x214>
 8006db0:	2500      	movs	r5, #0
 8006db2:	f104 0619 	add.w	r6, r4, #25
 8006db6:	e7f5      	b.n	8006da4 <_printf_i+0x230>
 8006db8:	0800795b 	.word	0x0800795b
 8006dbc:	0800796c 	.word	0x0800796c

08006dc0 <_sbrk_r>:
 8006dc0:	b538      	push	{r3, r4, r5, lr}
 8006dc2:	2300      	movs	r3, #0
 8006dc4:	4d05      	ldr	r5, [pc, #20]	; (8006ddc <_sbrk_r+0x1c>)
 8006dc6:	4604      	mov	r4, r0
 8006dc8:	4608      	mov	r0, r1
 8006dca:	602b      	str	r3, [r5, #0]
 8006dcc:	f7fc f816 	bl	8002dfc <_sbrk>
 8006dd0:	1c43      	adds	r3, r0, #1
 8006dd2:	d102      	bne.n	8006dda <_sbrk_r+0x1a>
 8006dd4:	682b      	ldr	r3, [r5, #0]
 8006dd6:	b103      	cbz	r3, 8006dda <_sbrk_r+0x1a>
 8006dd8:	6023      	str	r3, [r4, #0]
 8006dda:	bd38      	pop	{r3, r4, r5, pc}
 8006ddc:	20000c3c 	.word	0x20000c3c

08006de0 <__swbuf_r>:
 8006de0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006de2:	460e      	mov	r6, r1
 8006de4:	4614      	mov	r4, r2
 8006de6:	4605      	mov	r5, r0
 8006de8:	b118      	cbz	r0, 8006df2 <__swbuf_r+0x12>
 8006dea:	6983      	ldr	r3, [r0, #24]
 8006dec:	b90b      	cbnz	r3, 8006df2 <__swbuf_r+0x12>
 8006dee:	f000 f9d5 	bl	800719c <__sinit>
 8006df2:	4b21      	ldr	r3, [pc, #132]	; (8006e78 <__swbuf_r+0x98>)
 8006df4:	429c      	cmp	r4, r3
 8006df6:	d12b      	bne.n	8006e50 <__swbuf_r+0x70>
 8006df8:	686c      	ldr	r4, [r5, #4]
 8006dfa:	69a3      	ldr	r3, [r4, #24]
 8006dfc:	60a3      	str	r3, [r4, #8]
 8006dfe:	89a3      	ldrh	r3, [r4, #12]
 8006e00:	071a      	lsls	r2, r3, #28
 8006e02:	d52f      	bpl.n	8006e64 <__swbuf_r+0x84>
 8006e04:	6923      	ldr	r3, [r4, #16]
 8006e06:	b36b      	cbz	r3, 8006e64 <__swbuf_r+0x84>
 8006e08:	6923      	ldr	r3, [r4, #16]
 8006e0a:	6820      	ldr	r0, [r4, #0]
 8006e0c:	b2f6      	uxtb	r6, r6
 8006e0e:	1ac0      	subs	r0, r0, r3
 8006e10:	6963      	ldr	r3, [r4, #20]
 8006e12:	4637      	mov	r7, r6
 8006e14:	4283      	cmp	r3, r0
 8006e16:	dc04      	bgt.n	8006e22 <__swbuf_r+0x42>
 8006e18:	4621      	mov	r1, r4
 8006e1a:	4628      	mov	r0, r5
 8006e1c:	f000 f92a 	bl	8007074 <_fflush_r>
 8006e20:	bb30      	cbnz	r0, 8006e70 <__swbuf_r+0x90>
 8006e22:	68a3      	ldr	r3, [r4, #8]
 8006e24:	3001      	adds	r0, #1
 8006e26:	3b01      	subs	r3, #1
 8006e28:	60a3      	str	r3, [r4, #8]
 8006e2a:	6823      	ldr	r3, [r4, #0]
 8006e2c:	1c5a      	adds	r2, r3, #1
 8006e2e:	6022      	str	r2, [r4, #0]
 8006e30:	701e      	strb	r6, [r3, #0]
 8006e32:	6963      	ldr	r3, [r4, #20]
 8006e34:	4283      	cmp	r3, r0
 8006e36:	d004      	beq.n	8006e42 <__swbuf_r+0x62>
 8006e38:	89a3      	ldrh	r3, [r4, #12]
 8006e3a:	07db      	lsls	r3, r3, #31
 8006e3c:	d506      	bpl.n	8006e4c <__swbuf_r+0x6c>
 8006e3e:	2e0a      	cmp	r6, #10
 8006e40:	d104      	bne.n	8006e4c <__swbuf_r+0x6c>
 8006e42:	4621      	mov	r1, r4
 8006e44:	4628      	mov	r0, r5
 8006e46:	f000 f915 	bl	8007074 <_fflush_r>
 8006e4a:	b988      	cbnz	r0, 8006e70 <__swbuf_r+0x90>
 8006e4c:	4638      	mov	r0, r7
 8006e4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e50:	4b0a      	ldr	r3, [pc, #40]	; (8006e7c <__swbuf_r+0x9c>)
 8006e52:	429c      	cmp	r4, r3
 8006e54:	d101      	bne.n	8006e5a <__swbuf_r+0x7a>
 8006e56:	68ac      	ldr	r4, [r5, #8]
 8006e58:	e7cf      	b.n	8006dfa <__swbuf_r+0x1a>
 8006e5a:	4b09      	ldr	r3, [pc, #36]	; (8006e80 <__swbuf_r+0xa0>)
 8006e5c:	429c      	cmp	r4, r3
 8006e5e:	bf08      	it	eq
 8006e60:	68ec      	ldreq	r4, [r5, #12]
 8006e62:	e7ca      	b.n	8006dfa <__swbuf_r+0x1a>
 8006e64:	4621      	mov	r1, r4
 8006e66:	4628      	mov	r0, r5
 8006e68:	f000 f80c 	bl	8006e84 <__swsetup_r>
 8006e6c:	2800      	cmp	r0, #0
 8006e6e:	d0cb      	beq.n	8006e08 <__swbuf_r+0x28>
 8006e70:	f04f 37ff 	mov.w	r7, #4294967295
 8006e74:	e7ea      	b.n	8006e4c <__swbuf_r+0x6c>
 8006e76:	bf00      	nop
 8006e78:	080079a0 	.word	0x080079a0
 8006e7c:	080079c0 	.word	0x080079c0
 8006e80:	08007980 	.word	0x08007980

08006e84 <__swsetup_r>:
 8006e84:	4b32      	ldr	r3, [pc, #200]	; (8006f50 <__swsetup_r+0xcc>)
 8006e86:	b570      	push	{r4, r5, r6, lr}
 8006e88:	681d      	ldr	r5, [r3, #0]
 8006e8a:	4606      	mov	r6, r0
 8006e8c:	460c      	mov	r4, r1
 8006e8e:	b125      	cbz	r5, 8006e9a <__swsetup_r+0x16>
 8006e90:	69ab      	ldr	r3, [r5, #24]
 8006e92:	b913      	cbnz	r3, 8006e9a <__swsetup_r+0x16>
 8006e94:	4628      	mov	r0, r5
 8006e96:	f000 f981 	bl	800719c <__sinit>
 8006e9a:	4b2e      	ldr	r3, [pc, #184]	; (8006f54 <__swsetup_r+0xd0>)
 8006e9c:	429c      	cmp	r4, r3
 8006e9e:	d10f      	bne.n	8006ec0 <__swsetup_r+0x3c>
 8006ea0:	686c      	ldr	r4, [r5, #4]
 8006ea2:	89a3      	ldrh	r3, [r4, #12]
 8006ea4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ea8:	0719      	lsls	r1, r3, #28
 8006eaa:	d42c      	bmi.n	8006f06 <__swsetup_r+0x82>
 8006eac:	06dd      	lsls	r5, r3, #27
 8006eae:	d411      	bmi.n	8006ed4 <__swsetup_r+0x50>
 8006eb0:	2309      	movs	r3, #9
 8006eb2:	6033      	str	r3, [r6, #0]
 8006eb4:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8006ebc:	81a3      	strh	r3, [r4, #12]
 8006ebe:	e03e      	b.n	8006f3e <__swsetup_r+0xba>
 8006ec0:	4b25      	ldr	r3, [pc, #148]	; (8006f58 <__swsetup_r+0xd4>)
 8006ec2:	429c      	cmp	r4, r3
 8006ec4:	d101      	bne.n	8006eca <__swsetup_r+0x46>
 8006ec6:	68ac      	ldr	r4, [r5, #8]
 8006ec8:	e7eb      	b.n	8006ea2 <__swsetup_r+0x1e>
 8006eca:	4b24      	ldr	r3, [pc, #144]	; (8006f5c <__swsetup_r+0xd8>)
 8006ecc:	429c      	cmp	r4, r3
 8006ece:	bf08      	it	eq
 8006ed0:	68ec      	ldreq	r4, [r5, #12]
 8006ed2:	e7e6      	b.n	8006ea2 <__swsetup_r+0x1e>
 8006ed4:	0758      	lsls	r0, r3, #29
 8006ed6:	d512      	bpl.n	8006efe <__swsetup_r+0x7a>
 8006ed8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006eda:	b141      	cbz	r1, 8006eee <__swsetup_r+0x6a>
 8006edc:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ee0:	4299      	cmp	r1, r3
 8006ee2:	d002      	beq.n	8006eea <__swsetup_r+0x66>
 8006ee4:	4630      	mov	r0, r6
 8006ee6:	f7ff fa45 	bl	8006374 <_free_r>
 8006eea:	2300      	movs	r3, #0
 8006eec:	6363      	str	r3, [r4, #52]	; 0x34
 8006eee:	89a3      	ldrh	r3, [r4, #12]
 8006ef0:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006ef4:	81a3      	strh	r3, [r4, #12]
 8006ef6:	2300      	movs	r3, #0
 8006ef8:	6063      	str	r3, [r4, #4]
 8006efa:	6923      	ldr	r3, [r4, #16]
 8006efc:	6023      	str	r3, [r4, #0]
 8006efe:	89a3      	ldrh	r3, [r4, #12]
 8006f00:	f043 0308 	orr.w	r3, r3, #8
 8006f04:	81a3      	strh	r3, [r4, #12]
 8006f06:	6923      	ldr	r3, [r4, #16]
 8006f08:	b94b      	cbnz	r3, 8006f1e <__swsetup_r+0x9a>
 8006f0a:	89a3      	ldrh	r3, [r4, #12]
 8006f0c:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006f10:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006f14:	d003      	beq.n	8006f1e <__swsetup_r+0x9a>
 8006f16:	4621      	mov	r1, r4
 8006f18:	4630      	mov	r0, r6
 8006f1a:	f000 fa05 	bl	8007328 <__smakebuf_r>
 8006f1e:	89a0      	ldrh	r0, [r4, #12]
 8006f20:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006f24:	f010 0301 	ands.w	r3, r0, #1
 8006f28:	d00a      	beq.n	8006f40 <__swsetup_r+0xbc>
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	60a3      	str	r3, [r4, #8]
 8006f2e:	6963      	ldr	r3, [r4, #20]
 8006f30:	425b      	negs	r3, r3
 8006f32:	61a3      	str	r3, [r4, #24]
 8006f34:	6923      	ldr	r3, [r4, #16]
 8006f36:	b943      	cbnz	r3, 8006f4a <__swsetup_r+0xc6>
 8006f38:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006f3c:	d1ba      	bne.n	8006eb4 <__swsetup_r+0x30>
 8006f3e:	bd70      	pop	{r4, r5, r6, pc}
 8006f40:	0781      	lsls	r1, r0, #30
 8006f42:	bf58      	it	pl
 8006f44:	6963      	ldrpl	r3, [r4, #20]
 8006f46:	60a3      	str	r3, [r4, #8]
 8006f48:	e7f4      	b.n	8006f34 <__swsetup_r+0xb0>
 8006f4a:	2000      	movs	r0, #0
 8006f4c:	e7f7      	b.n	8006f3e <__swsetup_r+0xba>
 8006f4e:	bf00      	nop
 8006f50:	20000210 	.word	0x20000210
 8006f54:	080079a0 	.word	0x080079a0
 8006f58:	080079c0 	.word	0x080079c0
 8006f5c:	08007980 	.word	0x08007980

08006f60 <abort>:
 8006f60:	2006      	movs	r0, #6
 8006f62:	b508      	push	{r3, lr}
 8006f64:	f000 faac 	bl	80074c0 <raise>
 8006f68:	2001      	movs	r0, #1
 8006f6a:	f7fb fed4 	bl	8002d16 <_exit>
	...

08006f70 <__sflush_r>:
 8006f70:	898a      	ldrh	r2, [r1, #12]
 8006f72:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f74:	4605      	mov	r5, r0
 8006f76:	0710      	lsls	r0, r2, #28
 8006f78:	460c      	mov	r4, r1
 8006f7a:	d457      	bmi.n	800702c <__sflush_r+0xbc>
 8006f7c:	684b      	ldr	r3, [r1, #4]
 8006f7e:	2b00      	cmp	r3, #0
 8006f80:	dc04      	bgt.n	8006f8c <__sflush_r+0x1c>
 8006f82:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006f84:	2b00      	cmp	r3, #0
 8006f86:	dc01      	bgt.n	8006f8c <__sflush_r+0x1c>
 8006f88:	2000      	movs	r0, #0
 8006f8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f8c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006f8e:	2e00      	cmp	r6, #0
 8006f90:	d0fa      	beq.n	8006f88 <__sflush_r+0x18>
 8006f92:	2300      	movs	r3, #0
 8006f94:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006f98:	682f      	ldr	r7, [r5, #0]
 8006f9a:	602b      	str	r3, [r5, #0]
 8006f9c:	d032      	beq.n	8007004 <__sflush_r+0x94>
 8006f9e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006fa0:	89a3      	ldrh	r3, [r4, #12]
 8006fa2:	075a      	lsls	r2, r3, #29
 8006fa4:	d505      	bpl.n	8006fb2 <__sflush_r+0x42>
 8006fa6:	6863      	ldr	r3, [r4, #4]
 8006fa8:	1ac0      	subs	r0, r0, r3
 8006faa:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006fac:	b10b      	cbz	r3, 8006fb2 <__sflush_r+0x42>
 8006fae:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006fb0:	1ac0      	subs	r0, r0, r3
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006fb8:	4628      	mov	r0, r5
 8006fba:	6a21      	ldr	r1, [r4, #32]
 8006fbc:	47b0      	blx	r6
 8006fbe:	1c43      	adds	r3, r0, #1
 8006fc0:	89a3      	ldrh	r3, [r4, #12]
 8006fc2:	d106      	bne.n	8006fd2 <__sflush_r+0x62>
 8006fc4:	6829      	ldr	r1, [r5, #0]
 8006fc6:	291d      	cmp	r1, #29
 8006fc8:	d82c      	bhi.n	8007024 <__sflush_r+0xb4>
 8006fca:	4a29      	ldr	r2, [pc, #164]	; (8007070 <__sflush_r+0x100>)
 8006fcc:	40ca      	lsrs	r2, r1
 8006fce:	07d6      	lsls	r6, r2, #31
 8006fd0:	d528      	bpl.n	8007024 <__sflush_r+0xb4>
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	6062      	str	r2, [r4, #4]
 8006fd6:	6922      	ldr	r2, [r4, #16]
 8006fd8:	04d9      	lsls	r1, r3, #19
 8006fda:	6022      	str	r2, [r4, #0]
 8006fdc:	d504      	bpl.n	8006fe8 <__sflush_r+0x78>
 8006fde:	1c42      	adds	r2, r0, #1
 8006fe0:	d101      	bne.n	8006fe6 <__sflush_r+0x76>
 8006fe2:	682b      	ldr	r3, [r5, #0]
 8006fe4:	b903      	cbnz	r3, 8006fe8 <__sflush_r+0x78>
 8006fe6:	6560      	str	r0, [r4, #84]	; 0x54
 8006fe8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fea:	602f      	str	r7, [r5, #0]
 8006fec:	2900      	cmp	r1, #0
 8006fee:	d0cb      	beq.n	8006f88 <__sflush_r+0x18>
 8006ff0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ff4:	4299      	cmp	r1, r3
 8006ff6:	d002      	beq.n	8006ffe <__sflush_r+0x8e>
 8006ff8:	4628      	mov	r0, r5
 8006ffa:	f7ff f9bb 	bl	8006374 <_free_r>
 8006ffe:	2000      	movs	r0, #0
 8007000:	6360      	str	r0, [r4, #52]	; 0x34
 8007002:	e7c2      	b.n	8006f8a <__sflush_r+0x1a>
 8007004:	6a21      	ldr	r1, [r4, #32]
 8007006:	2301      	movs	r3, #1
 8007008:	4628      	mov	r0, r5
 800700a:	47b0      	blx	r6
 800700c:	1c41      	adds	r1, r0, #1
 800700e:	d1c7      	bne.n	8006fa0 <__sflush_r+0x30>
 8007010:	682b      	ldr	r3, [r5, #0]
 8007012:	2b00      	cmp	r3, #0
 8007014:	d0c4      	beq.n	8006fa0 <__sflush_r+0x30>
 8007016:	2b1d      	cmp	r3, #29
 8007018:	d001      	beq.n	800701e <__sflush_r+0xae>
 800701a:	2b16      	cmp	r3, #22
 800701c:	d101      	bne.n	8007022 <__sflush_r+0xb2>
 800701e:	602f      	str	r7, [r5, #0]
 8007020:	e7b2      	b.n	8006f88 <__sflush_r+0x18>
 8007022:	89a3      	ldrh	r3, [r4, #12]
 8007024:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007028:	81a3      	strh	r3, [r4, #12]
 800702a:	e7ae      	b.n	8006f8a <__sflush_r+0x1a>
 800702c:	690f      	ldr	r7, [r1, #16]
 800702e:	2f00      	cmp	r7, #0
 8007030:	d0aa      	beq.n	8006f88 <__sflush_r+0x18>
 8007032:	0793      	lsls	r3, r2, #30
 8007034:	bf18      	it	ne
 8007036:	2300      	movne	r3, #0
 8007038:	680e      	ldr	r6, [r1, #0]
 800703a:	bf08      	it	eq
 800703c:	694b      	ldreq	r3, [r1, #20]
 800703e:	1bf6      	subs	r6, r6, r7
 8007040:	600f      	str	r7, [r1, #0]
 8007042:	608b      	str	r3, [r1, #8]
 8007044:	2e00      	cmp	r6, #0
 8007046:	dd9f      	ble.n	8006f88 <__sflush_r+0x18>
 8007048:	4633      	mov	r3, r6
 800704a:	463a      	mov	r2, r7
 800704c:	4628      	mov	r0, r5
 800704e:	6a21      	ldr	r1, [r4, #32]
 8007050:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8007054:	47e0      	blx	ip
 8007056:	2800      	cmp	r0, #0
 8007058:	dc06      	bgt.n	8007068 <__sflush_r+0xf8>
 800705a:	89a3      	ldrh	r3, [r4, #12]
 800705c:	f04f 30ff 	mov.w	r0, #4294967295
 8007060:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007064:	81a3      	strh	r3, [r4, #12]
 8007066:	e790      	b.n	8006f8a <__sflush_r+0x1a>
 8007068:	4407      	add	r7, r0
 800706a:	1a36      	subs	r6, r6, r0
 800706c:	e7ea      	b.n	8007044 <__sflush_r+0xd4>
 800706e:	bf00      	nop
 8007070:	20400001 	.word	0x20400001

08007074 <_fflush_r>:
 8007074:	b538      	push	{r3, r4, r5, lr}
 8007076:	690b      	ldr	r3, [r1, #16]
 8007078:	4605      	mov	r5, r0
 800707a:	460c      	mov	r4, r1
 800707c:	b913      	cbnz	r3, 8007084 <_fflush_r+0x10>
 800707e:	2500      	movs	r5, #0
 8007080:	4628      	mov	r0, r5
 8007082:	bd38      	pop	{r3, r4, r5, pc}
 8007084:	b118      	cbz	r0, 800708e <_fflush_r+0x1a>
 8007086:	6983      	ldr	r3, [r0, #24]
 8007088:	b90b      	cbnz	r3, 800708e <_fflush_r+0x1a>
 800708a:	f000 f887 	bl	800719c <__sinit>
 800708e:	4b14      	ldr	r3, [pc, #80]	; (80070e0 <_fflush_r+0x6c>)
 8007090:	429c      	cmp	r4, r3
 8007092:	d11b      	bne.n	80070cc <_fflush_r+0x58>
 8007094:	686c      	ldr	r4, [r5, #4]
 8007096:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d0ef      	beq.n	800707e <_fflush_r+0xa>
 800709e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80070a0:	07d0      	lsls	r0, r2, #31
 80070a2:	d404      	bmi.n	80070ae <_fflush_r+0x3a>
 80070a4:	0599      	lsls	r1, r3, #22
 80070a6:	d402      	bmi.n	80070ae <_fflush_r+0x3a>
 80070a8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070aa:	f000 f915 	bl	80072d8 <__retarget_lock_acquire_recursive>
 80070ae:	4628      	mov	r0, r5
 80070b0:	4621      	mov	r1, r4
 80070b2:	f7ff ff5d 	bl	8006f70 <__sflush_r>
 80070b6:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80070b8:	4605      	mov	r5, r0
 80070ba:	07da      	lsls	r2, r3, #31
 80070bc:	d4e0      	bmi.n	8007080 <_fflush_r+0xc>
 80070be:	89a3      	ldrh	r3, [r4, #12]
 80070c0:	059b      	lsls	r3, r3, #22
 80070c2:	d4dd      	bmi.n	8007080 <_fflush_r+0xc>
 80070c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80070c6:	f000 f908 	bl	80072da <__retarget_lock_release_recursive>
 80070ca:	e7d9      	b.n	8007080 <_fflush_r+0xc>
 80070cc:	4b05      	ldr	r3, [pc, #20]	; (80070e4 <_fflush_r+0x70>)
 80070ce:	429c      	cmp	r4, r3
 80070d0:	d101      	bne.n	80070d6 <_fflush_r+0x62>
 80070d2:	68ac      	ldr	r4, [r5, #8]
 80070d4:	e7df      	b.n	8007096 <_fflush_r+0x22>
 80070d6:	4b04      	ldr	r3, [pc, #16]	; (80070e8 <_fflush_r+0x74>)
 80070d8:	429c      	cmp	r4, r3
 80070da:	bf08      	it	eq
 80070dc:	68ec      	ldreq	r4, [r5, #12]
 80070de:	e7da      	b.n	8007096 <_fflush_r+0x22>
 80070e0:	080079a0 	.word	0x080079a0
 80070e4:	080079c0 	.word	0x080079c0
 80070e8:	08007980 	.word	0x08007980

080070ec <std>:
 80070ec:	2300      	movs	r3, #0
 80070ee:	b510      	push	{r4, lr}
 80070f0:	4604      	mov	r4, r0
 80070f2:	e9c0 3300 	strd	r3, r3, [r0]
 80070f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80070fa:	6083      	str	r3, [r0, #8]
 80070fc:	8181      	strh	r1, [r0, #12]
 80070fe:	6643      	str	r3, [r0, #100]	; 0x64
 8007100:	81c2      	strh	r2, [r0, #14]
 8007102:	6183      	str	r3, [r0, #24]
 8007104:	4619      	mov	r1, r3
 8007106:	2208      	movs	r2, #8
 8007108:	305c      	adds	r0, #92	; 0x5c
 800710a:	f7ff f895 	bl	8006238 <memset>
 800710e:	4b05      	ldr	r3, [pc, #20]	; (8007124 <std+0x38>)
 8007110:	6224      	str	r4, [r4, #32]
 8007112:	6263      	str	r3, [r4, #36]	; 0x24
 8007114:	4b04      	ldr	r3, [pc, #16]	; (8007128 <std+0x3c>)
 8007116:	62a3      	str	r3, [r4, #40]	; 0x28
 8007118:	4b04      	ldr	r3, [pc, #16]	; (800712c <std+0x40>)
 800711a:	62e3      	str	r3, [r4, #44]	; 0x2c
 800711c:	4b04      	ldr	r3, [pc, #16]	; (8007130 <std+0x44>)
 800711e:	6323      	str	r3, [r4, #48]	; 0x30
 8007120:	bd10      	pop	{r4, pc}
 8007122:	bf00      	nop
 8007124:	080074f9 	.word	0x080074f9
 8007128:	0800751b 	.word	0x0800751b
 800712c:	08007553 	.word	0x08007553
 8007130:	08007577 	.word	0x08007577

08007134 <_cleanup_r>:
 8007134:	4901      	ldr	r1, [pc, #4]	; (800713c <_cleanup_r+0x8>)
 8007136:	f000 b8af 	b.w	8007298 <_fwalk_reent>
 800713a:	bf00      	nop
 800713c:	08007075 	.word	0x08007075

08007140 <__sfmoreglue>:
 8007140:	2268      	movs	r2, #104	; 0x68
 8007142:	b570      	push	{r4, r5, r6, lr}
 8007144:	1e4d      	subs	r5, r1, #1
 8007146:	4355      	muls	r5, r2
 8007148:	460e      	mov	r6, r1
 800714a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800714e:	f7ff f979 	bl	8006444 <_malloc_r>
 8007152:	4604      	mov	r4, r0
 8007154:	b140      	cbz	r0, 8007168 <__sfmoreglue+0x28>
 8007156:	2100      	movs	r1, #0
 8007158:	e9c0 1600 	strd	r1, r6, [r0]
 800715c:	300c      	adds	r0, #12
 800715e:	60a0      	str	r0, [r4, #8]
 8007160:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8007164:	f7ff f868 	bl	8006238 <memset>
 8007168:	4620      	mov	r0, r4
 800716a:	bd70      	pop	{r4, r5, r6, pc}

0800716c <__sfp_lock_acquire>:
 800716c:	4801      	ldr	r0, [pc, #4]	; (8007174 <__sfp_lock_acquire+0x8>)
 800716e:	f000 b8b3 	b.w	80072d8 <__retarget_lock_acquire_recursive>
 8007172:	bf00      	nop
 8007174:	20000c39 	.word	0x20000c39

08007178 <__sfp_lock_release>:
 8007178:	4801      	ldr	r0, [pc, #4]	; (8007180 <__sfp_lock_release+0x8>)
 800717a:	f000 b8ae 	b.w	80072da <__retarget_lock_release_recursive>
 800717e:	bf00      	nop
 8007180:	20000c39 	.word	0x20000c39

08007184 <__sinit_lock_acquire>:
 8007184:	4801      	ldr	r0, [pc, #4]	; (800718c <__sinit_lock_acquire+0x8>)
 8007186:	f000 b8a7 	b.w	80072d8 <__retarget_lock_acquire_recursive>
 800718a:	bf00      	nop
 800718c:	20000c3a 	.word	0x20000c3a

08007190 <__sinit_lock_release>:
 8007190:	4801      	ldr	r0, [pc, #4]	; (8007198 <__sinit_lock_release+0x8>)
 8007192:	f000 b8a2 	b.w	80072da <__retarget_lock_release_recursive>
 8007196:	bf00      	nop
 8007198:	20000c3a 	.word	0x20000c3a

0800719c <__sinit>:
 800719c:	b510      	push	{r4, lr}
 800719e:	4604      	mov	r4, r0
 80071a0:	f7ff fff0 	bl	8007184 <__sinit_lock_acquire>
 80071a4:	69a3      	ldr	r3, [r4, #24]
 80071a6:	b11b      	cbz	r3, 80071b0 <__sinit+0x14>
 80071a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80071ac:	f7ff bff0 	b.w	8007190 <__sinit_lock_release>
 80071b0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 80071b4:	6523      	str	r3, [r4, #80]	; 0x50
 80071b6:	4b13      	ldr	r3, [pc, #76]	; (8007204 <__sinit+0x68>)
 80071b8:	4a13      	ldr	r2, [pc, #76]	; (8007208 <__sinit+0x6c>)
 80071ba:	681b      	ldr	r3, [r3, #0]
 80071bc:	62a2      	str	r2, [r4, #40]	; 0x28
 80071be:	42a3      	cmp	r3, r4
 80071c0:	bf08      	it	eq
 80071c2:	2301      	moveq	r3, #1
 80071c4:	4620      	mov	r0, r4
 80071c6:	bf08      	it	eq
 80071c8:	61a3      	streq	r3, [r4, #24]
 80071ca:	f000 f81f 	bl	800720c <__sfp>
 80071ce:	6060      	str	r0, [r4, #4]
 80071d0:	4620      	mov	r0, r4
 80071d2:	f000 f81b 	bl	800720c <__sfp>
 80071d6:	60a0      	str	r0, [r4, #8]
 80071d8:	4620      	mov	r0, r4
 80071da:	f000 f817 	bl	800720c <__sfp>
 80071de:	2200      	movs	r2, #0
 80071e0:	2104      	movs	r1, #4
 80071e2:	60e0      	str	r0, [r4, #12]
 80071e4:	6860      	ldr	r0, [r4, #4]
 80071e6:	f7ff ff81 	bl	80070ec <std>
 80071ea:	2201      	movs	r2, #1
 80071ec:	2109      	movs	r1, #9
 80071ee:	68a0      	ldr	r0, [r4, #8]
 80071f0:	f7ff ff7c 	bl	80070ec <std>
 80071f4:	2202      	movs	r2, #2
 80071f6:	2112      	movs	r1, #18
 80071f8:	68e0      	ldr	r0, [r4, #12]
 80071fa:	f7ff ff77 	bl	80070ec <std>
 80071fe:	2301      	movs	r3, #1
 8007200:	61a3      	str	r3, [r4, #24]
 8007202:	e7d1      	b.n	80071a8 <__sinit+0xc>
 8007204:	08007898 	.word	0x08007898
 8007208:	08007135 	.word	0x08007135

0800720c <__sfp>:
 800720c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800720e:	4607      	mov	r7, r0
 8007210:	f7ff ffac 	bl	800716c <__sfp_lock_acquire>
 8007214:	4b1e      	ldr	r3, [pc, #120]	; (8007290 <__sfp+0x84>)
 8007216:	681e      	ldr	r6, [r3, #0]
 8007218:	69b3      	ldr	r3, [r6, #24]
 800721a:	b913      	cbnz	r3, 8007222 <__sfp+0x16>
 800721c:	4630      	mov	r0, r6
 800721e:	f7ff ffbd 	bl	800719c <__sinit>
 8007222:	3648      	adds	r6, #72	; 0x48
 8007224:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8007228:	3b01      	subs	r3, #1
 800722a:	d503      	bpl.n	8007234 <__sfp+0x28>
 800722c:	6833      	ldr	r3, [r6, #0]
 800722e:	b30b      	cbz	r3, 8007274 <__sfp+0x68>
 8007230:	6836      	ldr	r6, [r6, #0]
 8007232:	e7f7      	b.n	8007224 <__sfp+0x18>
 8007234:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8007238:	b9d5      	cbnz	r5, 8007270 <__sfp+0x64>
 800723a:	4b16      	ldr	r3, [pc, #88]	; (8007294 <__sfp+0x88>)
 800723c:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8007240:	60e3      	str	r3, [r4, #12]
 8007242:	6665      	str	r5, [r4, #100]	; 0x64
 8007244:	f000 f847 	bl	80072d6 <__retarget_lock_init_recursive>
 8007248:	f7ff ff96 	bl	8007178 <__sfp_lock_release>
 800724c:	2208      	movs	r2, #8
 800724e:	4629      	mov	r1, r5
 8007250:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8007254:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8007258:	6025      	str	r5, [r4, #0]
 800725a:	61a5      	str	r5, [r4, #24]
 800725c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8007260:	f7fe ffea 	bl	8006238 <memset>
 8007264:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8007268:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800726c:	4620      	mov	r0, r4
 800726e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007270:	3468      	adds	r4, #104	; 0x68
 8007272:	e7d9      	b.n	8007228 <__sfp+0x1c>
 8007274:	2104      	movs	r1, #4
 8007276:	4638      	mov	r0, r7
 8007278:	f7ff ff62 	bl	8007140 <__sfmoreglue>
 800727c:	4604      	mov	r4, r0
 800727e:	6030      	str	r0, [r6, #0]
 8007280:	2800      	cmp	r0, #0
 8007282:	d1d5      	bne.n	8007230 <__sfp+0x24>
 8007284:	f7ff ff78 	bl	8007178 <__sfp_lock_release>
 8007288:	230c      	movs	r3, #12
 800728a:	603b      	str	r3, [r7, #0]
 800728c:	e7ee      	b.n	800726c <__sfp+0x60>
 800728e:	bf00      	nop
 8007290:	08007898 	.word	0x08007898
 8007294:	ffff0001 	.word	0xffff0001

08007298 <_fwalk_reent>:
 8007298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800729c:	4606      	mov	r6, r0
 800729e:	4688      	mov	r8, r1
 80072a0:	2700      	movs	r7, #0
 80072a2:	f100 0448 	add.w	r4, r0, #72	; 0x48
 80072a6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80072aa:	f1b9 0901 	subs.w	r9, r9, #1
 80072ae:	d505      	bpl.n	80072bc <_fwalk_reent+0x24>
 80072b0:	6824      	ldr	r4, [r4, #0]
 80072b2:	2c00      	cmp	r4, #0
 80072b4:	d1f7      	bne.n	80072a6 <_fwalk_reent+0xe>
 80072b6:	4638      	mov	r0, r7
 80072b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072bc:	89ab      	ldrh	r3, [r5, #12]
 80072be:	2b01      	cmp	r3, #1
 80072c0:	d907      	bls.n	80072d2 <_fwalk_reent+0x3a>
 80072c2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80072c6:	3301      	adds	r3, #1
 80072c8:	d003      	beq.n	80072d2 <_fwalk_reent+0x3a>
 80072ca:	4629      	mov	r1, r5
 80072cc:	4630      	mov	r0, r6
 80072ce:	47c0      	blx	r8
 80072d0:	4307      	orrs	r7, r0
 80072d2:	3568      	adds	r5, #104	; 0x68
 80072d4:	e7e9      	b.n	80072aa <_fwalk_reent+0x12>

080072d6 <__retarget_lock_init_recursive>:
 80072d6:	4770      	bx	lr

080072d8 <__retarget_lock_acquire_recursive>:
 80072d8:	4770      	bx	lr

080072da <__retarget_lock_release_recursive>:
 80072da:	4770      	bx	lr

080072dc <__swhatbuf_r>:
 80072dc:	b570      	push	{r4, r5, r6, lr}
 80072de:	460e      	mov	r6, r1
 80072e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072e4:	4614      	mov	r4, r2
 80072e6:	2900      	cmp	r1, #0
 80072e8:	461d      	mov	r5, r3
 80072ea:	b096      	sub	sp, #88	; 0x58
 80072ec:	da08      	bge.n	8007300 <__swhatbuf_r+0x24>
 80072ee:	2200      	movs	r2, #0
 80072f0:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80072f4:	602a      	str	r2, [r5, #0]
 80072f6:	061a      	lsls	r2, r3, #24
 80072f8:	d410      	bmi.n	800731c <__swhatbuf_r+0x40>
 80072fa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80072fe:	e00e      	b.n	800731e <__swhatbuf_r+0x42>
 8007300:	466a      	mov	r2, sp
 8007302:	f000 f95f 	bl	80075c4 <_fstat_r>
 8007306:	2800      	cmp	r0, #0
 8007308:	dbf1      	blt.n	80072ee <__swhatbuf_r+0x12>
 800730a:	9a01      	ldr	r2, [sp, #4]
 800730c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8007310:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8007314:	425a      	negs	r2, r3
 8007316:	415a      	adcs	r2, r3
 8007318:	602a      	str	r2, [r5, #0]
 800731a:	e7ee      	b.n	80072fa <__swhatbuf_r+0x1e>
 800731c:	2340      	movs	r3, #64	; 0x40
 800731e:	2000      	movs	r0, #0
 8007320:	6023      	str	r3, [r4, #0]
 8007322:	b016      	add	sp, #88	; 0x58
 8007324:	bd70      	pop	{r4, r5, r6, pc}
	...

08007328 <__smakebuf_r>:
 8007328:	898b      	ldrh	r3, [r1, #12]
 800732a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800732c:	079d      	lsls	r5, r3, #30
 800732e:	4606      	mov	r6, r0
 8007330:	460c      	mov	r4, r1
 8007332:	d507      	bpl.n	8007344 <__smakebuf_r+0x1c>
 8007334:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007338:	6023      	str	r3, [r4, #0]
 800733a:	6123      	str	r3, [r4, #16]
 800733c:	2301      	movs	r3, #1
 800733e:	6163      	str	r3, [r4, #20]
 8007340:	b002      	add	sp, #8
 8007342:	bd70      	pop	{r4, r5, r6, pc}
 8007344:	466a      	mov	r2, sp
 8007346:	ab01      	add	r3, sp, #4
 8007348:	f7ff ffc8 	bl	80072dc <__swhatbuf_r>
 800734c:	9900      	ldr	r1, [sp, #0]
 800734e:	4605      	mov	r5, r0
 8007350:	4630      	mov	r0, r6
 8007352:	f7ff f877 	bl	8006444 <_malloc_r>
 8007356:	b948      	cbnz	r0, 800736c <__smakebuf_r+0x44>
 8007358:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800735c:	059a      	lsls	r2, r3, #22
 800735e:	d4ef      	bmi.n	8007340 <__smakebuf_r+0x18>
 8007360:	f023 0303 	bic.w	r3, r3, #3
 8007364:	f043 0302 	orr.w	r3, r3, #2
 8007368:	81a3      	strh	r3, [r4, #12]
 800736a:	e7e3      	b.n	8007334 <__smakebuf_r+0xc>
 800736c:	4b0d      	ldr	r3, [pc, #52]	; (80073a4 <__smakebuf_r+0x7c>)
 800736e:	62b3      	str	r3, [r6, #40]	; 0x28
 8007370:	89a3      	ldrh	r3, [r4, #12]
 8007372:	6020      	str	r0, [r4, #0]
 8007374:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007378:	81a3      	strh	r3, [r4, #12]
 800737a:	9b00      	ldr	r3, [sp, #0]
 800737c:	6120      	str	r0, [r4, #16]
 800737e:	6163      	str	r3, [r4, #20]
 8007380:	9b01      	ldr	r3, [sp, #4]
 8007382:	b15b      	cbz	r3, 800739c <__smakebuf_r+0x74>
 8007384:	4630      	mov	r0, r6
 8007386:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800738a:	f000 f92d 	bl	80075e8 <_isatty_r>
 800738e:	b128      	cbz	r0, 800739c <__smakebuf_r+0x74>
 8007390:	89a3      	ldrh	r3, [r4, #12]
 8007392:	f023 0303 	bic.w	r3, r3, #3
 8007396:	f043 0301 	orr.w	r3, r3, #1
 800739a:	81a3      	strh	r3, [r4, #12]
 800739c:	89a0      	ldrh	r0, [r4, #12]
 800739e:	4305      	orrs	r5, r0
 80073a0:	81a5      	strh	r5, [r4, #12]
 80073a2:	e7cd      	b.n	8007340 <__smakebuf_r+0x18>
 80073a4:	08007135 	.word	0x08007135

080073a8 <memchr>:
 80073a8:	4603      	mov	r3, r0
 80073aa:	b510      	push	{r4, lr}
 80073ac:	b2c9      	uxtb	r1, r1
 80073ae:	4402      	add	r2, r0
 80073b0:	4293      	cmp	r3, r2
 80073b2:	4618      	mov	r0, r3
 80073b4:	d101      	bne.n	80073ba <memchr+0x12>
 80073b6:	2000      	movs	r0, #0
 80073b8:	e003      	b.n	80073c2 <memchr+0x1a>
 80073ba:	7804      	ldrb	r4, [r0, #0]
 80073bc:	3301      	adds	r3, #1
 80073be:	428c      	cmp	r4, r1
 80073c0:	d1f6      	bne.n	80073b0 <memchr+0x8>
 80073c2:	bd10      	pop	{r4, pc}

080073c4 <memmove>:
 80073c4:	4288      	cmp	r0, r1
 80073c6:	b510      	push	{r4, lr}
 80073c8:	eb01 0402 	add.w	r4, r1, r2
 80073cc:	d902      	bls.n	80073d4 <memmove+0x10>
 80073ce:	4284      	cmp	r4, r0
 80073d0:	4623      	mov	r3, r4
 80073d2:	d807      	bhi.n	80073e4 <memmove+0x20>
 80073d4:	1e43      	subs	r3, r0, #1
 80073d6:	42a1      	cmp	r1, r4
 80073d8:	d008      	beq.n	80073ec <memmove+0x28>
 80073da:	f811 2b01 	ldrb.w	r2, [r1], #1
 80073de:	f803 2f01 	strb.w	r2, [r3, #1]!
 80073e2:	e7f8      	b.n	80073d6 <memmove+0x12>
 80073e4:	4601      	mov	r1, r0
 80073e6:	4402      	add	r2, r0
 80073e8:	428a      	cmp	r2, r1
 80073ea:	d100      	bne.n	80073ee <memmove+0x2a>
 80073ec:	bd10      	pop	{r4, pc}
 80073ee:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80073f2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80073f6:	e7f7      	b.n	80073e8 <memmove+0x24>

080073f8 <__malloc_lock>:
 80073f8:	4801      	ldr	r0, [pc, #4]	; (8007400 <__malloc_lock+0x8>)
 80073fa:	f7ff bf6d 	b.w	80072d8 <__retarget_lock_acquire_recursive>
 80073fe:	bf00      	nop
 8007400:	20000c38 	.word	0x20000c38

08007404 <__malloc_unlock>:
 8007404:	4801      	ldr	r0, [pc, #4]	; (800740c <__malloc_unlock+0x8>)
 8007406:	f7ff bf68 	b.w	80072da <__retarget_lock_release_recursive>
 800740a:	bf00      	nop
 800740c:	20000c38 	.word	0x20000c38

08007410 <_realloc_r>:
 8007410:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007414:	4680      	mov	r8, r0
 8007416:	4614      	mov	r4, r2
 8007418:	460e      	mov	r6, r1
 800741a:	b921      	cbnz	r1, 8007426 <_realloc_r+0x16>
 800741c:	4611      	mov	r1, r2
 800741e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007422:	f7ff b80f 	b.w	8006444 <_malloc_r>
 8007426:	b92a      	cbnz	r2, 8007434 <_realloc_r+0x24>
 8007428:	f7fe ffa4 	bl	8006374 <_free_r>
 800742c:	4625      	mov	r5, r4
 800742e:	4628      	mov	r0, r5
 8007430:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007434:	f000 f8fa 	bl	800762c <_malloc_usable_size_r>
 8007438:	4284      	cmp	r4, r0
 800743a:	4607      	mov	r7, r0
 800743c:	d802      	bhi.n	8007444 <_realloc_r+0x34>
 800743e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8007442:	d812      	bhi.n	800746a <_realloc_r+0x5a>
 8007444:	4621      	mov	r1, r4
 8007446:	4640      	mov	r0, r8
 8007448:	f7fe fffc 	bl	8006444 <_malloc_r>
 800744c:	4605      	mov	r5, r0
 800744e:	2800      	cmp	r0, #0
 8007450:	d0ed      	beq.n	800742e <_realloc_r+0x1e>
 8007452:	42bc      	cmp	r4, r7
 8007454:	4622      	mov	r2, r4
 8007456:	4631      	mov	r1, r6
 8007458:	bf28      	it	cs
 800745a:	463a      	movcs	r2, r7
 800745c:	f7fe fede 	bl	800621c <memcpy>
 8007460:	4631      	mov	r1, r6
 8007462:	4640      	mov	r0, r8
 8007464:	f7fe ff86 	bl	8006374 <_free_r>
 8007468:	e7e1      	b.n	800742e <_realloc_r+0x1e>
 800746a:	4635      	mov	r5, r6
 800746c:	e7df      	b.n	800742e <_realloc_r+0x1e>

0800746e <_raise_r>:
 800746e:	291f      	cmp	r1, #31
 8007470:	b538      	push	{r3, r4, r5, lr}
 8007472:	4604      	mov	r4, r0
 8007474:	460d      	mov	r5, r1
 8007476:	d904      	bls.n	8007482 <_raise_r+0x14>
 8007478:	2316      	movs	r3, #22
 800747a:	6003      	str	r3, [r0, #0]
 800747c:	f04f 30ff 	mov.w	r0, #4294967295
 8007480:	bd38      	pop	{r3, r4, r5, pc}
 8007482:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8007484:	b112      	cbz	r2, 800748c <_raise_r+0x1e>
 8007486:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800748a:	b94b      	cbnz	r3, 80074a0 <_raise_r+0x32>
 800748c:	4620      	mov	r0, r4
 800748e:	f000 f831 	bl	80074f4 <_getpid_r>
 8007492:	462a      	mov	r2, r5
 8007494:	4601      	mov	r1, r0
 8007496:	4620      	mov	r0, r4
 8007498:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800749c:	f000 b818 	b.w	80074d0 <_kill_r>
 80074a0:	2b01      	cmp	r3, #1
 80074a2:	d00a      	beq.n	80074ba <_raise_r+0x4c>
 80074a4:	1c59      	adds	r1, r3, #1
 80074a6:	d103      	bne.n	80074b0 <_raise_r+0x42>
 80074a8:	2316      	movs	r3, #22
 80074aa:	6003      	str	r3, [r0, #0]
 80074ac:	2001      	movs	r0, #1
 80074ae:	e7e7      	b.n	8007480 <_raise_r+0x12>
 80074b0:	2400      	movs	r4, #0
 80074b2:	4628      	mov	r0, r5
 80074b4:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 80074b8:	4798      	blx	r3
 80074ba:	2000      	movs	r0, #0
 80074bc:	e7e0      	b.n	8007480 <_raise_r+0x12>
	...

080074c0 <raise>:
 80074c0:	4b02      	ldr	r3, [pc, #8]	; (80074cc <raise+0xc>)
 80074c2:	4601      	mov	r1, r0
 80074c4:	6818      	ldr	r0, [r3, #0]
 80074c6:	f7ff bfd2 	b.w	800746e <_raise_r>
 80074ca:	bf00      	nop
 80074cc:	20000210 	.word	0x20000210

080074d0 <_kill_r>:
 80074d0:	b538      	push	{r3, r4, r5, lr}
 80074d2:	2300      	movs	r3, #0
 80074d4:	4d06      	ldr	r5, [pc, #24]	; (80074f0 <_kill_r+0x20>)
 80074d6:	4604      	mov	r4, r0
 80074d8:	4608      	mov	r0, r1
 80074da:	4611      	mov	r1, r2
 80074dc:	602b      	str	r3, [r5, #0]
 80074de:	f7fb fc0a 	bl	8002cf6 <_kill>
 80074e2:	1c43      	adds	r3, r0, #1
 80074e4:	d102      	bne.n	80074ec <_kill_r+0x1c>
 80074e6:	682b      	ldr	r3, [r5, #0]
 80074e8:	b103      	cbz	r3, 80074ec <_kill_r+0x1c>
 80074ea:	6023      	str	r3, [r4, #0]
 80074ec:	bd38      	pop	{r3, r4, r5, pc}
 80074ee:	bf00      	nop
 80074f0:	20000c3c 	.word	0x20000c3c

080074f4 <_getpid_r>:
 80074f4:	f7fb bbf8 	b.w	8002ce8 <_getpid>

080074f8 <__sread>:
 80074f8:	b510      	push	{r4, lr}
 80074fa:	460c      	mov	r4, r1
 80074fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007500:	f000 f89c 	bl	800763c <_read_r>
 8007504:	2800      	cmp	r0, #0
 8007506:	bfab      	itete	ge
 8007508:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800750a:	89a3      	ldrhlt	r3, [r4, #12]
 800750c:	181b      	addge	r3, r3, r0
 800750e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007512:	bfac      	ite	ge
 8007514:	6563      	strge	r3, [r4, #84]	; 0x54
 8007516:	81a3      	strhlt	r3, [r4, #12]
 8007518:	bd10      	pop	{r4, pc}

0800751a <__swrite>:
 800751a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800751e:	461f      	mov	r7, r3
 8007520:	898b      	ldrh	r3, [r1, #12]
 8007522:	4605      	mov	r5, r0
 8007524:	05db      	lsls	r3, r3, #23
 8007526:	460c      	mov	r4, r1
 8007528:	4616      	mov	r6, r2
 800752a:	d505      	bpl.n	8007538 <__swrite+0x1e>
 800752c:	2302      	movs	r3, #2
 800752e:	2200      	movs	r2, #0
 8007530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007534:	f000 f868 	bl	8007608 <_lseek_r>
 8007538:	89a3      	ldrh	r3, [r4, #12]
 800753a:	4632      	mov	r2, r6
 800753c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007540:	81a3      	strh	r3, [r4, #12]
 8007542:	4628      	mov	r0, r5
 8007544:	463b      	mov	r3, r7
 8007546:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800754a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800754e:	f000 b817 	b.w	8007580 <_write_r>

08007552 <__sseek>:
 8007552:	b510      	push	{r4, lr}
 8007554:	460c      	mov	r4, r1
 8007556:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800755a:	f000 f855 	bl	8007608 <_lseek_r>
 800755e:	1c43      	adds	r3, r0, #1
 8007560:	89a3      	ldrh	r3, [r4, #12]
 8007562:	bf15      	itete	ne
 8007564:	6560      	strne	r0, [r4, #84]	; 0x54
 8007566:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800756a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800756e:	81a3      	strheq	r3, [r4, #12]
 8007570:	bf18      	it	ne
 8007572:	81a3      	strhne	r3, [r4, #12]
 8007574:	bd10      	pop	{r4, pc}

08007576 <__sclose>:
 8007576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800757a:	f000 b813 	b.w	80075a4 <_close_r>
	...

08007580 <_write_r>:
 8007580:	b538      	push	{r3, r4, r5, lr}
 8007582:	4604      	mov	r4, r0
 8007584:	4608      	mov	r0, r1
 8007586:	4611      	mov	r1, r2
 8007588:	2200      	movs	r2, #0
 800758a:	4d05      	ldr	r5, [pc, #20]	; (80075a0 <_write_r+0x20>)
 800758c:	602a      	str	r2, [r5, #0]
 800758e:	461a      	mov	r2, r3
 8007590:	f7fb fbe8 	bl	8002d64 <_write>
 8007594:	1c43      	adds	r3, r0, #1
 8007596:	d102      	bne.n	800759e <_write_r+0x1e>
 8007598:	682b      	ldr	r3, [r5, #0]
 800759a:	b103      	cbz	r3, 800759e <_write_r+0x1e>
 800759c:	6023      	str	r3, [r4, #0]
 800759e:	bd38      	pop	{r3, r4, r5, pc}
 80075a0:	20000c3c 	.word	0x20000c3c

080075a4 <_close_r>:
 80075a4:	b538      	push	{r3, r4, r5, lr}
 80075a6:	2300      	movs	r3, #0
 80075a8:	4d05      	ldr	r5, [pc, #20]	; (80075c0 <_close_r+0x1c>)
 80075aa:	4604      	mov	r4, r0
 80075ac:	4608      	mov	r0, r1
 80075ae:	602b      	str	r3, [r5, #0]
 80075b0:	f7fb fbf4 	bl	8002d9c <_close>
 80075b4:	1c43      	adds	r3, r0, #1
 80075b6:	d102      	bne.n	80075be <_close_r+0x1a>
 80075b8:	682b      	ldr	r3, [r5, #0]
 80075ba:	b103      	cbz	r3, 80075be <_close_r+0x1a>
 80075bc:	6023      	str	r3, [r4, #0]
 80075be:	bd38      	pop	{r3, r4, r5, pc}
 80075c0:	20000c3c 	.word	0x20000c3c

080075c4 <_fstat_r>:
 80075c4:	b538      	push	{r3, r4, r5, lr}
 80075c6:	2300      	movs	r3, #0
 80075c8:	4d06      	ldr	r5, [pc, #24]	; (80075e4 <_fstat_r+0x20>)
 80075ca:	4604      	mov	r4, r0
 80075cc:	4608      	mov	r0, r1
 80075ce:	4611      	mov	r1, r2
 80075d0:	602b      	str	r3, [r5, #0]
 80075d2:	f7fb fbee 	bl	8002db2 <_fstat>
 80075d6:	1c43      	adds	r3, r0, #1
 80075d8:	d102      	bne.n	80075e0 <_fstat_r+0x1c>
 80075da:	682b      	ldr	r3, [r5, #0]
 80075dc:	b103      	cbz	r3, 80075e0 <_fstat_r+0x1c>
 80075de:	6023      	str	r3, [r4, #0]
 80075e0:	bd38      	pop	{r3, r4, r5, pc}
 80075e2:	bf00      	nop
 80075e4:	20000c3c 	.word	0x20000c3c

080075e8 <_isatty_r>:
 80075e8:	b538      	push	{r3, r4, r5, lr}
 80075ea:	2300      	movs	r3, #0
 80075ec:	4d05      	ldr	r5, [pc, #20]	; (8007604 <_isatty_r+0x1c>)
 80075ee:	4604      	mov	r4, r0
 80075f0:	4608      	mov	r0, r1
 80075f2:	602b      	str	r3, [r5, #0]
 80075f4:	f7fb fbec 	bl	8002dd0 <_isatty>
 80075f8:	1c43      	adds	r3, r0, #1
 80075fa:	d102      	bne.n	8007602 <_isatty_r+0x1a>
 80075fc:	682b      	ldr	r3, [r5, #0]
 80075fe:	b103      	cbz	r3, 8007602 <_isatty_r+0x1a>
 8007600:	6023      	str	r3, [r4, #0]
 8007602:	bd38      	pop	{r3, r4, r5, pc}
 8007604:	20000c3c 	.word	0x20000c3c

08007608 <_lseek_r>:
 8007608:	b538      	push	{r3, r4, r5, lr}
 800760a:	4604      	mov	r4, r0
 800760c:	4608      	mov	r0, r1
 800760e:	4611      	mov	r1, r2
 8007610:	2200      	movs	r2, #0
 8007612:	4d05      	ldr	r5, [pc, #20]	; (8007628 <_lseek_r+0x20>)
 8007614:	602a      	str	r2, [r5, #0]
 8007616:	461a      	mov	r2, r3
 8007618:	f7fb fbe4 	bl	8002de4 <_lseek>
 800761c:	1c43      	adds	r3, r0, #1
 800761e:	d102      	bne.n	8007626 <_lseek_r+0x1e>
 8007620:	682b      	ldr	r3, [r5, #0]
 8007622:	b103      	cbz	r3, 8007626 <_lseek_r+0x1e>
 8007624:	6023      	str	r3, [r4, #0]
 8007626:	bd38      	pop	{r3, r4, r5, pc}
 8007628:	20000c3c 	.word	0x20000c3c

0800762c <_malloc_usable_size_r>:
 800762c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007630:	1f18      	subs	r0, r3, #4
 8007632:	2b00      	cmp	r3, #0
 8007634:	bfbc      	itt	lt
 8007636:	580b      	ldrlt	r3, [r1, r0]
 8007638:	18c0      	addlt	r0, r0, r3
 800763a:	4770      	bx	lr

0800763c <_read_r>:
 800763c:	b538      	push	{r3, r4, r5, lr}
 800763e:	4604      	mov	r4, r0
 8007640:	4608      	mov	r0, r1
 8007642:	4611      	mov	r1, r2
 8007644:	2200      	movs	r2, #0
 8007646:	4d05      	ldr	r5, [pc, #20]	; (800765c <_read_r+0x20>)
 8007648:	602a      	str	r2, [r5, #0]
 800764a:	461a      	mov	r2, r3
 800764c:	f7fb fb6d 	bl	8002d2a <_read>
 8007650:	1c43      	adds	r3, r0, #1
 8007652:	d102      	bne.n	800765a <_read_r+0x1e>
 8007654:	682b      	ldr	r3, [r5, #0]
 8007656:	b103      	cbz	r3, 800765a <_read_r+0x1e>
 8007658:	6023      	str	r3, [r4, #0]
 800765a:	bd38      	pop	{r3, r4, r5, pc}
 800765c:	20000c3c 	.word	0x20000c3c

08007660 <sqrt>:
 8007660:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007662:	4606      	mov	r6, r0
 8007664:	460f      	mov	r7, r1
 8007666:	f000 f81f 	bl	80076a8 <__ieee754_sqrt>
 800766a:	4632      	mov	r2, r6
 800766c:	4604      	mov	r4, r0
 800766e:	460d      	mov	r5, r1
 8007670:	463b      	mov	r3, r7
 8007672:	4630      	mov	r0, r6
 8007674:	4639      	mov	r1, r7
 8007676:	f7f9 f9c9 	bl	8000a0c <__aeabi_dcmpun>
 800767a:	b990      	cbnz	r0, 80076a2 <sqrt+0x42>
 800767c:	2200      	movs	r2, #0
 800767e:	2300      	movs	r3, #0
 8007680:	4630      	mov	r0, r6
 8007682:	4639      	mov	r1, r7
 8007684:	f7f9 f99a 	bl	80009bc <__aeabi_dcmplt>
 8007688:	b158      	cbz	r0, 80076a2 <sqrt+0x42>
 800768a:	f7fe fd9d 	bl	80061c8 <__errno>
 800768e:	2321      	movs	r3, #33	; 0x21
 8007690:	2200      	movs	r2, #0
 8007692:	6003      	str	r3, [r0, #0]
 8007694:	2300      	movs	r3, #0
 8007696:	4610      	mov	r0, r2
 8007698:	4619      	mov	r1, r3
 800769a:	f7f9 f847 	bl	800072c <__aeabi_ddiv>
 800769e:	4604      	mov	r4, r0
 80076a0:	460d      	mov	r5, r1
 80076a2:	4620      	mov	r0, r4
 80076a4:	4629      	mov	r1, r5
 80076a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080076a8 <__ieee754_sqrt>:
 80076a8:	f8df c158 	ldr.w	ip, [pc, #344]	; 8007804 <__ieee754_sqrt+0x15c>
 80076ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80076b0:	ea3c 0c01 	bics.w	ip, ip, r1
 80076b4:	4606      	mov	r6, r0
 80076b6:	460d      	mov	r5, r1
 80076b8:	460c      	mov	r4, r1
 80076ba:	460a      	mov	r2, r1
 80076bc:	4607      	mov	r7, r0
 80076be:	4603      	mov	r3, r0
 80076c0:	d10f      	bne.n	80076e2 <__ieee754_sqrt+0x3a>
 80076c2:	4602      	mov	r2, r0
 80076c4:	460b      	mov	r3, r1
 80076c6:	f7f8 ff07 	bl	80004d8 <__aeabi_dmul>
 80076ca:	4602      	mov	r2, r0
 80076cc:	460b      	mov	r3, r1
 80076ce:	4630      	mov	r0, r6
 80076d0:	4629      	mov	r1, r5
 80076d2:	f7f8 fd4b 	bl	800016c <__adddf3>
 80076d6:	4606      	mov	r6, r0
 80076d8:	460d      	mov	r5, r1
 80076da:	4630      	mov	r0, r6
 80076dc:	4629      	mov	r1, r5
 80076de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80076e2:	2900      	cmp	r1, #0
 80076e4:	dc0e      	bgt.n	8007704 <__ieee754_sqrt+0x5c>
 80076e6:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 80076ea:	ea5c 0707 	orrs.w	r7, ip, r7
 80076ee:	d0f4      	beq.n	80076da <__ieee754_sqrt+0x32>
 80076f0:	b141      	cbz	r1, 8007704 <__ieee754_sqrt+0x5c>
 80076f2:	4602      	mov	r2, r0
 80076f4:	460b      	mov	r3, r1
 80076f6:	f7f8 fd37 	bl	8000168 <__aeabi_dsub>
 80076fa:	4602      	mov	r2, r0
 80076fc:	460b      	mov	r3, r1
 80076fe:	f7f9 f815 	bl	800072c <__aeabi_ddiv>
 8007702:	e7e8      	b.n	80076d6 <__ieee754_sqrt+0x2e>
 8007704:	1521      	asrs	r1, r4, #20
 8007706:	d075      	beq.n	80077f4 <__ieee754_sqrt+0x14c>
 8007708:	07cc      	lsls	r4, r1, #31
 800770a:	f04f 0400 	mov.w	r4, #0
 800770e:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007712:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 8007716:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800771a:	bf5e      	ittt	pl
 800771c:	0fd9      	lsrpl	r1, r3, #31
 800771e:	005b      	lslpl	r3, r3, #1
 8007720:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8007724:	0fd9      	lsrs	r1, r3, #31
 8007726:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800772a:	2516      	movs	r5, #22
 800772c:	4620      	mov	r0, r4
 800772e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007732:	107f      	asrs	r7, r7, #1
 8007734:	005b      	lsls	r3, r3, #1
 8007736:	1846      	adds	r6, r0, r1
 8007738:	4296      	cmp	r6, r2
 800773a:	bfde      	ittt	le
 800773c:	1b92      	suble	r2, r2, r6
 800773e:	1870      	addle	r0, r6, r1
 8007740:	1864      	addle	r4, r4, r1
 8007742:	0052      	lsls	r2, r2, #1
 8007744:	3d01      	subs	r5, #1
 8007746:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800774a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800774e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007752:	d1f0      	bne.n	8007736 <__ieee754_sqrt+0x8e>
 8007754:	4629      	mov	r1, r5
 8007756:	f04f 0e20 	mov.w	lr, #32
 800775a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800775e:	4282      	cmp	r2, r0
 8007760:	eb06 0c05 	add.w	ip, r6, r5
 8007764:	dc02      	bgt.n	800776c <__ieee754_sqrt+0xc4>
 8007766:	d113      	bne.n	8007790 <__ieee754_sqrt+0xe8>
 8007768:	459c      	cmp	ip, r3
 800776a:	d811      	bhi.n	8007790 <__ieee754_sqrt+0xe8>
 800776c:	f1bc 0f00 	cmp.w	ip, #0
 8007770:	eb0c 0506 	add.w	r5, ip, r6
 8007774:	da43      	bge.n	80077fe <__ieee754_sqrt+0x156>
 8007776:	2d00      	cmp	r5, #0
 8007778:	db41      	blt.n	80077fe <__ieee754_sqrt+0x156>
 800777a:	f100 0801 	add.w	r8, r0, #1
 800777e:	1a12      	subs	r2, r2, r0
 8007780:	4640      	mov	r0, r8
 8007782:	459c      	cmp	ip, r3
 8007784:	bf88      	it	hi
 8007786:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800778a:	eba3 030c 	sub.w	r3, r3, ip
 800778e:	4431      	add	r1, r6
 8007790:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 8007794:	f1be 0e01 	subs.w	lr, lr, #1
 8007798:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 800779c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80077a0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80077a4:	d1db      	bne.n	800775e <__ieee754_sqrt+0xb6>
 80077a6:	4313      	orrs	r3, r2
 80077a8:	d006      	beq.n	80077b8 <__ieee754_sqrt+0x110>
 80077aa:	1c48      	adds	r0, r1, #1
 80077ac:	bf0b      	itete	eq
 80077ae:	4671      	moveq	r1, lr
 80077b0:	3101      	addne	r1, #1
 80077b2:	3401      	addeq	r4, #1
 80077b4:	f021 0101 	bicne.w	r1, r1, #1
 80077b8:	1063      	asrs	r3, r4, #1
 80077ba:	0849      	lsrs	r1, r1, #1
 80077bc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80077c0:	07e2      	lsls	r2, r4, #31
 80077c2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80077c6:	bf48      	it	mi
 80077c8:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80077cc:	460e      	mov	r6, r1
 80077ce:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 80077d2:	e782      	b.n	80076da <__ieee754_sqrt+0x32>
 80077d4:	0ada      	lsrs	r2, r3, #11
 80077d6:	3815      	subs	r0, #21
 80077d8:	055b      	lsls	r3, r3, #21
 80077da:	2a00      	cmp	r2, #0
 80077dc:	d0fa      	beq.n	80077d4 <__ieee754_sqrt+0x12c>
 80077de:	02d5      	lsls	r5, r2, #11
 80077e0:	d50a      	bpl.n	80077f8 <__ieee754_sqrt+0x150>
 80077e2:	f1c1 0420 	rsb	r4, r1, #32
 80077e6:	fa23 f404 	lsr.w	r4, r3, r4
 80077ea:	1e4d      	subs	r5, r1, #1
 80077ec:	408b      	lsls	r3, r1
 80077ee:	4322      	orrs	r2, r4
 80077f0:	1b41      	subs	r1, r0, r5
 80077f2:	e789      	b.n	8007708 <__ieee754_sqrt+0x60>
 80077f4:	4608      	mov	r0, r1
 80077f6:	e7f0      	b.n	80077da <__ieee754_sqrt+0x132>
 80077f8:	0052      	lsls	r2, r2, #1
 80077fa:	3101      	adds	r1, #1
 80077fc:	e7ef      	b.n	80077de <__ieee754_sqrt+0x136>
 80077fe:	4680      	mov	r8, r0
 8007800:	e7bd      	b.n	800777e <__ieee754_sqrt+0xd6>
 8007802:	bf00      	nop
 8007804:	7ff00000 	.word	0x7ff00000

08007808 <_init>:
 8007808:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800780a:	bf00      	nop
 800780c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800780e:	bc08      	pop	{r3}
 8007810:	469e      	mov	lr, r3
 8007812:	4770      	bx	lr

08007814 <_fini>:
 8007814:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007816:	bf00      	nop
 8007818:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800781a:	bc08      	pop	{r3}
 800781c:	469e      	mov	lr, r3
 800781e:	4770      	bx	lr
