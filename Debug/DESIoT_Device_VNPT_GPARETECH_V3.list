
DESIoT_Device_VNPT_GPARETECH_V3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007274  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001ac  08007384  08007384  00017384  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007530  08007530  00020274  2**0
                  CONTENTS
  4 .ARM          00000000  08007530  08007530  00020274  2**0
                  CONTENTS
  5 .preinit_array 00000000  08007530  08007530  00020274  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007530  08007530  00017530  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007534  08007534  00017534  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000274  20000000  08007538  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009cc  20000274  080077ac  00020274  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c40  080077ac  00020c40  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020274  2**0
                  CONTENTS, READONLY
 12 .debug_info   000107da  00000000  00000000  0002029d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002864  00000000  00000000  00030a77  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000010b0  00000000  00000000  000332e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fd0  00000000  00000000  00034390  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019764  00000000  00000000  00035360  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011399  00000000  00000000  0004eac4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00092968  00000000  00000000  0005fe5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f27c5  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052f0  00000000  00000000  000f2818  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000274 	.word	0x20000274
 800012c:	00000000 	.word	0x00000000
 8000130:	0800736c 	.word	0x0800736c

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000278 	.word	0x20000278
 800014c:	0800736c 	.word	0x0800736c

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_dcmpun>:
 80009fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a00:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a04:	d102      	bne.n	8000a0c <__aeabi_dcmpun+0x10>
 8000a06:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a0a:	d10a      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a0c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x20>
 8000a16:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a1a:	d102      	bne.n	8000a22 <__aeabi_dcmpun+0x26>
 8000a1c:	f04f 0000 	mov.w	r0, #0
 8000a20:	4770      	bx	lr
 8000a22:	f04f 0001 	mov.w	r0, #1
 8000a26:	4770      	bx	lr

08000a28 <__aeabi_d2f>:
 8000a28:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a2c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000a30:	bf24      	itt	cs
 8000a32:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000a36:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000a3a:	d90d      	bls.n	8000a58 <__aeabi_d2f+0x30>
 8000a3c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000a40:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a44:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a48:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000a4c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a50:	bf08      	it	eq
 8000a52:	f020 0001 	biceq.w	r0, r0, #1
 8000a56:	4770      	bx	lr
 8000a58:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000a5c:	d121      	bne.n	8000aa2 <__aeabi_d2f+0x7a>
 8000a5e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000a62:	bfbc      	itt	lt
 8000a64:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000a68:	4770      	bxlt	lr
 8000a6a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a6e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a72:	f1c2 0218 	rsb	r2, r2, #24
 8000a76:	f1c2 0c20 	rsb	ip, r2, #32
 8000a7a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000a7e:	fa20 f002 	lsr.w	r0, r0, r2
 8000a82:	bf18      	it	ne
 8000a84:	f040 0001 	orrne.w	r0, r0, #1
 8000a88:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a8c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000a90:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000a94:	ea40 000c 	orr.w	r0, r0, ip
 8000a98:	fa23 f302 	lsr.w	r3, r3, r2
 8000a9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000aa0:	e7cc      	b.n	8000a3c <__aeabi_d2f+0x14>
 8000aa2:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aa6:	d107      	bne.n	8000ab8 <__aeabi_d2f+0x90>
 8000aa8:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000aac:	bf1e      	ittt	ne
 8000aae:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ab2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ab6:	4770      	bxne	lr
 8000ab8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000abc:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000ac0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_frsub>:
 8000ac8:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000acc:	e002      	b.n	8000ad4 <__addsf3>
 8000ace:	bf00      	nop

08000ad0 <__aeabi_fsub>:
 8000ad0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000ad4 <__addsf3>:
 8000ad4:	0042      	lsls	r2, r0, #1
 8000ad6:	bf1f      	itttt	ne
 8000ad8:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000adc:	ea92 0f03 	teqne	r2, r3
 8000ae0:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000ae4:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000ae8:	d06a      	beq.n	8000bc0 <__addsf3+0xec>
 8000aea:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000aee:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000af2:	bfc1      	itttt	gt
 8000af4:	18d2      	addgt	r2, r2, r3
 8000af6:	4041      	eorgt	r1, r0
 8000af8:	4048      	eorgt	r0, r1
 8000afa:	4041      	eorgt	r1, r0
 8000afc:	bfb8      	it	lt
 8000afe:	425b      	neglt	r3, r3
 8000b00:	2b19      	cmp	r3, #25
 8000b02:	bf88      	it	hi
 8000b04:	4770      	bxhi	lr
 8000b06:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b0a:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b0e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b12:	bf18      	it	ne
 8000b14:	4240      	negne	r0, r0
 8000b16:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b1a:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000b1e:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000b22:	bf18      	it	ne
 8000b24:	4249      	negne	r1, r1
 8000b26:	ea92 0f03 	teq	r2, r3
 8000b2a:	d03f      	beq.n	8000bac <__addsf3+0xd8>
 8000b2c:	f1a2 0201 	sub.w	r2, r2, #1
 8000b30:	fa41 fc03 	asr.w	ip, r1, r3
 8000b34:	eb10 000c 	adds.w	r0, r0, ip
 8000b38:	f1c3 0320 	rsb	r3, r3, #32
 8000b3c:	fa01 f103 	lsl.w	r1, r1, r3
 8000b40:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000b44:	d502      	bpl.n	8000b4c <__addsf3+0x78>
 8000b46:	4249      	negs	r1, r1
 8000b48:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b4c:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000b50:	d313      	bcc.n	8000b7a <__addsf3+0xa6>
 8000b52:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000b56:	d306      	bcc.n	8000b66 <__addsf3+0x92>
 8000b58:	0840      	lsrs	r0, r0, #1
 8000b5a:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b5e:	f102 0201 	add.w	r2, r2, #1
 8000b62:	2afe      	cmp	r2, #254	; 0xfe
 8000b64:	d251      	bcs.n	8000c0a <__addsf3+0x136>
 8000b66:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000b6a:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b6e:	bf08      	it	eq
 8000b70:	f020 0001 	biceq.w	r0, r0, #1
 8000b74:	ea40 0003 	orr.w	r0, r0, r3
 8000b78:	4770      	bx	lr
 8000b7a:	0049      	lsls	r1, r1, #1
 8000b7c:	eb40 0000 	adc.w	r0, r0, r0
 8000b80:	3a01      	subs	r2, #1
 8000b82:	bf28      	it	cs
 8000b84:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000b88:	d2ed      	bcs.n	8000b66 <__addsf3+0x92>
 8000b8a:	fab0 fc80 	clz	ip, r0
 8000b8e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000b92:	ebb2 020c 	subs.w	r2, r2, ip
 8000b96:	fa00 f00c 	lsl.w	r0, r0, ip
 8000b9a:	bfaa      	itet	ge
 8000b9c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000ba0:	4252      	neglt	r2, r2
 8000ba2:	4318      	orrge	r0, r3
 8000ba4:	bfbc      	itt	lt
 8000ba6:	40d0      	lsrlt	r0, r2
 8000ba8:	4318      	orrlt	r0, r3
 8000baa:	4770      	bx	lr
 8000bac:	f092 0f00 	teq	r2, #0
 8000bb0:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000bb4:	bf06      	itte	eq
 8000bb6:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000bba:	3201      	addeq	r2, #1
 8000bbc:	3b01      	subne	r3, #1
 8000bbe:	e7b5      	b.n	8000b2c <__addsf3+0x58>
 8000bc0:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000bc4:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bc8:	bf18      	it	ne
 8000bca:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bce:	d021      	beq.n	8000c14 <__addsf3+0x140>
 8000bd0:	ea92 0f03 	teq	r2, r3
 8000bd4:	d004      	beq.n	8000be0 <__addsf3+0x10c>
 8000bd6:	f092 0f00 	teq	r2, #0
 8000bda:	bf08      	it	eq
 8000bdc:	4608      	moveq	r0, r1
 8000bde:	4770      	bx	lr
 8000be0:	ea90 0f01 	teq	r0, r1
 8000be4:	bf1c      	itt	ne
 8000be6:	2000      	movne	r0, #0
 8000be8:	4770      	bxne	lr
 8000bea:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000bee:	d104      	bne.n	8000bfa <__addsf3+0x126>
 8000bf0:	0040      	lsls	r0, r0, #1
 8000bf2:	bf28      	it	cs
 8000bf4:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000bf8:	4770      	bx	lr
 8000bfa:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000bfe:	bf3c      	itt	cc
 8000c00:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c04:	4770      	bxcc	lr
 8000c06:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c0a:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c0e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c12:	4770      	bx	lr
 8000c14:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c18:	bf16      	itet	ne
 8000c1a:	4608      	movne	r0, r1
 8000c1c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c20:	4601      	movne	r1, r0
 8000c22:	0242      	lsls	r2, r0, #9
 8000c24:	bf06      	itte	eq
 8000c26:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c2a:	ea90 0f01 	teqeq	r0, r1
 8000c2e:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000c32:	4770      	bx	lr

08000c34 <__aeabi_ui2f>:
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	e004      	b.n	8000c44 <__aeabi_i2f+0x8>
 8000c3a:	bf00      	nop

08000c3c <__aeabi_i2f>:
 8000c3c:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000c40:	bf48      	it	mi
 8000c42:	4240      	negmi	r0, r0
 8000c44:	ea5f 0c00 	movs.w	ip, r0
 8000c48:	bf08      	it	eq
 8000c4a:	4770      	bxeq	lr
 8000c4c:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000c50:	4601      	mov	r1, r0
 8000c52:	f04f 0000 	mov.w	r0, #0
 8000c56:	e01c      	b.n	8000c92 <__aeabi_l2f+0x2a>

08000c58 <__aeabi_ul2f>:
 8000c58:	ea50 0201 	orrs.w	r2, r0, r1
 8000c5c:	bf08      	it	eq
 8000c5e:	4770      	bxeq	lr
 8000c60:	f04f 0300 	mov.w	r3, #0
 8000c64:	e00a      	b.n	8000c7c <__aeabi_l2f+0x14>
 8000c66:	bf00      	nop

08000c68 <__aeabi_l2f>:
 8000c68:	ea50 0201 	orrs.w	r2, r0, r1
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000c74:	d502      	bpl.n	8000c7c <__aeabi_l2f+0x14>
 8000c76:	4240      	negs	r0, r0
 8000c78:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c7c:	ea5f 0c01 	movs.w	ip, r1
 8000c80:	bf02      	ittt	eq
 8000c82:	4684      	moveq	ip, r0
 8000c84:	4601      	moveq	r1, r0
 8000c86:	2000      	moveq	r0, #0
 8000c88:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000c8c:	bf08      	it	eq
 8000c8e:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000c92:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000c96:	fabc f28c 	clz	r2, ip
 8000c9a:	3a08      	subs	r2, #8
 8000c9c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000ca0:	db10      	blt.n	8000cc4 <__aeabi_l2f+0x5c>
 8000ca2:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ca6:	4463      	add	r3, ip
 8000ca8:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cac:	f1c2 0220 	rsb	r2, r2, #32
 8000cb0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000cb4:	fa20 f202 	lsr.w	r2, r0, r2
 8000cb8:	eb43 0002 	adc.w	r0, r3, r2
 8000cbc:	bf08      	it	eq
 8000cbe:	f020 0001 	biceq.w	r0, r0, #1
 8000cc2:	4770      	bx	lr
 8000cc4:	f102 0220 	add.w	r2, r2, #32
 8000cc8:	fa01 fc02 	lsl.w	ip, r1, r2
 8000ccc:	f1c2 0220 	rsb	r2, r2, #32
 8000cd0:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cd4:	fa21 f202 	lsr.w	r2, r1, r2
 8000cd8:	eb43 0002 	adc.w	r0, r3, r2
 8000cdc:	bf08      	it	eq
 8000cde:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ce2:	4770      	bx	lr

08000ce4 <__aeabi_fmul>:
 8000ce4:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000ce8:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000cec:	bf1e      	ittt	ne
 8000cee:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000cf2:	ea92 0f0c 	teqne	r2, ip
 8000cf6:	ea93 0f0c 	teqne	r3, ip
 8000cfa:	d06f      	beq.n	8000ddc <__aeabi_fmul+0xf8>
 8000cfc:	441a      	add	r2, r3
 8000cfe:	ea80 0c01 	eor.w	ip, r0, r1
 8000d02:	0240      	lsls	r0, r0, #9
 8000d04:	bf18      	it	ne
 8000d06:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d0a:	d01e      	beq.n	8000d4a <__aeabi_fmul+0x66>
 8000d0c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8000d10:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d14:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d18:	fba0 3101 	umull	r3, r1, r0, r1
 8000d1c:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000d20:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 8000d24:	bf3e      	ittt	cc
 8000d26:	0049      	lslcc	r1, r1, #1
 8000d28:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d2c:	005b      	lslcc	r3, r3, #1
 8000d2e:	ea40 0001 	orr.w	r0, r0, r1
 8000d32:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 8000d36:	2afd      	cmp	r2, #253	; 0xfd
 8000d38:	d81d      	bhi.n	8000d76 <__aeabi_fmul+0x92>
 8000d3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8000d3e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d42:	bf08      	it	eq
 8000d44:	f020 0001 	biceq.w	r0, r0, #1
 8000d48:	4770      	bx	lr
 8000d4a:	f090 0f00 	teq	r0, #0
 8000d4e:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000d52:	bf08      	it	eq
 8000d54:	0249      	lsleq	r1, r1, #9
 8000d56:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d5a:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d5e:	3a7f      	subs	r2, #127	; 0x7f
 8000d60:	bfc2      	ittt	gt
 8000d62:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000d66:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d6a:	4770      	bxgt	lr
 8000d6c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d70:	f04f 0300 	mov.w	r3, #0
 8000d74:	3a01      	subs	r2, #1
 8000d76:	dc5d      	bgt.n	8000e34 <__aeabi_fmul+0x150>
 8000d78:	f112 0f19 	cmn.w	r2, #25
 8000d7c:	bfdc      	itt	le
 8000d7e:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 8000d82:	4770      	bxle	lr
 8000d84:	f1c2 0200 	rsb	r2, r2, #0
 8000d88:	0041      	lsls	r1, r0, #1
 8000d8a:	fa21 f102 	lsr.w	r1, r1, r2
 8000d8e:	f1c2 0220 	rsb	r2, r2, #32
 8000d92:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d96:	ea5f 0031 	movs.w	r0, r1, rrx
 8000d9a:	f140 0000 	adc.w	r0, r0, #0
 8000d9e:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000da2:	bf08      	it	eq
 8000da4:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000da8:	4770      	bx	lr
 8000daa:	f092 0f00 	teq	r2, #0
 8000dae:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000db2:	bf02      	ittt	eq
 8000db4:	0040      	lsleq	r0, r0, #1
 8000db6:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000dba:	3a01      	subeq	r2, #1
 8000dbc:	d0f9      	beq.n	8000db2 <__aeabi_fmul+0xce>
 8000dbe:	ea40 000c 	orr.w	r0, r0, ip
 8000dc2:	f093 0f00 	teq	r3, #0
 8000dc6:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000dca:	bf02      	ittt	eq
 8000dcc:	0049      	lsleq	r1, r1, #1
 8000dce:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000dd2:	3b01      	subeq	r3, #1
 8000dd4:	d0f9      	beq.n	8000dca <__aeabi_fmul+0xe6>
 8000dd6:	ea41 010c 	orr.w	r1, r1, ip
 8000dda:	e78f      	b.n	8000cfc <__aeabi_fmul+0x18>
 8000ddc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000de0:	ea92 0f0c 	teq	r2, ip
 8000de4:	bf18      	it	ne
 8000de6:	ea93 0f0c 	teqne	r3, ip
 8000dea:	d00a      	beq.n	8000e02 <__aeabi_fmul+0x11e>
 8000dec:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000df0:	bf18      	it	ne
 8000df2:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000df6:	d1d8      	bne.n	8000daa <__aeabi_fmul+0xc6>
 8000df8:	ea80 0001 	eor.w	r0, r0, r1
 8000dfc:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e00:	4770      	bx	lr
 8000e02:	f090 0f00 	teq	r0, #0
 8000e06:	bf17      	itett	ne
 8000e08:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000e0c:	4608      	moveq	r0, r1
 8000e0e:	f091 0f00 	teqne	r1, #0
 8000e12:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000e16:	d014      	beq.n	8000e42 <__aeabi_fmul+0x15e>
 8000e18:	ea92 0f0c 	teq	r2, ip
 8000e1c:	d101      	bne.n	8000e22 <__aeabi_fmul+0x13e>
 8000e1e:	0242      	lsls	r2, r0, #9
 8000e20:	d10f      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e22:	ea93 0f0c 	teq	r3, ip
 8000e26:	d103      	bne.n	8000e30 <__aeabi_fmul+0x14c>
 8000e28:	024b      	lsls	r3, r1, #9
 8000e2a:	bf18      	it	ne
 8000e2c:	4608      	movne	r0, r1
 8000e2e:	d108      	bne.n	8000e42 <__aeabi_fmul+0x15e>
 8000e30:	ea80 0001 	eor.w	r0, r0, r1
 8000e34:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 8000e38:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e3c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000e40:	4770      	bx	lr
 8000e42:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000e46:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 8000e4a:	4770      	bx	lr

08000e4c <__aeabi_fdiv>:
 8000e4c:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000e50:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e54:	bf1e      	ittt	ne
 8000e56:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e5a:	ea92 0f0c 	teqne	r2, ip
 8000e5e:	ea93 0f0c 	teqne	r3, ip
 8000e62:	d069      	beq.n	8000f38 <__aeabi_fdiv+0xec>
 8000e64:	eba2 0203 	sub.w	r2, r2, r3
 8000e68:	ea80 0c01 	eor.w	ip, r0, r1
 8000e6c:	0249      	lsls	r1, r1, #9
 8000e6e:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e72:	d037      	beq.n	8000ee4 <__aeabi_fdiv+0x98>
 8000e74:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 8000e78:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000e7c:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000e80:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 8000e84:	428b      	cmp	r3, r1
 8000e86:	bf38      	it	cc
 8000e88:	005b      	lslcc	r3, r3, #1
 8000e8a:	f142 027d 	adc.w	r2, r2, #125	; 0x7d
 8000e8e:	f44f 0c00 	mov.w	ip, #8388608	; 0x800000
 8000e92:	428b      	cmp	r3, r1
 8000e94:	bf24      	itt	cs
 8000e96:	1a5b      	subcs	r3, r3, r1
 8000e98:	ea40 000c 	orrcs.w	r0, r0, ip
 8000e9c:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ea0:	bf24      	itt	cs
 8000ea2:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000ea6:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000eaa:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000eae:	bf24      	itt	cs
 8000eb0:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000eb4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000eb8:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ebc:	bf24      	itt	cs
 8000ebe:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ec2:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000ec6:	011b      	lsls	r3, r3, #4
 8000ec8:	bf18      	it	ne
 8000eca:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ece:	d1e0      	bne.n	8000e92 <__aeabi_fdiv+0x46>
 8000ed0:	2afd      	cmp	r2, #253	; 0xfd
 8000ed2:	f63f af50 	bhi.w	8000d76 <__aeabi_fmul+0x92>
 8000ed6:	428b      	cmp	r3, r1
 8000ed8:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000edc:	bf08      	it	eq
 8000ede:	f020 0001 	biceq.w	r0, r0, #1
 8000ee2:	4770      	bx	lr
 8000ee4:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 8000ee8:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000eec:	327f      	adds	r2, #127	; 0x7f
 8000eee:	bfc2      	ittt	gt
 8000ef0:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 8000ef4:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000ef8:	4770      	bxgt	lr
 8000efa:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000efe:	f04f 0300 	mov.w	r3, #0
 8000f02:	3a01      	subs	r2, #1
 8000f04:	e737      	b.n	8000d76 <__aeabi_fmul+0x92>
 8000f06:	f092 0f00 	teq	r2, #0
 8000f0a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 8000f0e:	bf02      	ittt	eq
 8000f10:	0040      	lsleq	r0, r0, #1
 8000f12:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000f16:	3a01      	subeq	r2, #1
 8000f18:	d0f9      	beq.n	8000f0e <__aeabi_fdiv+0xc2>
 8000f1a:	ea40 000c 	orr.w	r0, r0, ip
 8000f1e:	f093 0f00 	teq	r3, #0
 8000f22:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000f26:	bf02      	ittt	eq
 8000f28:	0049      	lsleq	r1, r1, #1
 8000f2a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 8000f2e:	3b01      	subeq	r3, #1
 8000f30:	d0f9      	beq.n	8000f26 <__aeabi_fdiv+0xda>
 8000f32:	ea41 010c 	orr.w	r1, r1, ip
 8000f36:	e795      	b.n	8000e64 <__aeabi_fdiv+0x18>
 8000f38:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f3c:	ea92 0f0c 	teq	r2, ip
 8000f40:	d108      	bne.n	8000f54 <__aeabi_fdiv+0x108>
 8000f42:	0242      	lsls	r2, r0, #9
 8000f44:	f47f af7d 	bne.w	8000e42 <__aeabi_fmul+0x15e>
 8000f48:	ea93 0f0c 	teq	r3, ip
 8000f4c:	f47f af70 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f50:	4608      	mov	r0, r1
 8000f52:	e776      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f54:	ea93 0f0c 	teq	r3, ip
 8000f58:	d104      	bne.n	8000f64 <__aeabi_fdiv+0x118>
 8000f5a:	024b      	lsls	r3, r1, #9
 8000f5c:	f43f af4c 	beq.w	8000df8 <__aeabi_fmul+0x114>
 8000f60:	4608      	mov	r0, r1
 8000f62:	e76e      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f64:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 8000f68:	bf18      	it	ne
 8000f6a:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000f6e:	d1ca      	bne.n	8000f06 <__aeabi_fdiv+0xba>
 8000f70:	f030 4200 	bics.w	r2, r0, #2147483648	; 0x80000000
 8000f74:	f47f af5c 	bne.w	8000e30 <__aeabi_fmul+0x14c>
 8000f78:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
 8000f7c:	f47f af3c 	bne.w	8000df8 <__aeabi_fmul+0x114>
 8000f80:	e75f      	b.n	8000e42 <__aeabi_fmul+0x15e>
 8000f82:	bf00      	nop

08000f84 <DESIoT_loop>:
#include "DESIoT_device.h"

DESIoT_Frame_Hander_t hFrame = {.index = 0};
DESIoT_CBUF_t hGatewayCBuffer = {.start = 0, .end = 0};

void DESIoT_loop() {
 8000f84:	b580      	push	{r7, lr}
 8000f86:	af00      	add	r7, sp, #0
	DESIoT_frameArbitrating();
 8000f88:	f000 f83c 	bl	8001004 <DESIoT_frameArbitrating>
	DESIoT_frameProssessLoop();
 8000f8c:	f000 f802 	bl	8000f94 <DESIoT_frameProssessLoop>
}
 8000f90:	bf00      	nop
 8000f92:	bd80      	pop	{r7, pc}

08000f94 <DESIoT_frameProssessLoop>:

void DESIoT_frameProssessLoop()
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b082      	sub	sp, #8
 8000f98:	af00      	add	r7, sp, #0
	while (DESIOT_IS_FRAME_ON_PROCESS_STATUS(hFrame.status))
 8000f9a:	e014      	b.n	8000fc6 <DESIoT_frameProssessLoop+0x32>
	{
		DESIoT_frameTimeoutHandler();
 8000f9c:	f000 fc28 	bl	80017f0 <DESIoT_frameTimeoutHandler>

		uint8_t rx;
		if (DESIoT_CBUF_getByte(hFrame.curCBuf, &rx) == DESIOT_CBUF_OK)
 8000fa0:	4b16      	ldr	r3, [pc, #88]	; (8000ffc <DESIoT_frameProssessLoop+0x68>)
 8000fa2:	f8d3 3440 	ldr.w	r3, [r3, #1088]	; 0x440
 8000fa6:	1dfa      	adds	r2, r7, #7
 8000fa8:	4611      	mov	r1, r2
 8000faa:	4618      	mov	r0, r3
 8000fac:	f000 fa3c 	bl	8001428 <DESIoT_CBUF_getByte>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d107      	bne.n	8000fc6 <DESIoT_frameProssessLoop+0x32>
			DESIoT_FRAME_parsing(&hFrame, rx, hFrame.curCBuf);
 8000fb6:	79fb      	ldrb	r3, [r7, #7]
 8000fb8:	4a10      	ldr	r2, [pc, #64]	; (8000ffc <DESIoT_frameProssessLoop+0x68>)
 8000fba:	f8d2 2440 	ldr.w	r2, [r2, #1088]	; 0x440
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	480e      	ldr	r0, [pc, #56]	; (8000ffc <DESIoT_frameProssessLoop+0x68>)
 8000fc2:	f000 fa7f 	bl	80014c4 <DESIoT_FRAME_parsing>
	while (DESIOT_IS_FRAME_ON_PROCESS_STATUS(hFrame.status))
 8000fc6:	4b0d      	ldr	r3, [pc, #52]	; (8000ffc <DESIoT_frameProssessLoop+0x68>)
 8000fc8:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8000fcc:	2b00      	cmp	r3, #0
 8000fce:	d00d      	beq.n	8000fec <DESIoT_frameProssessLoop+0x58>
 8000fd0:	4b0a      	ldr	r3, [pc, #40]	; (8000ffc <DESIoT_frameProssessLoop+0x68>)
 8000fd2:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8000fd6:	4b0a      	ldr	r3, [pc, #40]	; (8001000 <DESIoT_frameProssessLoop+0x6c>)
 8000fd8:	fba3 1302 	umull	r1, r3, r3, r2
 8000fdc:	0859      	lsrs	r1, r3, #1
 8000fde:	460b      	mov	r3, r1
 8000fe0:	005b      	lsls	r3, r3, #1
 8000fe2:	440b      	add	r3, r1
 8000fe4:	1ad3      	subs	r3, r2, r3
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	d0d7      	beq.n	8000f9c <DESIoT_frameProssessLoop+0x8>
	}
	DESIoT_frameFailedHandler();
 8000fec:	f000 fb74 	bl	80016d8 <DESIoT_frameFailedHandler>
	DESIoT_frameSuccessHandler();
 8000ff0:	f000 fb82 	bl	80016f8 <DESIoT_frameSuccessHandler>
}
 8000ff4:	bf00      	nop
 8000ff6:	3708      	adds	r7, #8
 8000ff8:	46bd      	mov	sp, r7
 8000ffa:	bd80      	pop	{r7, pc}
 8000ffc:	20000290 	.word	0x20000290
 8001000:	aaaaaaab 	.word	0xaaaaaaab

08001004 <DESIoT_frameArbitrating>:

void DESIoT_frameArbitrating()
{
 8001004:	b580      	push	{r7, lr}
 8001006:	af00      	add	r7, sp, #0
	// arbitrating for Gateway
	if (hFrame.status == DESIOT_FRAME_IDLE)
 8001008:	4b0a      	ldr	r3, [pc, #40]	; (8001034 <DESIoT_frameArbitrating+0x30>)
 800100a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800100e:	2b00      	cmp	r3, #0
 8001010:	d10d      	bne.n	800102e <DESIoT_frameArbitrating+0x2a>
	{
		if (!DESIoT_CBUF_isEmpty(&hGatewayCBuffer))
 8001012:	4809      	ldr	r0, [pc, #36]	; (8001038 <DESIoT_frameArbitrating+0x34>)
 8001014:	f000 f9f0 	bl	80013f8 <DESIoT_CBUF_isEmpty>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d107      	bne.n	800102e <DESIoT_frameArbitrating+0x2a>
		{
			hFrame.status = DESIOT_FRAME_IN_GATEWAY_PROGRESS;
 800101e:	4b05      	ldr	r3, [pc, #20]	; (8001034 <DESIoT_frameArbitrating+0x30>)
 8001020:	2203      	movs	r2, #3
 8001022:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
			DESIoT_setUpStartOfParsing(&hFrame, &hGatewayCBuffer);
 8001026:	4904      	ldr	r1, [pc, #16]	; (8001038 <DESIoT_frameArbitrating+0x34>)
 8001028:	4802      	ldr	r0, [pc, #8]	; (8001034 <DESIoT_frameArbitrating+0x30>)
 800102a:	f000 fa2a 	bl	8001482 <DESIoT_setUpStartOfParsing>
		}
	}
}
 800102e:	bf00      	nop
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	20000290 	.word	0x20000290
 8001038:	200006d4 	.word	0x200006d4

0800103c <DESIOT_Rx1byte>:

void DESIOT_Rx1byte(uint8_t rxByte)
{
 800103c:	b580      	push	{r7, lr}
 800103e:	b082      	sub	sp, #8
 8001040:	af00      	add	r7, sp, #0
 8001042:	4603      	mov	r3, r0
 8001044:	71fb      	strb	r3, [r7, #7]
	DESIoT_CBUF_putByte(&hGatewayCBuffer, rxByte);
 8001046:	79fb      	ldrb	r3, [r7, #7]
 8001048:	4619      	mov	r1, r3
 800104a:	4803      	ldr	r0, [pc, #12]	; (8001058 <DESIOT_Rx1byte+0x1c>)
 800104c:	f000 f9b6 	bl	80013bc <DESIoT_CBUF_putByte>
}
 8001050:	bf00      	nop
 8001052:	3708      	adds	r7, #8
 8001054:	46bd      	mov	sp, r7
 8001056:	bd80      	pop	{r7, pc}
 8001058:	200006d4 	.word	0x200006d4

0800105c <DESIoT_assignInt>:

/**
 * Send a data packet requiring to assign an integer to the gateway.
 */
void DESIoT_assignInt(uint8_t VS, size_t integer)
{
 800105c:	b580      	push	{r7, lr}
 800105e:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 8001062:	af00      	add	r7, sp, #0
 8001064:	4602      	mov	r2, r0
 8001066:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800106a:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 800106e:	6019      	str	r1, [r3, #0]
 8001070:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001074:	f2a3 4309 	subw	r3, r3, #1033	; 0x409
 8001078:	701a      	strb	r2, [r3, #0]
	DESIoT_dataPacket_t dataPacket;
	dataPacket.cmd = DESIOT_CMD_ASSIGN_VIRTUAL_STORAGE;
 800107a:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800107e:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8001082:	2200      	movs	r2, #0
 8001084:	701a      	strb	r2, [r3, #0]
	dataPacket.dataLen = DESIOT_ADDITIONAL_DATA_SIZE + sizeof(VS) + sizeof(integer); // add bytes of additional data
 8001086:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800108a:	f2a3 4204 	subw	r2, r3, #1028	; 0x404
 800108e:	6813      	ldr	r3, [r2, #0]
 8001090:	2137      	movs	r1, #55	; 0x37
 8001092:	f361 2311 	bfi	r3, r1, #8, #10
 8001096:	6013      	str	r3, [r2, #0]

	// ignore 12-byte data for device ID
	dataPacket.data[DESIOT_ADDITIONAL_DATA_SIZE] = VS;
 8001098:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800109c:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80010a0:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80010a4:	f2a2 4209 	subw	r2, r2, #1033	; 0x409
 80010a8:	7812      	ldrb	r2, [r2, #0]
 80010aa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	memcpy(dataPacket.data + DESIOT_ADDITIONAL_DATA_SIZE + 1, &integer, sizeof(integer));
 80010ae:	f107 030c 	add.w	r3, r7, #12
 80010b2:	3303      	adds	r3, #3
 80010b4:	3333      	adds	r3, #51	; 0x33
 80010b6:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80010ba:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
 80010be:	6812      	ldr	r2, [r2, #0]
 80010c0:	601a      	str	r2, [r3, #0]

	DESIoT_sendDataPacket(DESIOT_CMD_LEN + DESIOT_DATALEN_LEN + dataPacket.dataLen,
 80010c2:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80010c6:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f3c3 2309 	ubfx	r3, r3, #8, #10
 80010d0:	b29b      	uxth	r3, r3
 80010d2:	3303      	adds	r3, #3
 80010d4:	f107 020c 	add.w	r2, r7, #12
 80010d8:	4611      	mov	r1, r2
 80010da:	4618      	mov	r0, r3
 80010dc:	f000 f884 	bl	80011e8 <DESIoT_sendDataPacket>
			(uint8_t*)&dataPacket);
}
 80010e0:	bf00      	nop
 80010e2:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <DESIoT_assignFloat>:

void DESIoT_assignFloat(uint8_t VS, float fNumber)
{
 80010ea:	b580      	push	{r7, lr}
 80010ec:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4602      	mov	r2, r0
 80010f4:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80010f8:	f5a3 6382 	sub.w	r3, r3, #1040	; 0x410
 80010fc:	6019      	str	r1, [r3, #0]
 80010fe:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001102:	f2a3 4309 	subw	r3, r3, #1033	; 0x409
 8001106:	701a      	strb	r2, [r3, #0]
	DESIoT_dataPacket_t dataPacket;
	dataPacket.cmd = DESIOT_CMD_ASSIGN_VIRTUAL_STORAGE;
 8001108:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800110c:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8001110:	2200      	movs	r2, #0
 8001112:	701a      	strb	r2, [r3, #0]
	dataPacket.dataLen = DESIOT_ADDITIONAL_DATA_SIZE + sizeof(VS) + sizeof(fNumber); // add bytes of additional data
 8001114:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001118:	f2a3 4204 	subw	r2, r3, #1028	; 0x404
 800111c:	6813      	ldr	r3, [r2, #0]
 800111e:	2137      	movs	r1, #55	; 0x37
 8001120:	f361 2311 	bfi	r3, r1, #8, #10
 8001124:	6013      	str	r3, [r2, #0]

	// ignore 12-byte data for device ID
	dataPacket.data[DESIOT_ADDITIONAL_DATA_SIZE] = VS;
 8001126:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800112a:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 800112e:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8001132:	f2a2 4209 	subw	r2, r2, #1033	; 0x409
 8001136:	7812      	ldrb	r2, [r2, #0]
 8001138:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
	memcpy(dataPacket.data + DESIOT_ADDITIONAL_DATA_SIZE + 1, &fNumber, sizeof(fNumber));
 800113c:	f107 030c 	add.w	r3, r7, #12
 8001140:	3303      	adds	r3, #3
 8001142:	3333      	adds	r3, #51	; 0x33
 8001144:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 8001148:	f5a2 6282 	sub.w	r2, r2, #1040	; 0x410
 800114c:	6812      	ldr	r2, [r2, #0]
 800114e:	601a      	str	r2, [r3, #0]

	DESIoT_sendDataPacket(DESIOT_CMD_LEN + DESIOT_DATALEN_LEN + dataPacket.dataLen,
 8001150:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001154:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8001158:	681b      	ldr	r3, [r3, #0]
 800115a:	f3c3 2309 	ubfx	r3, r3, #8, #10
 800115e:	b29b      	uxth	r3, r3
 8001160:	3303      	adds	r3, #3
 8001162:	f107 020c 	add.w	r2, r7, #12
 8001166:	4611      	mov	r1, r2
 8001168:	4618      	mov	r0, r3
 800116a:	f000 f83d 	bl	80011e8 <DESIoT_sendDataPacket>
			(uint8_t*)&dataPacket);
}
 800116e:	bf00      	nop
 8001170:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 8001174:	46bd      	mov	sp, r7
 8001176:	bd80      	pop	{r7, pc}

08001178 <DESIoT_readVS>:

void DESIoT_readVS(uint8_t VS)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	f5ad 6d82 	sub.w	sp, sp, #1040	; 0x410
 800117e:	af00      	add	r7, sp, #0
 8001180:	4602      	mov	r2, r0
 8001182:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001186:	f2a3 4309 	subw	r3, r3, #1033	; 0x409
 800118a:	701a      	strb	r2, [r3, #0]
	DESIoT_dataPacket_t dataPacket;
	dataPacket.cmd = DESIOT_CMD_READ_VIRTUAL_STORAGE;
 800118c:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 8001190:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 8001194:	2202      	movs	r2, #2
 8001196:	701a      	strb	r2, [r3, #0]
	dataPacket.dataLen = DESIOT_ADDITIONAL_DATA_SIZE + sizeof(VS); // add bytes of additional data
 8001198:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 800119c:	f2a3 4204 	subw	r2, r3, #1028	; 0x404
 80011a0:	6813      	ldr	r3, [r2, #0]
 80011a2:	2133      	movs	r1, #51	; 0x33
 80011a4:	f361 2311 	bfi	r3, r1, #8, #10
 80011a8:	6013      	str	r3, [r2, #0]

	// ignore 12-byte data for device ID
	dataPacket.data[DESIOT_ADDITIONAL_DATA_SIZE] = VS;
 80011aa:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80011ae:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80011b2:	f507 6282 	add.w	r2, r7, #1040	; 0x410
 80011b6:	f2a2 4209 	subw	r2, r2, #1033	; 0x409
 80011ba:	7812      	ldrb	r2, [r2, #0]
 80011bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

	DESIoT_sendDataPacket(DESIOT_CMD_LEN + DESIOT_DATALEN_LEN + dataPacket.dataLen,
 80011c0:	f507 6382 	add.w	r3, r7, #1040	; 0x410
 80011c4:	f2a3 4304 	subw	r3, r3, #1028	; 0x404
 80011c8:	681b      	ldr	r3, [r3, #0]
 80011ca:	f3c3 2309 	ubfx	r3, r3, #8, #10
 80011ce:	b29b      	uxth	r3, r3
 80011d0:	3303      	adds	r3, #3
 80011d2:	f107 020c 	add.w	r2, r7, #12
 80011d6:	4611      	mov	r1, r2
 80011d8:	4618      	mov	r0, r3
 80011da:	f000 f805 	bl	80011e8 <DESIoT_sendDataPacket>
			(uint8_t*)&dataPacket);
}
 80011de:	bf00      	nop
 80011e0:	f507 6782 	add.w	r7, r7, #1040	; 0x410
 80011e4:	46bd      	mov	sp, r7
 80011e6:	bd80      	pop	{r7, pc}

080011e8 <DESIoT_sendDataPacket>:
extern uint8_t testMode;
/**
 *
 */
void DESIoT_sendDataPacket(const size_t dataLen, uint8_t *data)
{
 80011e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80011ec:	b089      	sub	sp, #36	; 0x24
 80011ee:	af00      	add	r7, sp, #0
 80011f0:	6078      	str	r0, [r7, #4]
 80011f2:	6039      	str	r1, [r7, #0]
 80011f4:	466b      	mov	r3, sp
 80011f6:	461e      	mov	r6, r3
	uint8_t frame[DESIOT_HEADERS_LEN + dataLen + DESIOT_CRC_LEN];
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	3305      	adds	r3, #5
 80011fc:	61fb      	str	r3, [r7, #28]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	3306      	adds	r3, #6
 8001202:	2200      	movs	r2, #0
 8001204:	4698      	mov	r8, r3
 8001206:	4691      	mov	r9, r2
 8001208:	f04f 0200 	mov.w	r2, #0
 800120c:	f04f 0300 	mov.w	r3, #0
 8001210:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001214:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001218:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	3306      	adds	r3, #6
 8001220:	2200      	movs	r2, #0
 8001222:	461c      	mov	r4, r3
 8001224:	4615      	mov	r5, r2
 8001226:	f04f 0200 	mov.w	r2, #0
 800122a:	f04f 0300 	mov.w	r3, #0
 800122e:	00eb      	lsls	r3, r5, #3
 8001230:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001234:	00e2      	lsls	r2, r4, #3
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	3306      	adds	r3, #6
 800123a:	3307      	adds	r3, #7
 800123c:	08db      	lsrs	r3, r3, #3
 800123e:	00db      	lsls	r3, r3, #3
 8001240:	ebad 0d03 	sub.w	sp, sp, r3
 8001244:	466b      	mov	r3, sp
 8001246:	3300      	adds	r3, #0
 8001248:	61bb      	str	r3, [r7, #24]
	memset(frame, 0, sizeof(frame));
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	3306      	adds	r3, #6
 800124e:	461a      	mov	r2, r3
 8001250:	2100      	movs	r1, #0
 8001252:	69b8      	ldr	r0, [r7, #24]
 8001254:	f004 ff70 	bl	8006138 <memset>

	DESIoT_headFrame_t *headFrame = (DESIoT_headFrame_t*)frame;
 8001258:	69bb      	ldr	r3, [r7, #24]
 800125a:	617b      	str	r3, [r7, #20]
	DESIoT_trailFrame_t *trailFrame = (DESIoT_trailFrame_t*)(frame + sizeof(frame) - (DESIOT_TRAIL_LEN + DESIOT_CRC_LEN));
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3302      	adds	r3, #2
 8001260:	69ba      	ldr	r2, [r7, #24]
 8001262:	4413      	add	r3, r2
 8001264:	613b      	str	r3, [r7, #16]

	headFrame->h1 = DESIOT_H1_DEFAULT;
 8001266:	697b      	ldr	r3, [r7, #20]
 8001268:	2207      	movs	r2, #7
 800126a:	701a      	strb	r2, [r3, #0]
	headFrame->h2 = DESIOT_H2_DEFAULT;
 800126c:	697b      	ldr	r3, [r7, #20]
 800126e:	2217      	movs	r2, #23
 8001270:	705a      	strb	r2, [r3, #1]
	trailFrame->t1 = DESIOT_T1_DEFAULT;
 8001272:	693b      	ldr	r3, [r7, #16]
 8001274:	2270      	movs	r2, #112	; 0x70
 8001276:	701a      	strb	r2, [r3, #0]
	trailFrame->t2 = DESIOT_T2_DEFAULT;
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	2271      	movs	r2, #113	; 0x71
 800127c:	705a      	strb	r2, [r3, #1]

	{
		size_t i = DESIOT_HEAD_LEN;
 800127e:	2302      	movs	r3, #2
 8001280:	60fb      	str	r3, [r7, #12]
		// set data packet to frame
		memcpy(frame + i, data, dataLen);
 8001282:	69ba      	ldr	r2, [r7, #24]
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	4413      	add	r3, r2
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	6839      	ldr	r1, [r7, #0]
 800128c:	4618      	mov	r0, r3
 800128e:	f004 ff45 	bl	800611c <memcpy>

		// set config ID
		i += (DESIOT_CMD_LEN + DESIOT_DATALEN_LEN);
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	3303      	adds	r3, #3
 8001296:	60fb      	str	r3, [r7, #12]
		memcpy(frame + i, hFrame.config_id, DESIOT_CONFIG_ID_SIZE);
 8001298:	69ba      	ldr	r2, [r7, #24]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	441a      	add	r2, r3
 800129e:	4b2d      	ldr	r3, [pc, #180]	; (8001354 <DESIoT_sendDataPacket+0x16c>)
 80012a0:	3319      	adds	r3, #25
 80012a2:	6818      	ldr	r0, [r3, #0]
 80012a4:	6859      	ldr	r1, [r3, #4]
 80012a6:	689d      	ldr	r5, [r3, #8]
 80012a8:	68dc      	ldr	r4, [r3, #12]
 80012aa:	6010      	str	r0, [r2, #0]
 80012ac:	6051      	str	r1, [r2, #4]
 80012ae:	6095      	str	r5, [r2, #8]
 80012b0:	60d4      	str	r4, [r2, #12]
 80012b2:	6918      	ldr	r0, [r3, #16]
 80012b4:	6959      	ldr	r1, [r3, #20]
 80012b6:	6110      	str	r0, [r2, #16]
 80012b8:	6151      	str	r1, [r2, #20]
 80012ba:	7e1b      	ldrb	r3, [r3, #24]
 80012bc:	7613      	strb	r3, [r2, #24]
		// set device ID
		i += DESIOT_CONFIG_ID_SIZE;
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	3319      	adds	r3, #25
 80012c2:	60fb      	str	r3, [r7, #12]
		memcpy(frame + i, hFrame.device_id, DESIOT_DEVICE_ID_SIZE);
 80012c4:	69ba      	ldr	r2, [r7, #24]
 80012c6:	68fb      	ldr	r3, [r7, #12]
 80012c8:	4413      	add	r3, r2
 80012ca:	4a22      	ldr	r2, [pc, #136]	; (8001354 <DESIoT_sendDataPacket+0x16c>)
 80012cc:	461d      	mov	r5, r3
 80012ce:	4614      	mov	r4, r2
 80012d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012d2:	6028      	str	r0, [r5, #0]
 80012d4:	6069      	str	r1, [r5, #4]
 80012d6:	60aa      	str	r2, [r5, #8]
 80012d8:	60eb      	str	r3, [r5, #12]
 80012da:	cc03      	ldmia	r4!, {r0, r1}
 80012dc:	6128      	str	r0, [r5, #16]
 80012de:	6169      	str	r1, [r5, #20]
 80012e0:	7823      	ldrb	r3, [r4, #0]
 80012e2:	762b      	strb	r3, [r5, #24]
	}


	trailFrame->crc = DESIoT_Compute_CRC16(frame + DESIOT_HEAD_LEN, dataLen);
 80012e4:	69bb      	ldr	r3, [r7, #24]
 80012e6:	3302      	adds	r3, #2
 80012e8:	687a      	ldr	r2, [r7, #4]
 80012ea:	4611      	mov	r1, r2
 80012ec:	4618      	mov	r0, r3
 80012ee:	f000 f835 	bl	800135c <DESIoT_Compute_CRC16>
 80012f2:	4603      	mov	r3, r0
 80012f4:	461a      	mov	r2, r3
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	805a      	strh	r2, [r3, #2]

	if(testMode && !data[3 + DESIOT_ADDITIONAL_DATA_SIZE])
 80012fa:	4b17      	ldr	r3, [pc, #92]	; (8001358 <DESIoT_sendDataPacket+0x170>)
 80012fc:	781b      	ldrb	r3, [r3, #0]
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d01c      	beq.n	800133c <DESIoT_sendDataPacket+0x154>
 8001302:	683b      	ldr	r3, [r7, #0]
 8001304:	3335      	adds	r3, #53	; 0x35
 8001306:	781b      	ldrb	r3, [r3, #0]
 8001308:	2b00      	cmp	r3, #0
 800130a:	d117      	bne.n	800133c <DESIoT_sendDataPacket+0x154>
	{
		uint16_t randByte = rand() % (sizeof(frame) - 1);
 800130c:	f004 ff1c 	bl	8006148 <rand>
 8001310:	4603      	mov	r3, r0
 8001312:	461a      	mov	r2, r3
 8001314:	687b      	ldr	r3, [r7, #4]
 8001316:	3305      	adds	r3, #5
 8001318:	fbb2 f1f3 	udiv	r1, r2, r3
 800131c:	fb01 f303 	mul.w	r3, r1, r3
 8001320:	1ad3      	subs	r3, r2, r3
 8001322:	817b      	strh	r3, [r7, #10]
		frame[randByte] = !frame[randByte];
 8001324:	897b      	ldrh	r3, [r7, #10]
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	5cd3      	ldrb	r3, [r2, r3]
 800132a:	2b00      	cmp	r3, #0
 800132c:	bf0c      	ite	eq
 800132e:	2301      	moveq	r3, #1
 8001330:	2300      	movne	r3, #0
 8001332:	b2da      	uxtb	r2, r3
 8001334:	897b      	ldrh	r3, [r7, #10]
 8001336:	4611      	mov	r1, r2
 8001338:	69ba      	ldr	r2, [r7, #24]
 800133a:	54d1      	strb	r1, [r2, r3]
	}


	DESIOT_SENDBYTES_F_NAME(sizeof(frame), frame);
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	3306      	adds	r3, #6
 8001340:	69b9      	ldr	r1, [r7, #24]
 8001342:	4618      	mov	r0, r3
 8001344:	f001 f896 	bl	8002474 <DESIoT_sendBytes>
 8001348:	46b5      	mov	sp, r6
}
 800134a:	bf00      	nop
 800134c:	3724      	adds	r7, #36	; 0x24
 800134e:	46bd      	mov	sp, r7
 8001350:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8001354:	20000290 	.word	0x20000290
 8001358:	20000be8 	.word	0x20000be8

0800135c <DESIoT_Compute_CRC16>:
		crctable16[divident] = curByte;
	}
}

uint16_t DESIoT_Compute_CRC16(uint8_t *bytes, const int32_t BYTES_LEN)
{
 800135c:	b480      	push	{r7}
 800135e:	b087      	sub	sp, #28
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
 8001364:	6039      	str	r1, [r7, #0]
	uint16_t crc = 0;
 8001366:	2300      	movs	r3, #0
 8001368:	82fb      	strh	r3, [r7, #22]

	for (int32_t i = 0; i < BYTES_LEN; i++)
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
 800136e:	e019      	b.n	80013a4 <DESIoT_Compute_CRC16+0x48>
	{
		uint8_t b = bytes[i];
 8001370:	693b      	ldr	r3, [r7, #16]
 8001372:	687a      	ldr	r2, [r7, #4]
 8001374:	4413      	add	r3, r2
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	73fb      	strb	r3, [r7, #15]

		/* XOR-in next input byte into MSB of crc, that's our new intermediate divident */
		uint8_t pos = (uint8_t)((crc >> 8) ^ b);
 800137a:	8afb      	ldrh	r3, [r7, #22]
 800137c:	0a1b      	lsrs	r3, r3, #8
 800137e:	b29b      	uxth	r3, r3
 8001380:	b2da      	uxtb	r2, r3
 8001382:	7bfb      	ldrb	r3, [r7, #15]
 8001384:	4053      	eors	r3, r2
 8001386:	73bb      	strb	r3, [r7, #14]
		/* Shift out the MSB used for division per lookuptable and XOR with the remainder */
		crc = (uint16_t)((crc << 8) ^ (uint16_t)(crctable16[pos]));
 8001388:	8afb      	ldrh	r3, [r7, #22]
 800138a:	021b      	lsls	r3, r3, #8
 800138c:	b21a      	sxth	r2, r3
 800138e:	7bbb      	ldrb	r3, [r7, #14]
 8001390:	4909      	ldr	r1, [pc, #36]	; (80013b8 <DESIoT_Compute_CRC16+0x5c>)
 8001392:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8001396:	b21b      	sxth	r3, r3
 8001398:	4053      	eors	r3, r2
 800139a:	b21b      	sxth	r3, r3
 800139c:	82fb      	strh	r3, [r7, #22]
	for (int32_t i = 0; i < BYTES_LEN; i++)
 800139e:	693b      	ldr	r3, [r7, #16]
 80013a0:	3301      	adds	r3, #1
 80013a2:	613b      	str	r3, [r7, #16]
 80013a4:	693a      	ldr	r2, [r7, #16]
 80013a6:	683b      	ldr	r3, [r7, #0]
 80013a8:	429a      	cmp	r2, r3
 80013aa:	dbe1      	blt.n	8001370 <DESIoT_Compute_CRC16+0x14>
	}
	//	printf("\nHERE 3");

	return crc;
 80013ac:	8afb      	ldrh	r3, [r7, #22]
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	371c      	adds	r7, #28
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bc80      	pop	{r7}
 80013b6:	4770      	bx	lr
 80013b8:	20000000 	.word	0x20000000

080013bc <DESIoT_CBUF_putByte>:

void DESIoT_CBUF_putByte(DESIoT_CBUF_t *hCBuf, uint8_t rx)
{
 80013bc:	b480      	push	{r7}
 80013be:	b083      	sub	sp, #12
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	460b      	mov	r3, r1
 80013c6:	70fb      	strb	r3, [r7, #3]
	hCBuf->buffer[hCBuf->end++] = rx;
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	885b      	ldrh	r3, [r3, #2]
 80013cc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013d0:	b299      	uxth	r1, r3
 80013d2:	1c4b      	adds	r3, r1, #1
 80013d4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80013d8:	b298      	uxth	r0, r3
 80013da:	687a      	ldr	r2, [r7, #4]
 80013dc:	8853      	ldrh	r3, [r2, #2]
 80013de:	f360 0309 	bfi	r3, r0, #0, #10
 80013e2:	8053      	strh	r3, [r2, #2]
 80013e4:	460a      	mov	r2, r1
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	4413      	add	r3, r2
 80013ea:	78fa      	ldrb	r2, [r7, #3]
 80013ec:	719a      	strb	r2, [r3, #6]
}
 80013ee:	bf00      	nop
 80013f0:	370c      	adds	r7, #12
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bc80      	pop	{r7}
 80013f6:	4770      	bx	lr

080013f8 <DESIoT_CBUF_isEmpty>:

uint8_t DESIoT_CBUF_isEmpty(DESIoT_CBUF_t *hCBuf) {
 80013f8:	b480      	push	{r7}
 80013fa:	b083      	sub	sp, #12
 80013fc:	af00      	add	r7, sp, #0
 80013fe:	6078      	str	r0, [r7, #4]
	return hCBuf->end == hCBuf->start;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	885b      	ldrh	r3, [r3, #2]
 8001404:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001408:	b29a      	uxth	r2, r3
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	881b      	ldrh	r3, [r3, #0]
 800140e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001412:	b29b      	uxth	r3, r3
 8001414:	429a      	cmp	r2, r3
 8001416:	bf0c      	ite	eq
 8001418:	2301      	moveq	r3, #1
 800141a:	2300      	movne	r3, #0
 800141c:	b2db      	uxtb	r3, r3
}
 800141e:	4618      	mov	r0, r3
 8001420:	370c      	adds	r7, #12
 8001422:	46bd      	mov	sp, r7
 8001424:	bc80      	pop	{r7}
 8001426:	4770      	bx	lr

08001428 <DESIoT_CBUF_getByte>:

uint8_t DESIoT_CBUF_getByte(DESIoT_CBUF_t *hCBuf, uint8_t *rx)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
 800142e:	6078      	str	r0, [r7, #4]
 8001430:	6039      	str	r1, [r7, #0]
	if (hCBuf->end != hCBuf->start)
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	885b      	ldrh	r3, [r3, #2]
 8001436:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800143a:	b29a      	uxth	r2, r3
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	881b      	ldrh	r3, [r3, #0]
 8001440:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001444:	b29b      	uxth	r3, r3
 8001446:	429a      	cmp	r2, r3
 8001448:	d015      	beq.n	8001476 <DESIoT_CBUF_getByte+0x4e>
	{
		*rx = hCBuf->buffer[hCBuf->start++];
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	881b      	ldrh	r3, [r3, #0]
 800144e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001452:	b299      	uxth	r1, r3
 8001454:	1c4b      	adds	r3, r1, #1
 8001456:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800145a:	b298      	uxth	r0, r3
 800145c:	687a      	ldr	r2, [r7, #4]
 800145e:	8813      	ldrh	r3, [r2, #0]
 8001460:	f360 0309 	bfi	r3, r0, #0, #10
 8001464:	8013      	strh	r3, [r2, #0]
 8001466:	460a      	mov	r2, r1
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	4413      	add	r3, r2
 800146c:	799a      	ldrb	r2, [r3, #6]
 800146e:	683b      	ldr	r3, [r7, #0]
 8001470:	701a      	strb	r2, [r3, #0]
		return DESIOT_CBUF_OK;
 8001472:	2300      	movs	r3, #0
 8001474:	e000      	b.n	8001478 <DESIoT_CBUF_getByte+0x50>
	}

	return DESIOT_CBUF_ERROR;
 8001476:	2301      	movs	r3, #1
}
 8001478:	4618      	mov	r0, r3
 800147a:	370c      	adds	r7, #12
 800147c:	46bd      	mov	sp, r7
 800147e:	bc80      	pop	{r7}
 8001480:	4770      	bx	lr

08001482 <DESIoT_setUpStartOfParsing>:

void DESIoT_setUpStartOfParsing(DESIoT_Frame_Hander_t *hFrame, DESIoT_CBUF_t *curCBuf)
{
 8001482:	b580      	push	{r7, lr}
 8001484:	b082      	sub	sp, #8
 8001486:	af00      	add	r7, sp, #0
 8001488:	6078      	str	r0, [r7, #4]
 800148a:	6039      	str	r1, [r7, #0]
	hFrame->millis = DESIoT_millis();
 800148c:	f001 f80a 	bl	80024a4 <DESIoT_millis>
 8001490:	4602      	mov	r2, r0
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	635a      	str	r2, [r3, #52]	; 0x34
	hFrame->curCBuf = curCBuf;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	683a      	ldr	r2, [r7, #0]
 800149a:	f8c3 2440 	str.w	r2, [r3, #1088]	; 0x440
	hFrame->curCBuf->startRestore = hFrame->curCBuf->start;
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	f8d3 3440 	ldr.w	r3, [r3, #1088]	; 0x440
 80014a4:	687a      	ldr	r2, [r7, #4]
 80014a6:	f8d2 2440 	ldr.w	r2, [r2, #1088]	; 0x440
 80014aa:	881b      	ldrh	r3, [r3, #0]
 80014ac:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80014b0:	b299      	uxth	r1, r3
 80014b2:	8893      	ldrh	r3, [r2, #4]
 80014b4:	f361 0309 	bfi	r3, r1, #0, #10
 80014b8:	8093      	strh	r3, [r2, #4]
}
 80014ba:	bf00      	nop
 80014bc:	3708      	adds	r7, #8
 80014be:	46bd      	mov	sp, r7
 80014c0:	bd80      	pop	{r7, pc}
	...

080014c4 <DESIoT_FRAME_parsing>:

void DESIoT_FRAME_parsing(DESIoT_Frame_Hander_t *hFrame, uint8_t byte, DESIoT_CBUF_t *curCBuf)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b086      	sub	sp, #24
 80014c8:	af00      	add	r7, sp, #0
 80014ca:	60f8      	str	r0, [r7, #12]
 80014cc:	460b      	mov	r3, r1
 80014ce:	607a      	str	r2, [r7, #4]
 80014d0:	72fb      	strb	r3, [r7, #11]
	switch (hFrame->index)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80014d8:	2b04      	cmp	r3, #4
 80014da:	d84c      	bhi.n	8001576 <DESIoT_FRAME_parsing+0xb2>
 80014dc:	a201      	add	r2, pc, #4	; (adr r2, 80014e4 <DESIoT_FRAME_parsing+0x20>)
 80014de:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80014e2:	bf00      	nop
 80014e4:	080014f9 	.word	0x080014f9
 80014e8:	08001537 	.word	0x08001537
 80014ec:	08001559 	.word	0x08001559
 80014f0:	08001563 	.word	0x08001563
 80014f4:	0800156d 	.word	0x0800156d
	{
	case DESIOT_H1_INDEX:
		hFrame->curCBuf->startRestore = hFrame->curCBuf->start;
 80014f8:	68fb      	ldr	r3, [r7, #12]
 80014fa:	f8d3 3440 	ldr.w	r3, [r3, #1088]	; 0x440
 80014fe:	68fa      	ldr	r2, [r7, #12]
 8001500:	f8d2 2440 	ldr.w	r2, [r2, #1088]	; 0x440
 8001504:	881b      	ldrh	r3, [r3, #0]
 8001506:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800150a:	b299      	uxth	r1, r3
 800150c:	8893      	ldrh	r3, [r2, #4]
 800150e:	f361 0309 	bfi	r3, r1, #0, #10
 8001512:	8093      	strh	r3, [r2, #4]
		if (byte == DESIOT_H1_DEFAULT)
 8001514:	7afb      	ldrb	r3, [r7, #11]
 8001516:	2b07      	cmp	r3, #7
 8001518:	d104      	bne.n	8001524 <DESIoT_FRAME_parsing+0x60>
			hFrame->frame.h1 = byte;
 800151a:	68fb      	ldr	r3, [r7, #12]
 800151c:	7afa      	ldrb	r2, [r7, #11]
 800151e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

		else
			DESIOT_SET_FRAME_FAILED_STATUS(hFrame->status);
		break;
 8001522:	e0cc      	b.n	80016be <DESIoT_FRAME_parsing+0x1fa>
			DESIOT_SET_FRAME_FAILED_STATUS(hFrame->status);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800152a:	3b01      	subs	r3, #1
 800152c:	b2da      	uxtb	r2, r3
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		break;
 8001534:	e0c3      	b.n	80016be <DESIoT_FRAME_parsing+0x1fa>
	case DESIOT_H2_INDEX:
		if (byte == DESIOT_H2_DEFAULT)
 8001536:	7afb      	ldrb	r3, [r7, #11]
 8001538:	2b17      	cmp	r3, #23
 800153a:	d104      	bne.n	8001546 <DESIoT_FRAME_parsing+0x82>
			hFrame->frame.h2 = byte;
 800153c:	68fb      	ldr	r3, [r7, #12]
 800153e:	7afa      	ldrb	r2, [r7, #11]
 8001540:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		else
			DESIOT_SET_FRAME_FAILED_STATUS(hFrame->status);
		break;
 8001544:	e0bb      	b.n	80016be <DESIoT_FRAME_parsing+0x1fa>
			DESIOT_SET_FRAME_FAILED_STATUS(hFrame->status);
 8001546:	68fb      	ldr	r3, [r7, #12]
 8001548:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800154c:	3b01      	subs	r3, #1
 800154e:	b2da      	uxtb	r2, r3
 8001550:	68fb      	ldr	r3, [r7, #12]
 8001552:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		break;
 8001556:	e0b2      	b.n	80016be <DESIoT_FRAME_parsing+0x1fa>
	case DESIOT_CMD_INDEX:
		hFrame->frame.dataPacket.cmd = byte;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	7afa      	ldrb	r2, [r7, #11]
 800155c:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
		break;
 8001560:	e0ad      	b.n	80016be <DESIoT_FRAME_parsing+0x1fa>
	case DESIOT_DATALEN_INDEX:
		hFrame->frame.dataPacket.dataLenArr[0] = byte;
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	7afa      	ldrb	r2, [r7, #11]
 8001566:	f883 203b 	strb.w	r2, [r3, #59]	; 0x3b
		break;
 800156a:	e0a8      	b.n	80016be <DESIoT_FRAME_parsing+0x1fa>
	case DESIOT_DATALEN_INDEX + 1:
	hFrame->frame.dataPacket.dataLenArr[1] = byte;
 800156c:	68fb      	ldr	r3, [r7, #12]
 800156e:	7afa      	ldrb	r2, [r7, #11]
 8001570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
	break;
 8001574:	e0a3      	b.n	80016be <DESIoT_FRAME_parsing+0x1fa>
	default:
		if (hFrame->index == (DESIOT_HEAD_FRAME_LEN + hFrame->frame.dataPacket.dataLen)) // t1
 8001576:	68fb      	ldr	r3, [r7, #12]
 8001578:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 800157c:	4619      	mov	r1, r3
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 8001584:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001588:	f003 0303 	and.w	r3, r3, #3
 800158c:	021b      	lsls	r3, r3, #8
 800158e:	4313      	orrs	r3, r2
 8001590:	b29b      	uxth	r3, r3
 8001592:	3305      	adds	r3, #5
 8001594:	4299      	cmp	r1, r3
 8001596:	d110      	bne.n	80015ba <DESIoT_FRAME_parsing+0xf6>
		{
			if (byte == DESIOT_T1_DEFAULT)
 8001598:	7afb      	ldrb	r3, [r7, #11]
 800159a:	2b70      	cmp	r3, #112	; 0x70
 800159c:	d104      	bne.n	80015a8 <DESIoT_FRAME_parsing+0xe4>
				hFrame->frame.t1 = byte;
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	7afa      	ldrb	r2, [r7, #11]
 80015a2:	f883 243c 	strb.w	r2, [r3, #1084]	; 0x43c
		}
		else
		{
			hFrame->frame.dataPacket.data[hFrame->index - (DESIOT_HEAD_LEN + DESIOT_CMD_LEN + DESIOT_DATALEN_LEN)] = byte;
		}
		break;
 80015a6:	e089      	b.n	80016bc <DESIoT_FRAME_parsing+0x1f8>
				DESIOT_SET_FRAME_FAILED_STATUS(hFrame->status);
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80015ae:	3b01      	subs	r3, #1
 80015b0:	b2da      	uxtb	r2, r3
 80015b2:	68fb      	ldr	r3, [r7, #12]
 80015b4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		break;
 80015b8:	e080      	b.n	80016bc <DESIoT_FRAME_parsing+0x1f8>
		else if (hFrame->index == (DESIOT_HEAD_FRAME_LEN + hFrame->frame.dataPacket.dataLen + 1)) // t2
 80015ba:	68fb      	ldr	r3, [r7, #12]
 80015bc:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80015c0:	4619      	mov	r1, r3
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 80015c8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80015cc:	f003 0303 	and.w	r3, r3, #3
 80015d0:	021b      	lsls	r3, r3, #8
 80015d2:	4313      	orrs	r3, r2
 80015d4:	b29b      	uxth	r3, r3
 80015d6:	3306      	adds	r3, #6
 80015d8:	4299      	cmp	r1, r3
 80015da:	d110      	bne.n	80015fe <DESIoT_FRAME_parsing+0x13a>
			if (byte == DESIOT_T2_DEFAULT)
 80015dc:	7afb      	ldrb	r3, [r7, #11]
 80015de:	2b71      	cmp	r3, #113	; 0x71
 80015e0:	d104      	bne.n	80015ec <DESIoT_FRAME_parsing+0x128>
				hFrame->frame.t2 = byte;
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	7afa      	ldrb	r2, [r7, #11]
 80015e6:	f883 243d 	strb.w	r2, [r3, #1085]	; 0x43d
		break;
 80015ea:	e067      	b.n	80016bc <DESIoT_FRAME_parsing+0x1f8>
				DESIOT_SET_FRAME_FAILED_STATUS(hFrame->status);
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80015f2:	3b01      	subs	r3, #1
 80015f4:	b2da      	uxtb	r2, r3
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		break;
 80015fc:	e05e      	b.n	80016bc <DESIoT_FRAME_parsing+0x1f8>
		else if (hFrame->index == (DESIOT_HEAD_FRAME_LEN + hFrame->frame.dataPacket.dataLen + 2)) // crc1
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001604:	4619      	mov	r1, r3
 8001606:	68fb      	ldr	r3, [r7, #12]
 8001608:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 800160c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001610:	f003 0303 	and.w	r3, r3, #3
 8001614:	021b      	lsls	r3, r3, #8
 8001616:	4313      	orrs	r3, r2
 8001618:	b29b      	uxth	r3, r3
 800161a:	3307      	adds	r3, #7
 800161c:	4299      	cmp	r1, r3
 800161e:	d104      	bne.n	800162a <DESIoT_FRAME_parsing+0x166>
			hFrame->frame.crcArr[0] = byte;
 8001620:	68fb      	ldr	r3, [r7, #12]
 8001622:	7afa      	ldrb	r2, [r7, #11]
 8001624:	f883 243e 	strb.w	r2, [r3, #1086]	; 0x43e
		break;
 8001628:	e048      	b.n	80016bc <DESIoT_FRAME_parsing+0x1f8>
		else if (hFrame->index == (DESIOT_HEAD_FRAME_LEN + hFrame->frame.dataPacket.dataLen + 3)) // crc2
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 8001630:	4619      	mov	r1, r3
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 8001638:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800163c:	f003 0303 	and.w	r3, r3, #3
 8001640:	021b      	lsls	r3, r3, #8
 8001642:	4313      	orrs	r3, r2
 8001644:	b29b      	uxth	r3, r3
 8001646:	3308      	adds	r3, #8
 8001648:	4299      	cmp	r1, r3
 800164a:	d12e      	bne.n	80016aa <DESIoT_FRAME_parsing+0x1e6>
			hFrame->frame.crcArr[1] = byte;
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	7afa      	ldrb	r2, [r7, #11]
 8001650:	f883 243f 	strb.w	r2, [r3, #1087]	; 0x43f
			uint16_t crcCalculate = DESIoT_Compute_CRC16((uint8_t *)&hFrame->frame.dataPacket, DESIOT_CMD_LEN + DESIOT_DATALEN_LEN + hFrame->frame.dataPacket.dataLen);
 8001654:	68fb      	ldr	r3, [r7, #12]
 8001656:	f103 003a 	add.w	r0, r3, #58	; 0x3a
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 8001660:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001664:	f003 0303 	and.w	r3, r3, #3
 8001668:	021b      	lsls	r3, r3, #8
 800166a:	4313      	orrs	r3, r2
 800166c:	b29b      	uxth	r3, r3
 800166e:	3303      	adds	r3, #3
 8001670:	4619      	mov	r1, r3
 8001672:	f7ff fe73 	bl	800135c <DESIoT_Compute_CRC16>
 8001676:	4603      	mov	r3, r0
 8001678:	82fb      	strh	r3, [r7, #22]
			if (crcCalculate == hFrame->frame.crc)
 800167a:	68fb      	ldr	r3, [r7, #12]
 800167c:	f8b3 343e 	ldrh.w	r3, [r3, #1086]	; 0x43e
 8001680:	8afa      	ldrh	r2, [r7, #22]
 8001682:	429a      	cmp	r2, r3
 8001684:	d108      	bne.n	8001698 <DESIoT_FRAME_parsing+0x1d4>
				DESIOT_SET_FRAME_SUCCESS_STATUS(hFrame->status);
 8001686:	68fb      	ldr	r3, [r7, #12]
 8001688:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800168c:	3b02      	subs	r3, #2
 800168e:	b2da      	uxtb	r2, r3
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		break;
 8001696:	e011      	b.n	80016bc <DESIoT_FRAME_parsing+0x1f8>
				DESIOT_SET_FRAME_FAILED_STATUS(hFrame->status);
 8001698:	68fb      	ldr	r3, [r7, #12]
 800169a:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 800169e:	3b01      	subs	r3, #1
 80016a0:	b2da      	uxtb	r2, r3
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
		break;
 80016a8:	e008      	b.n	80016bc <DESIoT_FRAME_parsing+0x1f8>
			hFrame->frame.dataPacket.data[hFrame->index - (DESIOT_HEAD_LEN + DESIOT_CMD_LEN + DESIOT_DATALEN_LEN)] = byte;
 80016aa:	68fb      	ldr	r3, [r7, #12]
 80016ac:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80016b0:	3b05      	subs	r3, #5
 80016b2:	68fa      	ldr	r2, [r7, #12]
 80016b4:	4413      	add	r3, r2
 80016b6:	7afa      	ldrb	r2, [r7, #11]
 80016b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
		break;
 80016bc:	bf00      	nop
	}
	hFrame->index++;
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f893 3033 	ldrb.w	r3, [r3, #51]	; 0x33
 80016c4:	3301      	adds	r3, #1
 80016c6:	b2da      	uxtb	r2, r3
 80016c8:	68fb      	ldr	r3, [r7, #12]
 80016ca:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 80016ce:	bf00      	nop
 80016d0:	3718      	adds	r7, #24
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop

080016d8 <DESIoT_frameFailedHandler>:


void DESIoT_frameFailedHandler()
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	af00      	add	r7, sp, #0
	switch (hFrame.status)
 80016dc:	4b05      	ldr	r3, [pc, #20]	; (80016f4 <DESIoT_frameFailedHandler+0x1c>)
 80016de:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80016e2:	2b02      	cmp	r3, #2
 80016e4:	d104      	bne.n	80016f0 <DESIoT_frameFailedHandler+0x18>
	{
	case DESIOT_FRAME_GATEWAY_FAILED:
		DESIoT_restartFrameIndexes();
 80016e6:	f000 f819 	bl	800171c <DESIoT_restartFrameIndexes>
		DESIoT_restartCBufIndexes();
 80016ea:	f000 f827 	bl	800173c <DESIoT_restartCBufIndexes>
		break;
 80016ee:	bf00      	nop
	}
}
 80016f0:	bf00      	nop
 80016f2:	bd80      	pop	{r7, pc}
 80016f4:	20000290 	.word	0x20000290

080016f8 <DESIoT_frameSuccessHandler>:

void DESIoT_frameSuccessHandler()
{
 80016f8:	b580      	push	{r7, lr}
 80016fa:	af00      	add	r7, sp, #0
	switch (hFrame.status)
 80016fc:	4b06      	ldr	r3, [pc, #24]	; (8001718 <DESIoT_frameSuccessHandler+0x20>)
 80016fe:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 8001702:	2b01      	cmp	r3, #1
 8001704:	d104      	bne.n	8001710 <DESIoT_frameSuccessHandler+0x18>
	{
	case DESIOT_FRAME_GATEWAY_SUCCESS:

		DESIoT_execSuccessfulFrame();
 8001706:	f000 f89b 	bl	8001840 <DESIoT_execSuccessfulFrame>
		DESIoT_restartFrameIndexes();
 800170a:	f000 f807 	bl	800171c <DESIoT_restartFrameIndexes>

		break;
 800170e:	e000      	b.n	8001712 <DESIoT_frameSuccessHandler+0x1a>

	default:
		break;
 8001710:	bf00      	nop
	}
}
 8001712:	bf00      	nop
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000290 	.word	0x20000290

0800171c <DESIoT_restartFrameIndexes>:

void DESIoT_restartFrameIndexes()
{
 800171c:	b480      	push	{r7}
 800171e:	af00      	add	r7, sp, #0
	hFrame.status = DESIOT_FRAME_IDLE;
 8001720:	4b05      	ldr	r3, [pc, #20]	; (8001738 <DESIoT_restartFrameIndexes+0x1c>)
 8001722:	2200      	movs	r2, #0
 8001724:	f883 2032 	strb.w	r2, [r3, #50]	; 0x32
	hFrame.index = 0;
 8001728:	4b03      	ldr	r3, [pc, #12]	; (8001738 <DESIoT_restartFrameIndexes+0x1c>)
 800172a:	2200      	movs	r2, #0
 800172c:	f883 2033 	strb.w	r2, [r3, #51]	; 0x33
}
 8001730:	bf00      	nop
 8001732:	46bd      	mov	sp, r7
 8001734:	bc80      	pop	{r7}
 8001736:	4770      	bx	lr
 8001738:	20000290 	.word	0x20000290

0800173c <DESIoT_restartCBufIndexes>:

void DESIoT_restartCBufIndexes()
{
 800173c:	b480      	push	{r7}
 800173e:	b083      	sub	sp, #12
 8001740:	af00      	add	r7, sp, #0
	hFrame.curCBuf->start = hFrame.curCBuf->startRestore;
 8001742:	4b2a      	ldr	r3, [pc, #168]	; (80017ec <DESIoT_restartCBufIndexes+0xb0>)
 8001744:	f8d3 3440 	ldr.w	r3, [r3, #1088]	; 0x440
 8001748:	4a28      	ldr	r2, [pc, #160]	; (80017ec <DESIoT_restartCBufIndexes+0xb0>)
 800174a:	f8d2 2440 	ldr.w	r2, [r2, #1088]	; 0x440
 800174e:	889b      	ldrh	r3, [r3, #4]
 8001750:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001754:	b299      	uxth	r1, r3
 8001756:	8813      	ldrh	r3, [r2, #0]
 8001758:	f361 0309 	bfi	r3, r1, #0, #10
 800175c:	8013      	strh	r3, [r2, #0]

	// Flush to next headers
	uint16_t currentCBufEnd = hFrame.curCBuf->end;
 800175e:	4b23      	ldr	r3, [pc, #140]	; (80017ec <DESIoT_restartCBufIndexes+0xb0>)
 8001760:	f8d3 3440 	ldr.w	r3, [r3, #1088]	; 0x440
 8001764:	885b      	ldrh	r3, [r3, #2]
 8001766:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800176a:	b29b      	uxth	r3, r3
 800176c:	80fb      	strh	r3, [r7, #6]
	for (; hFrame.curCBuf->start != currentCBufEnd; hFrame.curCBuf->start++)
 800176e:	e02b      	b.n	80017c8 <DESIoT_restartCBufIndexes+0x8c>
	{
		// check for H1 and H2 mathch
		if (hFrame.curCBuf->buffer[hFrame.curCBuf->start] == DESIOT_H1_DEFAULT && hFrame.curCBuf->buffer[hFrame.curCBuf->start + 1] == DESIOT_H2_DEFAULT)
 8001770:	4b1e      	ldr	r3, [pc, #120]	; (80017ec <DESIoT_restartCBufIndexes+0xb0>)
 8001772:	f8d3 3440 	ldr.w	r3, [r3, #1088]	; 0x440
 8001776:	4a1d      	ldr	r2, [pc, #116]	; (80017ec <DESIoT_restartCBufIndexes+0xb0>)
 8001778:	f8d2 2440 	ldr.w	r2, [r2, #1088]	; 0x440
 800177c:	8812      	ldrh	r2, [r2, #0]
 800177e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8001782:	b292      	uxth	r2, r2
 8001784:	4413      	add	r3, r2
 8001786:	799b      	ldrb	r3, [r3, #6]
 8001788:	2b07      	cmp	r3, #7
 800178a:	d10e      	bne.n	80017aa <DESIoT_restartCBufIndexes+0x6e>
 800178c:	4b17      	ldr	r3, [pc, #92]	; (80017ec <DESIoT_restartCBufIndexes+0xb0>)
 800178e:	f8d3 2440 	ldr.w	r2, [r3, #1088]	; 0x440
 8001792:	4b16      	ldr	r3, [pc, #88]	; (80017ec <DESIoT_restartCBufIndexes+0xb0>)
 8001794:	f8d3 3440 	ldr.w	r3, [r3, #1088]	; 0x440
 8001798:	881b      	ldrh	r3, [r3, #0]
 800179a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800179e:	b29b      	uxth	r3, r3
 80017a0:	3301      	adds	r3, #1
 80017a2:	4413      	add	r3, r2
 80017a4:	799b      	ldrb	r3, [r3, #6]
 80017a6:	2b17      	cmp	r3, #23
 80017a8:	d01a      	beq.n	80017e0 <DESIoT_restartCBufIndexes+0xa4>
	for (; hFrame.curCBuf->start != currentCBufEnd; hFrame.curCBuf->start++)
 80017aa:	4b10      	ldr	r3, [pc, #64]	; (80017ec <DESIoT_restartCBufIndexes+0xb0>)
 80017ac:	f8d3 3440 	ldr.w	r3, [r3, #1088]	; 0x440
 80017b0:	881a      	ldrh	r2, [r3, #0]
 80017b2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80017b6:	b292      	uxth	r2, r2
 80017b8:	3201      	adds	r2, #1
 80017ba:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80017be:	b291      	uxth	r1, r2
 80017c0:	881a      	ldrh	r2, [r3, #0]
 80017c2:	f361 0209 	bfi	r2, r1, #0, #10
 80017c6:	801a      	strh	r2, [r3, #0]
 80017c8:	4b08      	ldr	r3, [pc, #32]	; (80017ec <DESIoT_restartCBufIndexes+0xb0>)
 80017ca:	f8d3 3440 	ldr.w	r3, [r3, #1088]	; 0x440
 80017ce:	881b      	ldrh	r3, [r3, #0]
 80017d0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80017d4:	b29b      	uxth	r3, r3
 80017d6:	461a      	mov	r2, r3
 80017d8:	88fb      	ldrh	r3, [r7, #6]
 80017da:	429a      	cmp	r2, r3
 80017dc:	d1c8      	bne.n	8001770 <DESIoT_restartCBufIndexes+0x34>
			break;
	}
}
 80017de:	e000      	b.n	80017e2 <DESIoT_restartCBufIndexes+0xa6>
			break;
 80017e0:	bf00      	nop
}
 80017e2:	bf00      	nop
 80017e4:	370c      	adds	r7, #12
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr
 80017ec:	20000290 	.word	0x20000290

080017f0 <DESIoT_frameTimeoutHandler>:

void DESIoT_frameTimeoutHandler()
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
	if (DESIOT_IS_FRAME_ON_PROCESS_STATUS(hFrame.status))
 80017f4:	4b10      	ldr	r3, [pc, #64]	; (8001838 <DESIoT_frameTimeoutHandler+0x48>)
 80017f6:	f893 3032 	ldrb.w	r3, [r3, #50]	; 0x32
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	d01a      	beq.n	8001834 <DESIoT_frameTimeoutHandler+0x44>
 80017fe:	4b0e      	ldr	r3, [pc, #56]	; (8001838 <DESIoT_frameTimeoutHandler+0x48>)
 8001800:	f893 2032 	ldrb.w	r2, [r3, #50]	; 0x32
 8001804:	4b0d      	ldr	r3, [pc, #52]	; (800183c <DESIoT_frameTimeoutHandler+0x4c>)
 8001806:	fba3 1302 	umull	r1, r3, r3, r2
 800180a:	0859      	lsrs	r1, r3, #1
 800180c:	460b      	mov	r3, r1
 800180e:	005b      	lsls	r3, r3, #1
 8001810:	440b      	add	r3, r1
 8001812:	1ad3      	subs	r3, r2, r3
 8001814:	b2db      	uxtb	r3, r3
 8001816:	2b00      	cmp	r3, #0
 8001818:	d10c      	bne.n	8001834 <DESIoT_frameTimeoutHandler+0x44>
		if (DESIOT_MILLIS_F_NAME() - hFrame.millis > DESIOT_TIMEOUT_DURATION)
 800181a:	f000 fe43 	bl	80024a4 <DESIoT_millis>
 800181e:	4602      	mov	r2, r0
 8001820:	4b05      	ldr	r3, [pc, #20]	; (8001838 <DESIoT_frameTimeoutHandler+0x48>)
 8001822:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001824:	1ad3      	subs	r3, r2, r3
 8001826:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800182a:	d903      	bls.n	8001834 <DESIoT_frameTimeoutHandler+0x44>
		{
			DESIoT_restartFrameIndexes();
 800182c:	f7ff ff76 	bl	800171c <DESIoT_restartFrameIndexes>
			DESIoT_restartCBufIndexes();
 8001830:	f7ff ff84 	bl	800173c <DESIoT_restartCBufIndexes>
		}
}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000290 	.word	0x20000290
 800183c:	aaaaaaab 	.word	0xaaaaaaab

08001840 <DESIoT_execSuccessfulFrame>:

void DESIoT_execSuccessfulFrame() {
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
	switch (hFrame.frame.dataPacket.cmd) {
 8001844:	4b05      	ldr	r3, [pc, #20]	; (800185c <DESIoT_execSuccessfulFrame+0x1c>)
 8001846:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800184a:	2b01      	cmp	r3, #1
 800184c:	d102      	bne.n	8001854 <DESIoT_execSuccessfulFrame+0x14>
	case DESIOT_CMD_SYNC_VIRTUAL_STORAGE:
		DESIoT_execVSyncWF();
 800184e:	f000 f807 	bl	8001860 <DESIoT_execVSyncWF>
		break;
 8001852:	e000      	b.n	8001856 <DESIoT_execSuccessfulFrame+0x16>
	default:
		break;
 8001854:	bf00      	nop
	}
}
 8001856:	bf00      	nop
 8001858:	bd80      	pop	{r7, pc}
 800185a:	bf00      	nop
 800185c:	20000290 	.word	0x20000290

08001860 <DESIoT_execVSyncWF>:

void DESIoT_execVSyncWF() {
 8001860:	b580      	push	{r7, lr}
 8001862:	b0c2      	sub	sp, #264	; 0x108
 8001864:	af00      	add	r7, sp, #0
	char payload[DESIOT_MAX_VSSYNC_PAYLOAD_SIZE];
	uint8_t VSID = hFrame.frame.dataPacket.data[0];
 8001866:	4ba3      	ldr	r3, [pc, #652]	; (8001af4 <DESIoT_execVSyncWF+0x294>)
 8001868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800186c:	f887 3107 	strb.w	r3, [r7, #263]	; 0x107
	size_t len = hFrame.frame.dataPacket.dataLen - sizeof(VSID);
 8001870:	4ba0      	ldr	r3, [pc, #640]	; (8001af4 <DESIoT_execVSyncWF+0x294>)
 8001872:	f893 203b 	ldrb.w	r2, [r3, #59]	; 0x3b
 8001876:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800187a:	f003 0303 	and.w	r3, r3, #3
 800187e:	021b      	lsls	r3, r3, #8
 8001880:	4313      	orrs	r3, r2
 8001882:	b29b      	uxth	r3, r3
 8001884:	3b01      	subs	r3, #1
 8001886:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100

	memcpy(payload,hFrame.frame.dataPacket.data + 1, len);
 800188a:	499b      	ldr	r1, [pc, #620]	; (8001af8 <DESIoT_execVSyncWF+0x298>)
 800188c:	463b      	mov	r3, r7
 800188e:	f8d7 2100 	ldr.w	r2, [r7, #256]	; 0x100
 8001892:	4618      	mov	r0, r3
 8001894:	f004 fc42 	bl	800611c <memcpy>

	switch (VSID) {
 8001898:	f897 3107 	ldrb.w	r3, [r7, #263]	; 0x107
 800189c:	2b1f      	cmp	r3, #31
 800189e:	f200 8123 	bhi.w	8001ae8 <DESIoT_execVSyncWF+0x288>
 80018a2:	a201      	add	r2, pc, #4	; (adr r2, 80018a8 <DESIoT_execVSyncWF+0x48>)
 80018a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80018a8:	08001929 	.word	0x08001929
 80018ac:	08001937 	.word	0x08001937
 80018b0:	08001945 	.word	0x08001945
 80018b4:	08001953 	.word	0x08001953
 80018b8:	08001961 	.word	0x08001961
 80018bc:	0800196f 	.word	0x0800196f
 80018c0:	0800197d 	.word	0x0800197d
 80018c4:	0800198b 	.word	0x0800198b
 80018c8:	08001999 	.word	0x08001999
 80018cc:	080019a7 	.word	0x080019a7
 80018d0:	080019b5 	.word	0x080019b5
 80018d4:	080019c3 	.word	0x080019c3
 80018d8:	080019d1 	.word	0x080019d1
 80018dc:	080019df 	.word	0x080019df
 80018e0:	080019ed 	.word	0x080019ed
 80018e4:	080019fb 	.word	0x080019fb
 80018e8:	08001a09 	.word	0x08001a09
 80018ec:	08001a17 	.word	0x08001a17
 80018f0:	08001a25 	.word	0x08001a25
 80018f4:	08001a33 	.word	0x08001a33
 80018f8:	08001a41 	.word	0x08001a41
 80018fc:	08001a4f 	.word	0x08001a4f
 8001900:	08001a5d 	.word	0x08001a5d
 8001904:	08001a6b 	.word	0x08001a6b
 8001908:	08001a79 	.word	0x08001a79
 800190c:	08001a87 	.word	0x08001a87
 8001910:	08001a95 	.word	0x08001a95
 8001914:	08001aa3 	.word	0x08001aa3
 8001918:	08001ab1 	.word	0x08001ab1
 800191c:	08001abf 	.word	0x08001abf
 8001920:	08001acd 	.word	0x08001acd
 8001924:	08001adb 	.word	0x08001adb
	case DESIOT_VS0:
		DESIOT_EXEC_SYNC(DESIOT_VS0, payload, len);
 8001928:	463b      	mov	r3, r7
 800192a:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800192e:	4618      	mov	r0, r3
 8001930:	f000 f8e4 	bl	8001afc <DESIoT_execSyncDESIOT_VS0>
		break;
 8001934:	e0d8      	b.n	8001ae8 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS1:
		DESIOT_EXEC_SYNC(DESIOT_VS1, payload, len);
 8001936:	463b      	mov	r3, r7
 8001938:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800193c:	4618      	mov	r0, r3
 800193e:	f000 f8e7 	bl	8001b10 <DESIoT_execSyncDESIOT_VS1>
		break;
 8001942:	e0d1      	b.n	8001ae8 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS2:
		DESIOT_EXEC_SYNC(DESIOT_VS2, payload, len);
 8001944:	463b      	mov	r3, r7
 8001946:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800194a:	4618      	mov	r0, r3
 800194c:	f000 f8ea 	bl	8001b24 <DESIoT_execSyncDESIOT_VS2>
		break;
 8001950:	e0ca      	b.n	8001ae8 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS3:
		DESIOT_EXEC_SYNC(DESIOT_VS3, payload, len);
 8001952:	463b      	mov	r3, r7
 8001954:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001958:	4618      	mov	r0, r3
 800195a:	f000 fdab 	bl	80024b4 <DESIoT_execSyncDESIOT_VS3>
		break;
 800195e:	e0c3      	b.n	8001ae8 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS4:
		DESIOT_EXEC_SYNC(DESIOT_VS4, payload, len);
 8001960:	463b      	mov	r3, r7
 8001962:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001966:	4618      	mov	r0, r3
 8001968:	f000 fdc4 	bl	80024f4 <DESIoT_execSyncDESIOT_VS4>
		break;
 800196c:	e0bc      	b.n	8001ae8 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS5:
		DESIOT_EXEC_SYNC(DESIOT_VS5, payload, len);
 800196e:	463b      	mov	r3, r7
 8001970:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001974:	4618      	mov	r0, r3
 8001976:	f000 f8df 	bl	8001b38 <DESIoT_execSyncDESIOT_VS5>
		break;
 800197a:	e0b5      	b.n	8001ae8 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS6:
		DESIOT_EXEC_SYNC(DESIOT_VS6, payload, len);
 800197c:	463b      	mov	r3, r7
 800197e:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001982:	4618      	mov	r0, r3
 8001984:	f000 f8e2 	bl	8001b4c <DESIoT_execSyncDESIOT_VS6>
		break;
 8001988:	e0ae      	b.n	8001ae8 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS7:
		DESIOT_EXEC_SYNC(DESIOT_VS7, payload, len);
 800198a:	463b      	mov	r3, r7
 800198c:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001990:	4618      	mov	r0, r3
 8001992:	f000 f8e5 	bl	8001b60 <DESIoT_execSyncDESIOT_VS7>
		break;
 8001996:	e0a7      	b.n	8001ae8 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS8:
		DESIOT_EXEC_SYNC(DESIOT_VS8, payload, len);
 8001998:	463b      	mov	r3, r7
 800199a:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 800199e:	4618      	mov	r0, r3
 80019a0:	f000 f8e8 	bl	8001b74 <DESIoT_execSyncDESIOT_VS8>
		break;
 80019a4:	e0a0      	b.n	8001ae8 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS9:
		DESIOT_EXEC_SYNC(DESIOT_VS9, payload, len);
 80019a6:	463b      	mov	r3, r7
 80019a8:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 80019ac:	4618      	mov	r0, r3
 80019ae:	f000 f8eb 	bl	8001b88 <DESIoT_execSyncDESIOT_VS9>
		break;
 80019b2:	e099      	b.n	8001ae8 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS10:
		DESIOT_EXEC_SYNC(DESIOT_VS10, payload, len);
 80019b4:	463b      	mov	r3, r7
 80019b6:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 80019ba:	4618      	mov	r0, r3
 80019bc:	f000 f8ee 	bl	8001b9c <DESIoT_execSyncDESIOT_VS10>
		break;
 80019c0:	e092      	b.n	8001ae8 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS11:
		DESIOT_EXEC_SYNC(DESIOT_VS11, payload, len);
 80019c2:	463b      	mov	r3, r7
 80019c4:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 80019c8:	4618      	mov	r0, r3
 80019ca:	f000 f8f1 	bl	8001bb0 <DESIoT_execSyncDESIOT_VS11>
		break;
 80019ce:	e08b      	b.n	8001ae8 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS12:
		DESIOT_EXEC_SYNC(DESIOT_VS12, payload, len);
 80019d0:	463b      	mov	r3, r7
 80019d2:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 80019d6:	4618      	mov	r0, r3
 80019d8:	f000 f8f4 	bl	8001bc4 <DESIoT_execSyncDESIOT_VS12>
		break;
 80019dc:	e084      	b.n	8001ae8 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS13:
		DESIOT_EXEC_SYNC(DESIOT_VS13, payload, len);
 80019de:	463b      	mov	r3, r7
 80019e0:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 80019e4:	4618      	mov	r0, r3
 80019e6:	f000 f8f7 	bl	8001bd8 <DESIoT_execSyncDESIOT_VS13>
		break;
 80019ea:	e07d      	b.n	8001ae8 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS14:
		DESIOT_EXEC_SYNC(DESIOT_VS14, payload, len);
 80019ec:	463b      	mov	r3, r7
 80019ee:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 80019f2:	4618      	mov	r0, r3
 80019f4:	f000 f8fa 	bl	8001bec <DESIoT_execSyncDESIOT_VS14>
		break;
 80019f8:	e076      	b.n	8001ae8 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS15:
		DESIOT_EXEC_SYNC(DESIOT_VS15, payload, len);
 80019fa:	463b      	mov	r3, r7
 80019fc:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001a00:	4618      	mov	r0, r3
 8001a02:	f000 f8fd 	bl	8001c00 <DESIoT_execSyncDESIOT_VS15>
		break;
 8001a06:	e06f      	b.n	8001ae8 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS16:
		DESIOT_EXEC_SYNC(DESIOT_VS16, payload, len);
 8001a08:	463b      	mov	r3, r7
 8001a0a:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001a0e:	4618      	mov	r0, r3
 8001a10:	f000 f900 	bl	8001c14 <DESIoT_execSyncDESIOT_VS16>
		break;
 8001a14:	e068      	b.n	8001ae8 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS17:
		DESIOT_EXEC_SYNC(DESIOT_VS17, payload, len);
 8001a16:	463b      	mov	r3, r7
 8001a18:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f000 f903 	bl	8001c28 <DESIoT_execSyncDESIOT_VS17>
		break;
 8001a22:	e061      	b.n	8001ae8 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS18:
		DESIOT_EXEC_SYNC(DESIOT_VS18, payload, len);
 8001a24:	463b      	mov	r3, r7
 8001a26:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	f000 f906 	bl	8001c3c <DESIoT_execSyncDESIOT_VS18>
		break;
 8001a30:	e05a      	b.n	8001ae8 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS19:
		DESIOT_EXEC_SYNC(DESIOT_VS19, payload, len);
 8001a32:	463b      	mov	r3, r7
 8001a34:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f000 f909 	bl	8001c50 <DESIoT_execSyncDESIOT_VS19>
		break;
 8001a3e:	e053      	b.n	8001ae8 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS20:
		DESIOT_EXEC_SYNC(DESIOT_VS20, payload, len);
 8001a40:	463b      	mov	r3, r7
 8001a42:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001a46:	4618      	mov	r0, r3
 8001a48:	f000 f90c 	bl	8001c64 <DESIoT_execSyncDESIOT_VS20>
		break;
 8001a4c:	e04c      	b.n	8001ae8 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS21:
		DESIOT_EXEC_SYNC(DESIOT_VS21, payload, len);
 8001a4e:	463b      	mov	r3, r7
 8001a50:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001a54:	4618      	mov	r0, r3
 8001a56:	f000 f90f 	bl	8001c78 <DESIoT_execSyncDESIOT_VS21>
		break;
 8001a5a:	e045      	b.n	8001ae8 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS22:
		DESIOT_EXEC_SYNC(DESIOT_VS22, payload, len);
 8001a5c:	463b      	mov	r3, r7
 8001a5e:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 f912 	bl	8001c8c <DESIoT_execSyncDESIOT_VS22>
		break;
 8001a68:	e03e      	b.n	8001ae8 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS23:
		DESIOT_EXEC_SYNC(DESIOT_VS23, payload, len);
 8001a6a:	463b      	mov	r3, r7
 8001a6c:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001a70:	4618      	mov	r0, r3
 8001a72:	f000 f915 	bl	8001ca0 <DESIoT_execSyncDESIOT_VS23>
		break;
 8001a76:	e037      	b.n	8001ae8 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS24:
		DESIOT_EXEC_SYNC(DESIOT_VS24, payload, len);
 8001a78:	463b      	mov	r3, r7
 8001a7a:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001a7e:	4618      	mov	r0, r3
 8001a80:	f000 f918 	bl	8001cb4 <DESIoT_execSyncDESIOT_VS24>
		break;
 8001a84:	e030      	b.n	8001ae8 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS25:
		DESIOT_EXEC_SYNC(DESIOT_VS25, payload, len);
 8001a86:	463b      	mov	r3, r7
 8001a88:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	f000 f91b 	bl	8001cc8 <DESIoT_execSyncDESIOT_VS25>
		break;
 8001a92:	e029      	b.n	8001ae8 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS26:
		DESIOT_EXEC_SYNC(DESIOT_VS26, payload, len);
 8001a94:	463b      	mov	r3, r7
 8001a96:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f000 f91e 	bl	8001cdc <DESIoT_execSyncDESIOT_VS26>
		break;
 8001aa0:	e022      	b.n	8001ae8 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS27:
		DESIOT_EXEC_SYNC(DESIOT_VS27, payload, len);
 8001aa2:	463b      	mov	r3, r7
 8001aa4:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f000 f921 	bl	8001cf0 <DESIoT_execSyncDESIOT_VS27>
		break;
 8001aae:	e01b      	b.n	8001ae8 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS28:
		DESIOT_EXEC_SYNC(DESIOT_VS28, payload, len);
 8001ab0:	463b      	mov	r3, r7
 8001ab2:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f000 f924 	bl	8001d04 <DESIoT_execSyncDESIOT_VS28>
		break;
 8001abc:	e014      	b.n	8001ae8 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS29:
		DESIOT_EXEC_SYNC(DESIOT_VS29, payload, len);
 8001abe:	463b      	mov	r3, r7
 8001ac0:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001ac4:	4618      	mov	r0, r3
 8001ac6:	f000 f927 	bl	8001d18 <DESIoT_execSyncDESIOT_VS29>
		break;
 8001aca:	e00d      	b.n	8001ae8 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS30:
		DESIOT_EXEC_SYNC(DESIOT_VS30, payload, len);
 8001acc:	463b      	mov	r3, r7
 8001ace:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	f000 f92a 	bl	8001d2c <DESIoT_execSyncDESIOT_VS30>
		break;
 8001ad8:	e006      	b.n	8001ae8 <DESIoT_execVSyncWF+0x288>
	case DESIOT_VS31:
		DESIOT_EXEC_SYNC(DESIOT_VS31, payload, len);
 8001ada:	463b      	mov	r3, r7
 8001adc:	f8d7 1100 	ldr.w	r1, [r7, #256]	; 0x100
 8001ae0:	4618      	mov	r0, r3
 8001ae2:	f000 f92d 	bl	8001d40 <DESIoT_execSyncDESIOT_VS31>
		break;
 8001ae6:	bf00      	nop
	}

}
 8001ae8:	bf00      	nop
 8001aea:	f507 7784 	add.w	r7, r7, #264	; 0x108
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	20000290 	.word	0x20000290
 8001af8:	200002ce 	.word	0x200002ce

08001afc <DESIoT_execSyncDESIOT_VS0>:

DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS0) {}
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
 8001b04:	6039      	str	r1, [r7, #0]
 8001b06:	bf00      	nop
 8001b08:	370c      	adds	r7, #12
 8001b0a:	46bd      	mov	sp, r7
 8001b0c:	bc80      	pop	{r7}
 8001b0e:	4770      	bx	lr

08001b10 <DESIoT_execSyncDESIOT_VS1>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS1) {}
 8001b10:	b480      	push	{r7}
 8001b12:	b083      	sub	sp, #12
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
 8001b1a:	bf00      	nop
 8001b1c:	370c      	adds	r7, #12
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bc80      	pop	{r7}
 8001b22:	4770      	bx	lr

08001b24 <DESIoT_execSyncDESIOT_VS2>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS2) {}
 8001b24:	b480      	push	{r7}
 8001b26:	b083      	sub	sp, #12
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	6078      	str	r0, [r7, #4]
 8001b2c:	6039      	str	r1, [r7, #0]
 8001b2e:	bf00      	nop
 8001b30:	370c      	adds	r7, #12
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bc80      	pop	{r7}
 8001b36:	4770      	bx	lr

08001b38 <DESIoT_execSyncDESIOT_VS5>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS3) {}
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS4) {}
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS5) {}
 8001b38:	b480      	push	{r7}
 8001b3a:	b083      	sub	sp, #12
 8001b3c:	af00      	add	r7, sp, #0
 8001b3e:	6078      	str	r0, [r7, #4]
 8001b40:	6039      	str	r1, [r7, #0]
 8001b42:	bf00      	nop
 8001b44:	370c      	adds	r7, #12
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bc80      	pop	{r7}
 8001b4a:	4770      	bx	lr

08001b4c <DESIoT_execSyncDESIOT_VS6>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS6) {}
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bc80      	pop	{r7}
 8001b5e:	4770      	bx	lr

08001b60 <DESIoT_execSyncDESIOT_VS7>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS7) {}
 8001b60:	b480      	push	{r7}
 8001b62:	b083      	sub	sp, #12
 8001b64:	af00      	add	r7, sp, #0
 8001b66:	6078      	str	r0, [r7, #4]
 8001b68:	6039      	str	r1, [r7, #0]
 8001b6a:	bf00      	nop
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bc80      	pop	{r7}
 8001b72:	4770      	bx	lr

08001b74 <DESIoT_execSyncDESIOT_VS8>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS8) {}
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	6078      	str	r0, [r7, #4]
 8001b7c:	6039      	str	r1, [r7, #0]
 8001b7e:	bf00      	nop
 8001b80:	370c      	adds	r7, #12
 8001b82:	46bd      	mov	sp, r7
 8001b84:	bc80      	pop	{r7}
 8001b86:	4770      	bx	lr

08001b88 <DESIoT_execSyncDESIOT_VS9>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS9) {}
 8001b88:	b480      	push	{r7}
 8001b8a:	b083      	sub	sp, #12
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	6078      	str	r0, [r7, #4]
 8001b90:	6039      	str	r1, [r7, #0]
 8001b92:	bf00      	nop
 8001b94:	370c      	adds	r7, #12
 8001b96:	46bd      	mov	sp, r7
 8001b98:	bc80      	pop	{r7}
 8001b9a:	4770      	bx	lr

08001b9c <DESIoT_execSyncDESIOT_VS10>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS10) {}
 8001b9c:	b480      	push	{r7}
 8001b9e:	b083      	sub	sp, #12
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	6078      	str	r0, [r7, #4]
 8001ba4:	6039      	str	r1, [r7, #0]
 8001ba6:	bf00      	nop
 8001ba8:	370c      	adds	r7, #12
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bc80      	pop	{r7}
 8001bae:	4770      	bx	lr

08001bb0 <DESIoT_execSyncDESIOT_VS11>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS11) {}
 8001bb0:	b480      	push	{r7}
 8001bb2:	b083      	sub	sp, #12
 8001bb4:	af00      	add	r7, sp, #0
 8001bb6:	6078      	str	r0, [r7, #4]
 8001bb8:	6039      	str	r1, [r7, #0]
 8001bba:	bf00      	nop
 8001bbc:	370c      	adds	r7, #12
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr

08001bc4 <DESIoT_execSyncDESIOT_VS12>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS12) {}
 8001bc4:	b480      	push	{r7}
 8001bc6:	b083      	sub	sp, #12
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	6078      	str	r0, [r7, #4]
 8001bcc:	6039      	str	r1, [r7, #0]
 8001bce:	bf00      	nop
 8001bd0:	370c      	adds	r7, #12
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bc80      	pop	{r7}
 8001bd6:	4770      	bx	lr

08001bd8 <DESIoT_execSyncDESIOT_VS13>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS13) {}
 8001bd8:	b480      	push	{r7}
 8001bda:	b083      	sub	sp, #12
 8001bdc:	af00      	add	r7, sp, #0
 8001bde:	6078      	str	r0, [r7, #4]
 8001be0:	6039      	str	r1, [r7, #0]
 8001be2:	bf00      	nop
 8001be4:	370c      	adds	r7, #12
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr

08001bec <DESIoT_execSyncDESIOT_VS14>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS14) {}
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
 8001bf6:	bf00      	nop
 8001bf8:	370c      	adds	r7, #12
 8001bfa:	46bd      	mov	sp, r7
 8001bfc:	bc80      	pop	{r7}
 8001bfe:	4770      	bx	lr

08001c00 <DESIoT_execSyncDESIOT_VS15>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS15) {}
 8001c00:	b480      	push	{r7}
 8001c02:	b083      	sub	sp, #12
 8001c04:	af00      	add	r7, sp, #0
 8001c06:	6078      	str	r0, [r7, #4]
 8001c08:	6039      	str	r1, [r7, #0]
 8001c0a:	bf00      	nop
 8001c0c:	370c      	adds	r7, #12
 8001c0e:	46bd      	mov	sp, r7
 8001c10:	bc80      	pop	{r7}
 8001c12:	4770      	bx	lr

08001c14 <DESIoT_execSyncDESIOT_VS16>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS16) {}
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
 8001c1c:	6039      	str	r1, [r7, #0]
 8001c1e:	bf00      	nop
 8001c20:	370c      	adds	r7, #12
 8001c22:	46bd      	mov	sp, r7
 8001c24:	bc80      	pop	{r7}
 8001c26:	4770      	bx	lr

08001c28 <DESIoT_execSyncDESIOT_VS17>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS17) {}
 8001c28:	b480      	push	{r7}
 8001c2a:	b083      	sub	sp, #12
 8001c2c:	af00      	add	r7, sp, #0
 8001c2e:	6078      	str	r0, [r7, #4]
 8001c30:	6039      	str	r1, [r7, #0]
 8001c32:	bf00      	nop
 8001c34:	370c      	adds	r7, #12
 8001c36:	46bd      	mov	sp, r7
 8001c38:	bc80      	pop	{r7}
 8001c3a:	4770      	bx	lr

08001c3c <DESIoT_execSyncDESIOT_VS18>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS18) {}
 8001c3c:	b480      	push	{r7}
 8001c3e:	b083      	sub	sp, #12
 8001c40:	af00      	add	r7, sp, #0
 8001c42:	6078      	str	r0, [r7, #4]
 8001c44:	6039      	str	r1, [r7, #0]
 8001c46:	bf00      	nop
 8001c48:	370c      	adds	r7, #12
 8001c4a:	46bd      	mov	sp, r7
 8001c4c:	bc80      	pop	{r7}
 8001c4e:	4770      	bx	lr

08001c50 <DESIoT_execSyncDESIOT_VS19>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS19) {}
 8001c50:	b480      	push	{r7}
 8001c52:	b083      	sub	sp, #12
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	6078      	str	r0, [r7, #4]
 8001c58:	6039      	str	r1, [r7, #0]
 8001c5a:	bf00      	nop
 8001c5c:	370c      	adds	r7, #12
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bc80      	pop	{r7}
 8001c62:	4770      	bx	lr

08001c64 <DESIoT_execSyncDESIOT_VS20>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS20) {}
 8001c64:	b480      	push	{r7}
 8001c66:	b083      	sub	sp, #12
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
 8001c6c:	6039      	str	r1, [r7, #0]
 8001c6e:	bf00      	nop
 8001c70:	370c      	adds	r7, #12
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bc80      	pop	{r7}
 8001c76:	4770      	bx	lr

08001c78 <DESIoT_execSyncDESIOT_VS21>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS21) {}
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	6078      	str	r0, [r7, #4]
 8001c80:	6039      	str	r1, [r7, #0]
 8001c82:	bf00      	nop
 8001c84:	370c      	adds	r7, #12
 8001c86:	46bd      	mov	sp, r7
 8001c88:	bc80      	pop	{r7}
 8001c8a:	4770      	bx	lr

08001c8c <DESIoT_execSyncDESIOT_VS22>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS22) {}
 8001c8c:	b480      	push	{r7}
 8001c8e:	b083      	sub	sp, #12
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	6039      	str	r1, [r7, #0]
 8001c96:	bf00      	nop
 8001c98:	370c      	adds	r7, #12
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bc80      	pop	{r7}
 8001c9e:	4770      	bx	lr

08001ca0 <DESIoT_execSyncDESIOT_VS23>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS23) {}
 8001ca0:	b480      	push	{r7}
 8001ca2:	b083      	sub	sp, #12
 8001ca4:	af00      	add	r7, sp, #0
 8001ca6:	6078      	str	r0, [r7, #4]
 8001ca8:	6039      	str	r1, [r7, #0]
 8001caa:	bf00      	nop
 8001cac:	370c      	adds	r7, #12
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bc80      	pop	{r7}
 8001cb2:	4770      	bx	lr

08001cb4 <DESIoT_execSyncDESIOT_VS24>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS24) {}
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
 8001cbe:	bf00      	nop
 8001cc0:	370c      	adds	r7, #12
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	bc80      	pop	{r7}
 8001cc6:	4770      	bx	lr

08001cc8 <DESIoT_execSyncDESIOT_VS25>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS25) {}
 8001cc8:	b480      	push	{r7}
 8001cca:	b083      	sub	sp, #12
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
 8001cd2:	bf00      	nop
 8001cd4:	370c      	adds	r7, #12
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bc80      	pop	{r7}
 8001cda:	4770      	bx	lr

08001cdc <DESIoT_execSyncDESIOT_VS26>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS26) {}
 8001cdc:	b480      	push	{r7}
 8001cde:	b083      	sub	sp, #12
 8001ce0:	af00      	add	r7, sp, #0
 8001ce2:	6078      	str	r0, [r7, #4]
 8001ce4:	6039      	str	r1, [r7, #0]
 8001ce6:	bf00      	nop
 8001ce8:	370c      	adds	r7, #12
 8001cea:	46bd      	mov	sp, r7
 8001cec:	bc80      	pop	{r7}
 8001cee:	4770      	bx	lr

08001cf0 <DESIoT_execSyncDESIOT_VS27>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS27) {}
 8001cf0:	b480      	push	{r7}
 8001cf2:	b083      	sub	sp, #12
 8001cf4:	af00      	add	r7, sp, #0
 8001cf6:	6078      	str	r0, [r7, #4]
 8001cf8:	6039      	str	r1, [r7, #0]
 8001cfa:	bf00      	nop
 8001cfc:	370c      	adds	r7, #12
 8001cfe:	46bd      	mov	sp, r7
 8001d00:	bc80      	pop	{r7}
 8001d02:	4770      	bx	lr

08001d04 <DESIoT_execSyncDESIOT_VS28>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS28) {}
 8001d04:	b480      	push	{r7}
 8001d06:	b083      	sub	sp, #12
 8001d08:	af00      	add	r7, sp, #0
 8001d0a:	6078      	str	r0, [r7, #4]
 8001d0c:	6039      	str	r1, [r7, #0]
 8001d0e:	bf00      	nop
 8001d10:	370c      	adds	r7, #12
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bc80      	pop	{r7}
 8001d16:	4770      	bx	lr

08001d18 <DESIoT_execSyncDESIOT_VS29>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS29) {}
 8001d18:	b480      	push	{r7}
 8001d1a:	b083      	sub	sp, #12
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
 8001d20:	6039      	str	r1, [r7, #0]
 8001d22:	bf00      	nop
 8001d24:	370c      	adds	r7, #12
 8001d26:	46bd      	mov	sp, r7
 8001d28:	bc80      	pop	{r7}
 8001d2a:	4770      	bx	lr

08001d2c <DESIoT_execSyncDESIOT_VS30>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS30) {}
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
 8001d36:	bf00      	nop
 8001d38:	370c      	adds	r7, #12
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	bc80      	pop	{r7}
 8001d3e:	4770      	bx	lr

08001d40 <DESIoT_execSyncDESIOT_VS31>:
DESIOT_ATT_WEAK DESIOT_DEF_EXEC_SYNC(DESIOT_VS31) {}
 8001d40:	b480      	push	{r7}
 8001d42:	b083      	sub	sp, #12
 8001d44:	af00      	add	r7, sp, #0
 8001d46:	6078      	str	r0, [r7, #4]
 8001d48:	6039      	str	r1, [r7, #0]
 8001d4a:	bf00      	nop
 8001d4c:	370c      	adds	r7, #12
 8001d4e:	46bd      	mov	sp, r7
 8001d50:	bc80      	pop	{r7}
 8001d52:	4770      	bx	lr

08001d54 <DESIoT_begin>:
void DESIoT_execSuccessfulFrame();
void DESIoT_execVSyncWF();
uint32_t DESIoT_millis();

// static funcs
static void DESIoT_begin() {
 8001d54:	b5b0      	push	{r4, r5, r7, lr}
 8001d56:	af00      	add	r7, sp, #0
	while(DESIoT_millis() < DESIOT_STARTUP_TIME);
 8001d58:	bf00      	nop
 8001d5a:	f000 fba3 	bl	80024a4 <DESIoT_millis>
 8001d5e:	4603      	mov	r3, r0
 8001d60:	f640 32b7 	movw	r2, #2999	; 0xbb7
 8001d64:	4293      	cmp	r3, r2
 8001d66:	d9f8      	bls.n	8001d5a <DESIoT_begin+0x6>
#if defined(DESIOT_DEVICE_ID) && defined(DESIOT_CONFIG_ID)
	strcpy(hFrame.device_id, DESIOT_DEVICE_ID);
 8001d68:	4a0d      	ldr	r2, [pc, #52]	; (8001da0 <DESIoT_begin+0x4c>)
 8001d6a:	4b0e      	ldr	r3, [pc, #56]	; (8001da4 <DESIoT_begin+0x50>)
 8001d6c:	4614      	mov	r4, r2
 8001d6e:	461d      	mov	r5, r3
 8001d70:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001d72:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001d74:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8001d78:	c403      	stmia	r4!, {r0, r1}
 8001d7a:	7022      	strb	r2, [r4, #0]
	strcpy(hFrame.config_id, DESIOT_CONFIG_ID);
 8001d7c:	4b08      	ldr	r3, [pc, #32]	; (8001da0 <DESIoT_begin+0x4c>)
 8001d7e:	4a0a      	ldr	r2, [pc, #40]	; (8001da8 <DESIoT_begin+0x54>)
 8001d80:	f103 0519 	add.w	r5, r3, #25
 8001d84:	4614      	mov	r4, r2
 8001d86:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001d88:	6028      	str	r0, [r5, #0]
 8001d8a:	6069      	str	r1, [r5, #4]
 8001d8c:	60aa      	str	r2, [r5, #8]
 8001d8e:	60eb      	str	r3, [r5, #12]
 8001d90:	cc03      	ldmia	r4!, {r0, r1}
 8001d92:	6128      	str	r0, [r5, #16]
 8001d94:	6169      	str	r1, [r5, #20]
 8001d96:	7823      	ldrb	r3, [r4, #0]
 8001d98:	762b      	strb	r3, [r5, #24]
#endif
}
 8001d9a:	bf00      	nop
 8001d9c:	bdb0      	pop	{r4, r5, r7, pc}
 8001d9e:	bf00      	nop
 8001da0:	20000290 	.word	0x20000290
 8001da4:	08007384 	.word	0x08007384
 8001da8:	080073a0 	.word	0x080073a0
 8001dac:	00000000 	.word	0x00000000

08001db0 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001db0:	b590      	push	{r4, r7, lr}
 8001db2:	b085      	sub	sp, #20
 8001db4:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001db6:	f001 f803 	bl	8002dc0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001dba:	f000 f98f 	bl	80020dc <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001dbe:	f000 fae7 	bl	8002390 <MX_GPIO_Init>
	MX_DMA_Init();
 8001dc2:	f000 fac7 	bl	8002354 <MX_DMA_Init>
	MX_ADC1_Init();
 8001dc6:	f000 f9e5 	bl	8002194 <MX_ADC1_Init>
	MX_TIM2_Init();
 8001dca:	f000 fa4d 	bl	8002268 <MX_TIM2_Init>
	MX_USART1_UART_Init();
 8001dce:	f000 fa97 	bl	8002300 <MX_USART1_UART_Init>
	/* USER CODE BEGIN 2 */
	// vol and curr
	HAL_ADC_Start_DMA(&hadc1,(uint32_t*) Gb_suiAdcValue, 4);
 8001dd2:	2204      	movs	r2, #4
 8001dd4:	49b2      	ldr	r1, [pc, #712]	; (80020a0 <main+0x2f0>)
 8001dd6:	48b3      	ldr	r0, [pc, #716]	; (80020a4 <main+0x2f4>)
 8001dd8:	f001 fa16 	bl	8003208 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_IT(&hadc1);
 8001ddc:	48b1      	ldr	r0, [pc, #708]	; (80020a4 <main+0x2f4>)
 8001dde:	f001 f929 	bl	8003034 <HAL_ADC_Start_IT>

	HAL_UART_Receive_IT(&huart1, &ITReceive, 1);
 8001de2:	2201      	movs	r2, #1
 8001de4:	49b0      	ldr	r1, [pc, #704]	; (80020a8 <main+0x2f8>)
 8001de6:	48b1      	ldr	r0, [pc, #708]	; (80020ac <main+0x2fc>)
 8001de8:	f003 fbc9 	bl	800557e <HAL_UART_Receive_IT>

	HAL_TIM_Base_Start(&htim2);
 8001dec:	48b0      	ldr	r0, [pc, #704]	; (80020b0 <main+0x300>)
 8001dee:	f003 f88b 	bl	8004f08 <HAL_TIM_Base_Start>

	DESIoT_begin();
 8001df2:	f7ff ffaf 	bl	8001d54 <DESIoT_begin>

	DESIoT_readVS(DESIOT_VS3);
 8001df6:	2003      	movs	r0, #3
 8001df8:	f7ff f9be 	bl	8001178 <DESIoT_readVS>
	DESIoT_readVS(DESIOT_VS4);
 8001dfc:	2004      	movs	r0, #4
 8001dfe:	f7ff f9bb 	bl	8001178 <DESIoT_readVS>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		DESIoT_loop();
 8001e02:	f7ff f8bf 	bl	8000f84 <DESIoT_loop>

		if(Gb_suiCountReadAdc>=40000){
 8001e06:	4bab      	ldr	r3, [pc, #684]	; (80020b4 <main+0x304>)
 8001e08:	881b      	ldrh	r3, [r3, #0]
 8001e0a:	f649 423f 	movw	r2, #39999	; 0x9c3f
 8001e0e:	4293      	cmp	r3, r2
 8001e10:	f240 80fb 	bls.w	800200a <main+0x25a>
			Gb_suiCountReadAdc = 0;
 8001e14:	4ba7      	ldr	r3, [pc, #668]	; (80020b4 <main+0x304>)
 8001e16:	2200      	movs	r2, #0
 8001e18:	801a      	strh	r2, [r3, #0]
			lfAveAdc[0] = Gb_uiAdcSum[0]/40000.0;
 8001e1a:	4ba7      	ldr	r3, [pc, #668]	; (80020b8 <main+0x308>)
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	4618      	mov	r0, r3
 8001e20:	f7fe fad8 	bl	80003d4 <__aeabi_ui2d>
 8001e24:	a394      	add	r3, pc, #592	; (adr r3, 8002078 <main+0x2c8>)
 8001e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e2a:	f7fe fc77 	bl	800071c <__aeabi_ddiv>
 8001e2e:	4602      	mov	r2, r0
 8001e30:	460b      	mov	r3, r1
 8001e32:	4610      	mov	r0, r2
 8001e34:	4619      	mov	r1, r3
 8001e36:	f7fe fdf7 	bl	8000a28 <__aeabi_d2f>
 8001e3a:	4603      	mov	r3, r0
 8001e3c:	4a9f      	ldr	r2, [pc, #636]	; (80020bc <main+0x30c>)
 8001e3e:	6013      	str	r3, [r2, #0]
			Gb_fVolValue[0] = (sqrt(lfAveAdc[0]))*1.41;
 8001e40:	4b9e      	ldr	r3, [pc, #632]	; (80020bc <main+0x30c>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4618      	mov	r0, r3
 8001e46:	f7fe fae7 	bl	8000418 <__aeabi_f2d>
 8001e4a:	4602      	mov	r2, r0
 8001e4c:	460b      	mov	r3, r1
 8001e4e:	4610      	mov	r0, r2
 8001e50:	4619      	mov	r1, r3
 8001e52:	f005 f9b7 	bl	80071c4 <sqrt>
 8001e56:	a38a      	add	r3, pc, #552	; (adr r3, 8002080 <main+0x2d0>)
 8001e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e5c:	f7fe fb34 	bl	80004c8 <__aeabi_dmul>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4610      	mov	r0, r2
 8001e66:	4619      	mov	r1, r3
 8001e68:	f7fe fdde 	bl	8000a28 <__aeabi_d2f>
 8001e6c:	4603      	mov	r3, r0
 8001e6e:	4a94      	ldr	r2, [pc, #592]	; (80020c0 <main+0x310>)
 8001e70:	6013      	str	r3, [r2, #0]

			lfAveAdc[1] = Gb_uiAdcSum[1]/40000.0;
 8001e72:	4b91      	ldr	r3, [pc, #580]	; (80020b8 <main+0x308>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7fe faac 	bl	80003d4 <__aeabi_ui2d>
 8001e7c:	a37e      	add	r3, pc, #504	; (adr r3, 8002078 <main+0x2c8>)
 8001e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e82:	f7fe fc4b 	bl	800071c <__aeabi_ddiv>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	4610      	mov	r0, r2
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	f7fe fdcb 	bl	8000a28 <__aeabi_d2f>
 8001e92:	4603      	mov	r3, r0
 8001e94:	4a89      	ldr	r2, [pc, #548]	; (80020bc <main+0x30c>)
 8001e96:	6053      	str	r3, [r2, #4]
			Gb_fVolValue[1] = (sqrt(lfAveAdc[1]))*1.41;
 8001e98:	4b88      	ldr	r3, [pc, #544]	; (80020bc <main+0x30c>)
 8001e9a:	685b      	ldr	r3, [r3, #4]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7fe fabb 	bl	8000418 <__aeabi_f2d>
 8001ea2:	4602      	mov	r2, r0
 8001ea4:	460b      	mov	r3, r1
 8001ea6:	4610      	mov	r0, r2
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	f005 f98b 	bl	80071c4 <sqrt>
 8001eae:	a374      	add	r3, pc, #464	; (adr r3, 8002080 <main+0x2d0>)
 8001eb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eb4:	f7fe fb08 	bl	80004c8 <__aeabi_dmul>
 8001eb8:	4602      	mov	r2, r0
 8001eba:	460b      	mov	r3, r1
 8001ebc:	4610      	mov	r0, r2
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	f7fe fdb2 	bl	8000a28 <__aeabi_d2f>
 8001ec4:	4603      	mov	r3, r0
 8001ec6:	4a7e      	ldr	r2, [pc, #504]	; (80020c0 <main+0x310>)
 8001ec8:	6053      	str	r3, [r2, #4]

			float lfVol;
			float VRMS ;
			lfVol = ((float) (Gb_suiAdcMaxValue[0] - Gb_suiAdcMinValue[0]) * 3.3)/ 4095.0;
 8001eca:	4b7e      	ldr	r3, [pc, #504]	; (80020c4 <main+0x314>)
 8001ecc:	881b      	ldrh	r3, [r3, #0]
 8001ece:	461a      	mov	r2, r3
 8001ed0:	4b7d      	ldr	r3, [pc, #500]	; (80020c8 <main+0x318>)
 8001ed2:	881b      	ldrh	r3, [r3, #0]
 8001ed4:	1ad3      	subs	r3, r2, r3
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7fe feb0 	bl	8000c3c <__aeabi_i2f>
 8001edc:	4603      	mov	r3, r0
 8001ede:	4618      	mov	r0, r3
 8001ee0:	f7fe fa9a 	bl	8000418 <__aeabi_f2d>
 8001ee4:	a368      	add	r3, pc, #416	; (adr r3, 8002088 <main+0x2d8>)
 8001ee6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eea:	f7fe faed 	bl	80004c8 <__aeabi_dmul>
 8001eee:	4602      	mov	r2, r0
 8001ef0:	460b      	mov	r3, r1
 8001ef2:	4610      	mov	r0, r2
 8001ef4:	4619      	mov	r1, r3
 8001ef6:	a366      	add	r3, pc, #408	; (adr r3, 8002090 <main+0x2e0>)
 8001ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001efc:	f7fe fc0e 	bl	800071c <__aeabi_ddiv>
 8001f00:	4602      	mov	r2, r0
 8001f02:	460b      	mov	r3, r1
 8001f04:	4610      	mov	r0, r2
 8001f06:	4619      	mov	r1, r3
 8001f08:	f7fe fd8e 	bl	8000a28 <__aeabi_d2f>
 8001f0c:	4603      	mov	r3, r0
 8001f0e:	60fb      	str	r3, [r7, #12]
			VRMS = (lfVol) *0.707;   //root 2 is 0.707
 8001f10:	68f8      	ldr	r0, [r7, #12]
 8001f12:	f7fe fa81 	bl	8000418 <__aeabi_f2d>
 8001f16:	a360      	add	r3, pc, #384	; (adr r3, 8002098 <main+0x2e8>)
 8001f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f1c:	f7fe fad4 	bl	80004c8 <__aeabi_dmul>
 8001f20:	4602      	mov	r2, r0
 8001f22:	460b      	mov	r3, r1
 8001f24:	4610      	mov	r0, r2
 8001f26:	4619      	mov	r1, r3
 8001f28:	f7fe fd7e 	bl	8000a28 <__aeabi_d2f>
 8001f2c:	4603      	mov	r3, r0
 8001f2e:	60bb      	str	r3, [r7, #8]
			Gb_fAmpValue[0] = (VRMS * 1000)/Gb_culVperAmp;
 8001f30:	4966      	ldr	r1, [pc, #408]	; (80020cc <main+0x31c>)
 8001f32:	68b8      	ldr	r0, [r7, #8]
 8001f34:	f7fe fed6 	bl	8000ce4 <__aeabi_fmul>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	461c      	mov	r4, r3
 8001f3c:	2364      	movs	r3, #100	; 0x64
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe fe7c 	bl	8000c3c <__aeabi_i2f>
 8001f44:	4603      	mov	r3, r0
 8001f46:	4619      	mov	r1, r3
 8001f48:	4620      	mov	r0, r4
 8001f4a:	f7fe ff7f 	bl	8000e4c <__aeabi_fdiv>
 8001f4e:	4603      	mov	r3, r0
 8001f50:	461a      	mov	r2, r3
 8001f52:	4b5f      	ldr	r3, [pc, #380]	; (80020d0 <main+0x320>)
 8001f54:	601a      	str	r2, [r3, #0]

			lfVol = ((float) (Gb_suiAdcMaxValue[1] - Gb_suiAdcMinValue[1]) * 3.3)/ 4095.0;
 8001f56:	4b5b      	ldr	r3, [pc, #364]	; (80020c4 <main+0x314>)
 8001f58:	885b      	ldrh	r3, [r3, #2]
 8001f5a:	461a      	mov	r2, r3
 8001f5c:	4b5a      	ldr	r3, [pc, #360]	; (80020c8 <main+0x318>)
 8001f5e:	885b      	ldrh	r3, [r3, #2]
 8001f60:	1ad3      	subs	r3, r2, r3
 8001f62:	4618      	mov	r0, r3
 8001f64:	f7fe fe6a 	bl	8000c3c <__aeabi_i2f>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	4618      	mov	r0, r3
 8001f6c:	f7fe fa54 	bl	8000418 <__aeabi_f2d>
 8001f70:	a345      	add	r3, pc, #276	; (adr r3, 8002088 <main+0x2d8>)
 8001f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f76:	f7fe faa7 	bl	80004c8 <__aeabi_dmul>
 8001f7a:	4602      	mov	r2, r0
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	4610      	mov	r0, r2
 8001f80:	4619      	mov	r1, r3
 8001f82:	a343      	add	r3, pc, #268	; (adr r3, 8002090 <main+0x2e0>)
 8001f84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f88:	f7fe fbc8 	bl	800071c <__aeabi_ddiv>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	460b      	mov	r3, r1
 8001f90:	4610      	mov	r0, r2
 8001f92:	4619      	mov	r1, r3
 8001f94:	f7fe fd48 	bl	8000a28 <__aeabi_d2f>
 8001f98:	4603      	mov	r3, r0
 8001f9a:	60fb      	str	r3, [r7, #12]
			VRMS = (lfVol) *0.707;   //root 2 is 0.707
 8001f9c:	68f8      	ldr	r0, [r7, #12]
 8001f9e:	f7fe fa3b 	bl	8000418 <__aeabi_f2d>
 8001fa2:	a33d      	add	r3, pc, #244	; (adr r3, 8002098 <main+0x2e8>)
 8001fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001fa8:	f7fe fa8e 	bl	80004c8 <__aeabi_dmul>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	4610      	mov	r0, r2
 8001fb2:	4619      	mov	r1, r3
 8001fb4:	f7fe fd38 	bl	8000a28 <__aeabi_d2f>
 8001fb8:	4603      	mov	r3, r0
 8001fba:	60bb      	str	r3, [r7, #8]
			Gb_fAmpValue[1] = (VRMS * 1000)/Gb_culVperAmp;
 8001fbc:	4943      	ldr	r1, [pc, #268]	; (80020cc <main+0x31c>)
 8001fbe:	68b8      	ldr	r0, [r7, #8]
 8001fc0:	f7fe fe90 	bl	8000ce4 <__aeabi_fmul>
 8001fc4:	4603      	mov	r3, r0
 8001fc6:	461c      	mov	r4, r3
 8001fc8:	2364      	movs	r3, #100	; 0x64
 8001fca:	4618      	mov	r0, r3
 8001fcc:	f7fe fe36 	bl	8000c3c <__aeabi_i2f>
 8001fd0:	4603      	mov	r3, r0
 8001fd2:	4619      	mov	r1, r3
 8001fd4:	4620      	mov	r0, r4
 8001fd6:	f7fe ff39 	bl	8000e4c <__aeabi_fdiv>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4b3c      	ldr	r3, [pc, #240]	; (80020d0 <main+0x320>)
 8001fe0:	605a      	str	r2, [r3, #4]
			//		  if(Gb_fVolValue[0] < 15.0) Gb_fVolValue[0] = 0.0;
			//		  if(Gb_fVolValue[1] < 15.0) Gb_fVolValue[1] = 0.0;
			//		  if(Gb_fAmpValue[0] < 0.31) Gb_fAmpValue[0] = 0.0;
			//		  if(Gb_fAmpValue[1] < 0.31) Gb_fAmpValue[1] = 0.0;

			Gb_suiAdcMaxValue[0] = 0;
 8001fe2:	4b38      	ldr	r3, [pc, #224]	; (80020c4 <main+0x314>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	801a      	strh	r2, [r3, #0]
			Gb_suiAdcMaxValue[1] = 0;
 8001fe8:	4b36      	ldr	r3, [pc, #216]	; (80020c4 <main+0x314>)
 8001fea:	2200      	movs	r2, #0
 8001fec:	805a      	strh	r2, [r3, #2]

			Gb_suiAdcMinValue[0] = 4095.0;
 8001fee:	4b36      	ldr	r3, [pc, #216]	; (80020c8 <main+0x318>)
 8001ff0:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001ff4:	801a      	strh	r2, [r3, #0]
			Gb_suiAdcMinValue[1] = 4095.0;
 8001ff6:	4b34      	ldr	r3, [pc, #208]	; (80020c8 <main+0x318>)
 8001ff8:	f640 72ff 	movw	r2, #4095	; 0xfff
 8001ffc:	805a      	strh	r2, [r3, #2]
			Gb_uiAdcSum[0] = 0;
 8001ffe:	4b2e      	ldr	r3, [pc, #184]	; (80020b8 <main+0x308>)
 8002000:	2200      	movs	r2, #0
 8002002:	601a      	str	r2, [r3, #0]
			Gb_uiAdcSum[1] = 0;
 8002004:	4b2c      	ldr	r3, [pc, #176]	; (80020b8 <main+0x308>)
 8002006:	2200      	movs	r2, #0
 8002008:	605a      	str	r2, [r3, #4]
		}

		uint32_t currentTick = HAL_GetTick();
 800200a:	f000 ff31 	bl	8002e70 <HAL_GetTick>
 800200e:	6078      	str	r0, [r7, #4]
		if(currentTick - lastTick > 2500)
 8002010:	4b30      	ldr	r3, [pc, #192]	; (80020d4 <main+0x324>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	687a      	ldr	r2, [r7, #4]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	f640 12c4 	movw	r2, #2500	; 0x9c4
 800201c:	4293      	cmp	r3, r2
 800201e:	f67f aef0 	bls.w	8001e02 <main+0x52>
		{
			lastTick = currentTick;
 8002022:	4a2c      	ldr	r2, [pc, #176]	; (80020d4 <main+0x324>)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	6013      	str	r3, [r2, #0]
			getSensorValue();
 8002028:	f000 fa84 	bl	8002534 <getSensorValue>
			DESIoT_assignFloat(DESIOT_VS0, Temperature);
 800202c:	4b2a      	ldr	r3, [pc, #168]	; (80020d8 <main+0x328>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4619      	mov	r1, r3
 8002032:	2000      	movs	r0, #0
 8002034:	f7ff f859 	bl	80010ea <DESIoT_assignFloat>
			DESIoT_assignInt(DESIOT_VS2, lastTick);
 8002038:	4b26      	ldr	r3, [pc, #152]	; (80020d4 <main+0x324>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	4619      	mov	r1, r3
 800203e:	2002      	movs	r0, #2
 8002040:	f7ff f80c 	bl	800105c <DESIoT_assignInt>

			DESIoT_assignFloat(DESIOT_VS5, Gb_fAmpValue[0]);
 8002044:	4b22      	ldr	r3, [pc, #136]	; (80020d0 <main+0x320>)
 8002046:	681b      	ldr	r3, [r3, #0]
 8002048:	4619      	mov	r1, r3
 800204a:	2005      	movs	r0, #5
 800204c:	f7ff f84d 	bl	80010ea <DESIoT_assignFloat>
			DESIoT_assignFloat(DESIOT_VS6, Gb_fAmpValue[1]);
 8002050:	4b1f      	ldr	r3, [pc, #124]	; (80020d0 <main+0x320>)
 8002052:	685b      	ldr	r3, [r3, #4]
 8002054:	4619      	mov	r1, r3
 8002056:	2006      	movs	r0, #6
 8002058:	f7ff f847 	bl	80010ea <DESIoT_assignFloat>
			DESIoT_assignFloat(DESIOT_VS7, Gb_fVolValue[0]);
 800205c:	4b18      	ldr	r3, [pc, #96]	; (80020c0 <main+0x310>)
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4619      	mov	r1, r3
 8002062:	2007      	movs	r0, #7
 8002064:	f7ff f841 	bl	80010ea <DESIoT_assignFloat>
			DESIoT_assignFloat(DESIOT_VS8, Gb_fVolValue[1]);
 8002068:	4b15      	ldr	r3, [pc, #84]	; (80020c0 <main+0x310>)
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	4619      	mov	r1, r3
 800206e:	2008      	movs	r0, #8
 8002070:	f7ff f83b 	bl	80010ea <DESIoT_assignFloat>
	{
 8002074:	e6c5      	b.n	8001e02 <main+0x52>
 8002076:	bf00      	nop
 8002078:	00000000 	.word	0x00000000
 800207c:	40e38800 	.word	0x40e38800
 8002080:	28f5c28f 	.word	0x28f5c28f
 8002084:	3ff68f5c 	.word	0x3ff68f5c
 8002088:	66666666 	.word	0x66666666
 800208c:	400a6666 	.word	0x400a6666
 8002090:	00000000 	.word	0x00000000
 8002094:	40affe00 	.word	0x40affe00
 8002098:	76c8b439 	.word	0x76c8b439
 800209c:	3fe69fbe 	.word	0x3fe69fbe
 80020a0:	20000bf4 	.word	0x20000bf4
 80020a4:	20000adc 	.word	0x20000adc
 80020a8:	20000be0 	.word	0x20000be0
 80020ac:	20000b98 	.word	0x20000b98
 80020b0:	20000b50 	.word	0x20000b50
 80020b4:	20000bfc 	.word	0x20000bfc
 80020b8:	20000c00 	.word	0x20000c00
 80020bc:	20000c20 	.word	0x20000c20
 80020c0:	20000c10 	.word	0x20000c10
 80020c4:	20000c08 	.word	0x20000c08
 80020c8:	20000200 	.word	0x20000200
 80020cc:	447a0000 	.word	0x447a0000
 80020d0:	20000c18 	.word	0x20000c18
 80020d4:	20000be4 	.word	0x20000be4
 80020d8:	20000bf0 	.word	0x20000bf0

080020dc <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b094      	sub	sp, #80	; 0x50
 80020e0:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80020e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80020e6:	2228      	movs	r2, #40	; 0x28
 80020e8:	2100      	movs	r1, #0
 80020ea:	4618      	mov	r0, r3
 80020ec:	f004 f824 	bl	8006138 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80020f0:	f107 0314 	add.w	r3, r7, #20
 80020f4:	2200      	movs	r2, #0
 80020f6:	601a      	str	r2, [r3, #0]
 80020f8:	605a      	str	r2, [r3, #4]
 80020fa:	609a      	str	r2, [r3, #8]
 80020fc:	60da      	str	r2, [r3, #12]
 80020fe:	611a      	str	r2, [r3, #16]
	RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8002100:	1d3b      	adds	r3, r7, #4
 8002102:	2200      	movs	r2, #0
 8002104:	601a      	str	r2, [r3, #0]
 8002106:	605a      	str	r2, [r3, #4]
 8002108:	609a      	str	r2, [r3, #8]
 800210a:	60da      	str	r2, [r3, #12]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800210c:	2301      	movs	r3, #1
 800210e:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002110:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002114:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8002116:	2300      	movs	r3, #0
 8002118:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800211a:	2301      	movs	r3, #1
 800211c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800211e:	2302      	movs	r3, #2
 8002120:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002122:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8002126:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8002128:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 800212c:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800212e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002132:	4618      	mov	r0, r3
 8002134:	f002 f9d2 	bl	80044dc <HAL_RCC_OscConfig>
 8002138:	4603      	mov	r3, r0
 800213a:	2b00      	cmp	r3, #0
 800213c:	d001      	beq.n	8002142 <SystemClock_Config+0x66>
	{
		Error_Handler();
 800213e:	f000 fbf5 	bl	800292c <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8002142:	230f      	movs	r3, #15
 8002144:	617b      	str	r3, [r7, #20]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002146:	2302      	movs	r3, #2
 8002148:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800214a:	2300      	movs	r3, #0
 800214c:	61fb      	str	r3, [r7, #28]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800214e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002152:	623b      	str	r3, [r7, #32]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8002154:	2300      	movs	r3, #0
 8002156:	627b      	str	r3, [r7, #36]	; 0x24

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8002158:	f107 0314 	add.w	r3, r7, #20
 800215c:	2102      	movs	r1, #2
 800215e:	4618      	mov	r0, r3
 8002160:	f002 fc3e 	bl	80049e0 <HAL_RCC_ClockConfig>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d001      	beq.n	800216e <SystemClock_Config+0x92>
	{
		Error_Handler();
 800216a:	f000 fbdf 	bl	800292c <Error_Handler>
	}
	PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800216e:	2302      	movs	r3, #2
 8002170:	607b      	str	r3, [r7, #4]
	PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV6;
 8002172:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002176:	60fb      	str	r3, [r7, #12]
	if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002178:	1d3b      	adds	r3, r7, #4
 800217a:	4618      	mov	r0, r3
 800217c:	f002 fdbe 	bl	8004cfc <HAL_RCCEx_PeriphCLKConfig>
 8002180:	4603      	mov	r3, r0
 8002182:	2b00      	cmp	r3, #0
 8002184:	d001      	beq.n	800218a <SystemClock_Config+0xae>
	{
		Error_Handler();
 8002186:	f000 fbd1 	bl	800292c <Error_Handler>
	}
}
 800218a:	bf00      	nop
 800218c:	3750      	adds	r7, #80	; 0x50
 800218e:	46bd      	mov	sp, r7
 8002190:	bd80      	pop	{r7, pc}
	...

08002194 <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b084      	sub	sp, #16
 8002198:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN ADC1_Init 0 */

	/* USER CODE END ADC1_Init 0 */

	ADC_ChannelConfTypeDef sConfig = {0};
 800219a:	1d3b      	adds	r3, r7, #4
 800219c:	2200      	movs	r2, #0
 800219e:	601a      	str	r2, [r3, #0]
 80021a0:	605a      	str	r2, [r3, #4]
 80021a2:	609a      	str	r2, [r3, #8]

	/* USER CODE END ADC1_Init 1 */

	/** Common config
	 */
	hadc1.Instance = ADC1;
 80021a4:	4b2e      	ldr	r3, [pc, #184]	; (8002260 <MX_ADC1_Init+0xcc>)
 80021a6:	4a2f      	ldr	r2, [pc, #188]	; (8002264 <MX_ADC1_Init+0xd0>)
 80021a8:	601a      	str	r2, [r3, #0]
	hadc1.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80021aa:	4b2d      	ldr	r3, [pc, #180]	; (8002260 <MX_ADC1_Init+0xcc>)
 80021ac:	f44f 7280 	mov.w	r2, #256	; 0x100
 80021b0:	609a      	str	r2, [r3, #8]
	hadc1.Init.ContinuousConvMode = DISABLE;
 80021b2:	4b2b      	ldr	r3, [pc, #172]	; (8002260 <MX_ADC1_Init+0xcc>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	731a      	strb	r2, [r3, #12]
	hadc1.Init.DiscontinuousConvMode = DISABLE;
 80021b8:	4b29      	ldr	r3, [pc, #164]	; (8002260 <MX_ADC1_Init+0xcc>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	751a      	strb	r2, [r3, #20]
	hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80021be:	4b28      	ldr	r3, [pc, #160]	; (8002260 <MX_ADC1_Init+0xcc>)
 80021c0:	f44f 2260 	mov.w	r2, #917504	; 0xe0000
 80021c4:	61da      	str	r2, [r3, #28]
	hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80021c6:	4b26      	ldr	r3, [pc, #152]	; (8002260 <MX_ADC1_Init+0xcc>)
 80021c8:	2200      	movs	r2, #0
 80021ca:	605a      	str	r2, [r3, #4]
	hadc1.Init.NbrOfConversion = 4;
 80021cc:	4b24      	ldr	r3, [pc, #144]	; (8002260 <MX_ADC1_Init+0xcc>)
 80021ce:	2204      	movs	r2, #4
 80021d0:	611a      	str	r2, [r3, #16]
	if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80021d2:	4823      	ldr	r0, [pc, #140]	; (8002260 <MX_ADC1_Init+0xcc>)
 80021d4:	f000 fe56 	bl	8002e84 <HAL_ADC_Init>
 80021d8:	4603      	mov	r3, r0
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d001      	beq.n	80021e2 <MX_ADC1_Init+0x4e>
	{
		Error_Handler();
 80021de:	f000 fba5 	bl	800292c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_0;
 80021e2:	2300      	movs	r3, #0
 80021e4:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_1;
 80021e6:	2301      	movs	r3, #1
 80021e8:	60bb      	str	r3, [r7, #8]
	sConfig.SamplingTime = ADC_SAMPLETIME_13CYCLES_5;
 80021ea:	2302      	movs	r3, #2
 80021ec:	60fb      	str	r3, [r7, #12]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80021ee:	1d3b      	adds	r3, r7, #4
 80021f0:	4619      	mov	r1, r3
 80021f2:	481b      	ldr	r0, [pc, #108]	; (8002260 <MX_ADC1_Init+0xcc>)
 80021f4:	f001 fa0c 	bl	8003610 <HAL_ADC_ConfigChannel>
 80021f8:	4603      	mov	r3, r0
 80021fa:	2b00      	cmp	r3, #0
 80021fc:	d001      	beq.n	8002202 <MX_ADC1_Init+0x6e>
	{
		Error_Handler();
 80021fe:	f000 fb95 	bl	800292c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_1;
 8002202:	2301      	movs	r3, #1
 8002204:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_2;
 8002206:	2302      	movs	r3, #2
 8002208:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800220a:	1d3b      	adds	r3, r7, #4
 800220c:	4619      	mov	r1, r3
 800220e:	4814      	ldr	r0, [pc, #80]	; (8002260 <MX_ADC1_Init+0xcc>)
 8002210:	f001 f9fe 	bl	8003610 <HAL_ADC_ConfigChannel>
 8002214:	4603      	mov	r3, r0
 8002216:	2b00      	cmp	r3, #0
 8002218:	d001      	beq.n	800221e <MX_ADC1_Init+0x8a>
	{
		Error_Handler();
 800221a:	f000 fb87 	bl	800292c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_2;
 800221e:	2302      	movs	r3, #2
 8002220:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_3;
 8002222:	2303      	movs	r3, #3
 8002224:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002226:	1d3b      	adds	r3, r7, #4
 8002228:	4619      	mov	r1, r3
 800222a:	480d      	ldr	r0, [pc, #52]	; (8002260 <MX_ADC1_Init+0xcc>)
 800222c:	f001 f9f0 	bl	8003610 <HAL_ADC_ConfigChannel>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d001      	beq.n	800223a <MX_ADC1_Init+0xa6>
	{
		Error_Handler();
 8002236:	f000 fb79 	bl	800292c <Error_Handler>
	}

	/** Configure Regular Channel
	 */
	sConfig.Channel = ADC_CHANNEL_3;
 800223a:	2303      	movs	r3, #3
 800223c:	607b      	str	r3, [r7, #4]
	sConfig.Rank = ADC_REGULAR_RANK_4;
 800223e:	2304      	movs	r3, #4
 8002240:	60bb      	str	r3, [r7, #8]
	if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8002242:	1d3b      	adds	r3, r7, #4
 8002244:	4619      	mov	r1, r3
 8002246:	4806      	ldr	r0, [pc, #24]	; (8002260 <MX_ADC1_Init+0xcc>)
 8002248:	f001 f9e2 	bl	8003610 <HAL_ADC_ConfigChannel>
 800224c:	4603      	mov	r3, r0
 800224e:	2b00      	cmp	r3, #0
 8002250:	d001      	beq.n	8002256 <MX_ADC1_Init+0xc2>
	{
		Error_Handler();
 8002252:	f000 fb6b 	bl	800292c <Error_Handler>
	}
	/* USER CODE BEGIN ADC1_Init 2 */

	/* USER CODE END ADC1_Init 2 */

}
 8002256:	bf00      	nop
 8002258:	3710      	adds	r7, #16
 800225a:	46bd      	mov	sp, r7
 800225c:	bd80      	pop	{r7, pc}
 800225e:	bf00      	nop
 8002260:	20000adc 	.word	0x20000adc
 8002264:	40012400 	.word	0x40012400

08002268 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8002268:	b580      	push	{r7, lr}
 800226a:	b086      	sub	sp, #24
 800226c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800226e:	f107 0308 	add.w	r3, r7, #8
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
 8002276:	605a      	str	r2, [r3, #4]
 8002278:	609a      	str	r2, [r3, #8]
 800227a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800227c:	463b      	mov	r3, r7
 800227e:	2200      	movs	r2, #0
 8002280:	601a      	str	r2, [r3, #0]
 8002282:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8002284:	4b1d      	ldr	r3, [pc, #116]	; (80022fc <MX_TIM2_Init+0x94>)
 8002286:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800228a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 72-1;
 800228c:	4b1b      	ldr	r3, [pc, #108]	; (80022fc <MX_TIM2_Init+0x94>)
 800228e:	2247      	movs	r2, #71	; 0x47
 8002290:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002292:	4b1a      	ldr	r3, [pc, #104]	; (80022fc <MX_TIM2_Init+0x94>)
 8002294:	2200      	movs	r2, #0
 8002296:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 65535;
 8002298:	4b18      	ldr	r3, [pc, #96]	; (80022fc <MX_TIM2_Init+0x94>)
 800229a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800229e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80022a0:	4b16      	ldr	r3, [pc, #88]	; (80022fc <MX_TIM2_Init+0x94>)
 80022a2:	2200      	movs	r2, #0
 80022a4:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80022a6:	4b15      	ldr	r3, [pc, #84]	; (80022fc <MX_TIM2_Init+0x94>)
 80022a8:	2200      	movs	r2, #0
 80022aa:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80022ac:	4813      	ldr	r0, [pc, #76]	; (80022fc <MX_TIM2_Init+0x94>)
 80022ae:	f002 fddb 	bl	8004e68 <HAL_TIM_Base_Init>
 80022b2:	4603      	mov	r3, r0
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d001      	beq.n	80022bc <MX_TIM2_Init+0x54>
	{
		Error_Handler();
 80022b8:	f000 fb38 	bl	800292c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80022bc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80022c0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80022c2:	f107 0308 	add.w	r3, r7, #8
 80022c6:	4619      	mov	r1, r3
 80022c8:	480c      	ldr	r0, [pc, #48]	; (80022fc <MX_TIM2_Init+0x94>)
 80022ca:	f002 fe67 	bl	8004f9c <HAL_TIM_ConfigClockSource>
 80022ce:	4603      	mov	r3, r0
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d001      	beq.n	80022d8 <MX_TIM2_Init+0x70>
	{
		Error_Handler();
 80022d4:	f000 fb2a 	bl	800292c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80022d8:	2300      	movs	r3, #0
 80022da:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80022dc:	2300      	movs	r3, #0
 80022de:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80022e0:	463b      	mov	r3, r7
 80022e2:	4619      	mov	r1, r3
 80022e4:	4805      	ldr	r0, [pc, #20]	; (80022fc <MX_TIM2_Init+0x94>)
 80022e6:	f003 f819 	bl	800531c <HAL_TIMEx_MasterConfigSynchronization>
 80022ea:	4603      	mov	r3, r0
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d001      	beq.n	80022f4 <MX_TIM2_Init+0x8c>
	{
		Error_Handler();
 80022f0:	f000 fb1c 	bl	800292c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80022f4:	bf00      	nop
 80022f6:	3718      	adds	r7, #24
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bd80      	pop	{r7, pc}
 80022fc:	20000b50 	.word	0x20000b50

08002300 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	af00      	add	r7, sp, #0
	/* USER CODE END USART1_Init 0 */

	/* USER CODE BEGIN USART1_Init 1 */

	/* USER CODE END USART1_Init 1 */
	huart1.Instance = USART1;
 8002304:	4b11      	ldr	r3, [pc, #68]	; (800234c <MX_USART1_UART_Init+0x4c>)
 8002306:	4a12      	ldr	r2, [pc, #72]	; (8002350 <MX_USART1_UART_Init+0x50>)
 8002308:	601a      	str	r2, [r3, #0]
	huart1.Init.BaudRate = 115200;
 800230a:	4b10      	ldr	r3, [pc, #64]	; (800234c <MX_USART1_UART_Init+0x4c>)
 800230c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002310:	605a      	str	r2, [r3, #4]
	huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002312:	4b0e      	ldr	r3, [pc, #56]	; (800234c <MX_USART1_UART_Init+0x4c>)
 8002314:	2200      	movs	r2, #0
 8002316:	609a      	str	r2, [r3, #8]
	huart1.Init.StopBits = UART_STOPBITS_1;
 8002318:	4b0c      	ldr	r3, [pc, #48]	; (800234c <MX_USART1_UART_Init+0x4c>)
 800231a:	2200      	movs	r2, #0
 800231c:	60da      	str	r2, [r3, #12]
	huart1.Init.Parity = UART_PARITY_NONE;
 800231e:	4b0b      	ldr	r3, [pc, #44]	; (800234c <MX_USART1_UART_Init+0x4c>)
 8002320:	2200      	movs	r2, #0
 8002322:	611a      	str	r2, [r3, #16]
	huart1.Init.Mode = UART_MODE_TX_RX;
 8002324:	4b09      	ldr	r3, [pc, #36]	; (800234c <MX_USART1_UART_Init+0x4c>)
 8002326:	220c      	movs	r2, #12
 8002328:	615a      	str	r2, [r3, #20]
	huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800232a:	4b08      	ldr	r3, [pc, #32]	; (800234c <MX_USART1_UART_Init+0x4c>)
 800232c:	2200      	movs	r2, #0
 800232e:	619a      	str	r2, [r3, #24]
	huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002330:	4b06      	ldr	r3, [pc, #24]	; (800234c <MX_USART1_UART_Init+0x4c>)
 8002332:	2200      	movs	r2, #0
 8002334:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart1) != HAL_OK)
 8002336:	4805      	ldr	r0, [pc, #20]	; (800234c <MX_USART1_UART_Init+0x4c>)
 8002338:	f003 f84e 	bl	80053d8 <HAL_UART_Init>
 800233c:	4603      	mov	r3, r0
 800233e:	2b00      	cmp	r3, #0
 8002340:	d001      	beq.n	8002346 <MX_USART1_UART_Init+0x46>
	{
		Error_Handler();
 8002342:	f000 faf3 	bl	800292c <Error_Handler>
	}
	/* USER CODE BEGIN USART1_Init 2 */

	/* USER CODE END USART1_Init 2 */

}
 8002346:	bf00      	nop
 8002348:	bd80      	pop	{r7, pc}
 800234a:	bf00      	nop
 800234c:	20000b98 	.word	0x20000b98
 8002350:	40013800 	.word	0x40013800

08002354 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b082      	sub	sp, #8
 8002358:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800235a:	4b0c      	ldr	r3, [pc, #48]	; (800238c <MX_DMA_Init+0x38>)
 800235c:	695b      	ldr	r3, [r3, #20]
 800235e:	4a0b      	ldr	r2, [pc, #44]	; (800238c <MX_DMA_Init+0x38>)
 8002360:	f043 0301 	orr.w	r3, r3, #1
 8002364:	6153      	str	r3, [r2, #20]
 8002366:	4b09      	ldr	r3, [pc, #36]	; (800238c <MX_DMA_Init+0x38>)
 8002368:	695b      	ldr	r3, [r3, #20]
 800236a:	f003 0301 	and.w	r3, r3, #1
 800236e:	607b      	str	r3, [r7, #4]
 8002370:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Channel1_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8002372:	2200      	movs	r2, #0
 8002374:	2100      	movs	r1, #0
 8002376:	200b      	movs	r0, #11
 8002378:	f001 fc23 	bl	8003bc2 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 800237c:	200b      	movs	r0, #11
 800237e:	f001 fc3c 	bl	8003bfa <HAL_NVIC_EnableIRQ>

}
 8002382:	bf00      	nop
 8002384:	3708      	adds	r7, #8
 8002386:	46bd      	mov	sp, r7
 8002388:	bd80      	pop	{r7, pc}
 800238a:	bf00      	nop
 800238c:	40021000 	.word	0x40021000

08002390 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b088      	sub	sp, #32
 8002394:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002396:	f107 0310 	add.w	r3, r7, #16
 800239a:	2200      	movs	r2, #0
 800239c:	601a      	str	r2, [r3, #0]
 800239e:	605a      	str	r2, [r3, #4]
 80023a0:	609a      	str	r2, [r3, #8]
 80023a2:	60da      	str	r2, [r3, #12]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80023a4:	4b24      	ldr	r3, [pc, #144]	; (8002438 <MX_GPIO_Init+0xa8>)
 80023a6:	699b      	ldr	r3, [r3, #24]
 80023a8:	4a23      	ldr	r2, [pc, #140]	; (8002438 <MX_GPIO_Init+0xa8>)
 80023aa:	f043 0320 	orr.w	r3, r3, #32
 80023ae:	6193      	str	r3, [r2, #24]
 80023b0:	4b21      	ldr	r3, [pc, #132]	; (8002438 <MX_GPIO_Init+0xa8>)
 80023b2:	699b      	ldr	r3, [r3, #24]
 80023b4:	f003 0320 	and.w	r3, r3, #32
 80023b8:	60fb      	str	r3, [r7, #12]
 80023ba:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 80023bc:	4b1e      	ldr	r3, [pc, #120]	; (8002438 <MX_GPIO_Init+0xa8>)
 80023be:	699b      	ldr	r3, [r3, #24]
 80023c0:	4a1d      	ldr	r2, [pc, #116]	; (8002438 <MX_GPIO_Init+0xa8>)
 80023c2:	f043 0304 	orr.w	r3, r3, #4
 80023c6:	6193      	str	r3, [r2, #24]
 80023c8:	4b1b      	ldr	r3, [pc, #108]	; (8002438 <MX_GPIO_Init+0xa8>)
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	f003 0304 	and.w	r3, r3, #4
 80023d0:	60bb      	str	r3, [r7, #8]
 80023d2:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 80023d4:	4b18      	ldr	r3, [pc, #96]	; (8002438 <MX_GPIO_Init+0xa8>)
 80023d6:	699b      	ldr	r3, [r3, #24]
 80023d8:	4a17      	ldr	r2, [pc, #92]	; (8002438 <MX_GPIO_Init+0xa8>)
 80023da:	f043 0308 	orr.w	r3, r3, #8
 80023de:	6193      	str	r3, [r2, #24]
 80023e0:	4b15      	ldr	r3, [pc, #84]	; (8002438 <MX_GPIO_Init+0xa8>)
 80023e2:	699b      	ldr	r3, [r3, #24]
 80023e4:	f003 0308 	and.w	r3, r3, #8
 80023e8:	607b      	str	r3, [r7, #4]
 80023ea:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, DS18B20_PIN_Pin|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 80023ec:	2200      	movs	r2, #0
 80023ee:	f44f 4170 	mov.w	r1, #61440	; 0xf000
 80023f2:	4812      	ldr	r0, [pc, #72]	; (800243c <MX_GPIO_Init+0xac>)
 80023f4:	f002 f859 	bl	80044aa <HAL_GPIO_WritePin>

	/*Configure GPIO pins : DS18B20_PIN_Pin PB13 PB14 PB15 */
	GPIO_InitStruct.Pin = DS18B20_PIN_Pin|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 80023f8:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 80023fc:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80023fe:	2301      	movs	r3, #1
 8002400:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002402:	2300      	movs	r3, #0
 8002404:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002406:	2302      	movs	r3, #2
 8002408:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800240a:	f107 0310 	add.w	r3, r7, #16
 800240e:	4619      	mov	r1, r3
 8002410:	480a      	ldr	r0, [pc, #40]	; (800243c <MX_GPIO_Init+0xac>)
 8002412:	f001 feaf 	bl	8004174 <HAL_GPIO_Init>

	/*Configure GPIO pin : DYNAMO_PIN_Pin */
	GPIO_InitStruct.Pin = DYNAMO_PIN_Pin;
 8002416:	f44f 7380 	mov.w	r3, #256	; 0x100
 800241a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800241c:	2300      	movs	r3, #0
 800241e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002420:	2300      	movs	r3, #0
 8002422:	61bb      	str	r3, [r7, #24]
	HAL_GPIO_Init(DYNAMO_PIN_GPIO_Port, &GPIO_InitStruct);
 8002424:	f107 0310 	add.w	r3, r7, #16
 8002428:	4619      	mov	r1, r3
 800242a:	4805      	ldr	r0, [pc, #20]	; (8002440 <MX_GPIO_Init+0xb0>)
 800242c:	f001 fea2 	bl	8004174 <HAL_GPIO_Init>

}
 8002430:	bf00      	nop
 8002432:	3720      	adds	r7, #32
 8002434:	46bd      	mov	sp, r7
 8002436:	bd80      	pop	{r7, pc}
 8002438:	40021000 	.word	0x40021000
 800243c:	40010c00 	.word	0x40010c00
 8002440:	40010800 	.word	0x40010800

08002444 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b084      	sub	sp, #16
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
	uint8_t rxByte = huart->Instance->DR;
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	73fb      	strb	r3, [r7, #15]
	DESIOT_Rx1byte(rxByte);
 8002454:	7bfb      	ldrb	r3, [r7, #15]
 8002456:	4618      	mov	r0, r3
 8002458:	f7fe fdf0 	bl	800103c <DESIOT_Rx1byte>
	HAL_UART_Receive_IT(huart, &ITReceive, 1);
 800245c:	2201      	movs	r2, #1
 800245e:	4904      	ldr	r1, [pc, #16]	; (8002470 <HAL_UART_RxCpltCallback+0x2c>)
 8002460:	6878      	ldr	r0, [r7, #4]
 8002462:	f003 f88c 	bl	800557e <HAL_UART_Receive_IT>
}
 8002466:	bf00      	nop
 8002468:	3710      	adds	r7, #16
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	20000be0 	.word	0x20000be0

08002474 <DESIoT_sendBytes>:
DESIOT_SENDBYTES
{
 8002474:	b580      	push	{r7, lr}
 8002476:	b082      	sub	sp, #8
 8002478:	af00      	add	r7, sp, #0
 800247a:	6078      	str	r0, [r7, #4]
 800247c:	6039      	str	r1, [r7, #0]
	while(HAL_UART_Transmit(&huart1, bytes, size, 1000) != HAL_OK);
 800247e:	bf00      	nop
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	b29a      	uxth	r2, r3
 8002484:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002488:	6839      	ldr	r1, [r7, #0]
 800248a:	4805      	ldr	r0, [pc, #20]	; (80024a0 <DESIoT_sendBytes+0x2c>)
 800248c:	f002 fff4 	bl	8005478 <HAL_UART_Transmit>
 8002490:	4603      	mov	r3, r0
 8002492:	2b00      	cmp	r3, #0
 8002494:	d1f4      	bne.n	8002480 <DESIoT_sendBytes+0xc>
}
 8002496:	bf00      	nop
 8002498:	bf00      	nop
 800249a:	3708      	adds	r7, #8
 800249c:	46bd      	mov	sp, r7
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20000b98 	.word	0x20000b98

080024a4 <DESIoT_millis>:
DESIOT_MILLIS {
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
	return HAL_GetTick();
 80024a8:	f000 fce2 	bl	8002e70 <HAL_GetTick>
 80024ac:	4603      	mov	r3, r0
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	bd80      	pop	{r7, pc}
	...

080024b4 <DESIoT_execSyncDESIOT_VS3>:

DESIOT_DEF_EXEC_SYNC(DESIOT_VS3) {
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
 80024bc:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_14, payload[0]);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	781b      	ldrb	r3, [r3, #0]
 80024c2:	461a      	mov	r2, r3
 80024c4:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 80024c8:	4809      	ldr	r0, [pc, #36]	; (80024f0 <DESIoT_execSyncDESIOT_VS3+0x3c>)
 80024ca:	f001 ffee 	bl	80044aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 80024ce:	2201      	movs	r2, #1
 80024d0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024d4:	4806      	ldr	r0, [pc, #24]	; (80024f0 <DESIoT_execSyncDESIOT_VS3+0x3c>)
 80024d6:	f001 ffe8 	bl	80044aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 80024da:	2200      	movs	r2, #0
 80024dc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80024e0:	4803      	ldr	r0, [pc, #12]	; (80024f0 <DESIoT_execSyncDESIOT_VS3+0x3c>)
 80024e2:	f001 ffe2 	bl	80044aa <HAL_GPIO_WritePin>
}
 80024e6:	bf00      	nop
 80024e8:	3708      	adds	r7, #8
 80024ea:	46bd      	mov	sp, r7
 80024ec:	bd80      	pop	{r7, pc}
 80024ee:	bf00      	nop
 80024f0:	40010c00 	.word	0x40010c00

080024f4 <DESIoT_execSyncDESIOT_VS4>:

DESIOT_DEF_EXEC_SYNC(DESIOT_VS4) {
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
 80024fc:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_15, payload[0]);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	781b      	ldrb	r3, [r3, #0]
 8002502:	461a      	mov	r2, r3
 8002504:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002508:	4809      	ldr	r0, [pc, #36]	; (8002530 <DESIoT_execSyncDESIOT_VS4+0x3c>)
 800250a:	f001 ffce 	bl	80044aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_SET);
 800250e:	2201      	movs	r2, #1
 8002510:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002514:	4806      	ldr	r0, [pc, #24]	; (8002530 <DESIoT_execSyncDESIOT_VS4+0x3c>)
 8002516:	f001 ffc8 	bl	80044aa <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13, GPIO_PIN_RESET);
 800251a:	2200      	movs	r2, #0
 800251c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8002520:	4803      	ldr	r0, [pc, #12]	; (8002530 <DESIoT_execSyncDESIOT_VS4+0x3c>)
 8002522:	f001 ffc2 	bl	80044aa <HAL_GPIO_WritePin>
}
 8002526:	bf00      	nop
 8002528:	3708      	adds	r7, #8
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}
 800252e:	bf00      	nop
 8002530:	40010c00 	.word	0x40010c00

08002534 <getSensorValue>:

void getSensorValue()
{
 8002534:	b580      	push	{r7, lr}
 8002536:	af00      	add	r7, sp, #0
	getTemperature();
 8002538:	f000 f802 	bl	8002540 <getTemperature>
}
 800253c:	bf00      	nop
 800253e:	bd80      	pop	{r7, pc}

08002540 <getTemperature>:


void getTemperature()
{
 8002540:	b580      	push	{r7, lr}
 8002542:	af00      	add	r7, sp, #0
	HAL_ADC_Stop_DMA(&hadc1);
 8002544:	482b      	ldr	r0, [pc, #172]	; (80025f4 <getTemperature+0xb4>)
 8002546:	f000 ff3d 	bl	80033c4 <HAL_ADC_Stop_DMA>
	HAL_ADC_Stop_IT(&hadc1);
 800254a:	482a      	ldr	r0, [pc, #168]	; (80025f4 <getTemperature+0xb4>)
 800254c:	f000 fe28 	bl	80031a0 <HAL_ADC_Stop_IT>

	Presence = DS18B20_Start ();
 8002550:	f000 f93e 	bl	80027d0 <DS18B20_Start>
 8002554:	4603      	mov	r3, r0
 8002556:	461a      	mov	r2, r3
 8002558:	4b27      	ldr	r3, [pc, #156]	; (80025f8 <getTemperature+0xb8>)
 800255a:	701a      	strb	r2, [r3, #0]
	delay(1);
 800255c:	2001      	movs	r0, #1
 800255e:	f000 f8d3 	bl	8002708 <delay>
	DS18B20_Write (0xCC);  // skip ROM
 8002562:	20cc      	movs	r0, #204	; 0xcc
 8002564:	f000 f8e8 	bl	8002738 <DS18B20_Write>
	DS18B20_Write (0x44);  // convert t
 8002568:	2044      	movs	r0, #68	; 0x44
 800256a:	f000 f8e5 	bl	8002738 <DS18B20_Write>
	delay(1);
 800256e:	2001      	movs	r0, #1
 8002570:	f000 f8ca 	bl	8002708 <delay>

	Presence = DS18B20_Start ();
 8002574:	f000 f92c 	bl	80027d0 <DS18B20_Start>
 8002578:	4603      	mov	r3, r0
 800257a:	461a      	mov	r2, r3
 800257c:	4b1e      	ldr	r3, [pc, #120]	; (80025f8 <getTemperature+0xb8>)
 800257e:	701a      	strb	r2, [r3, #0]
	delay(1);
 8002580:	2001      	movs	r0, #1
 8002582:	f000 f8c1 	bl	8002708 <delay>
	DS18B20_Write (0xCC);  // skip ROM
 8002586:	20cc      	movs	r0, #204	; 0xcc
 8002588:	f000 f8d6 	bl	8002738 <DS18B20_Write>
	DS18B20_Write (0xBE);  // Read Scratch-pad
 800258c:	20be      	movs	r0, #190	; 0xbe
 800258e:	f000 f8d3 	bl	8002738 <DS18B20_Write>

	Temp_byte1 = DS18B20_Read();
 8002592:	f000 f83d 	bl	8002610 <DS18B20_Read>
 8002596:	4603      	mov	r3, r0
 8002598:	461a      	mov	r2, r3
 800259a:	4b18      	ldr	r3, [pc, #96]	; (80025fc <getTemperature+0xbc>)
 800259c:	701a      	strb	r2, [r3, #0]
	Temp_byte2 = DS18B20_Read();
 800259e:	f000 f837 	bl	8002610 <DS18B20_Read>
 80025a2:	4603      	mov	r3, r0
 80025a4:	461a      	mov	r2, r3
 80025a6:	4b16      	ldr	r3, [pc, #88]	; (8002600 <getTemperature+0xc0>)
 80025a8:	701a      	strb	r2, [r3, #0]
	TEMP = (Temp_byte2<<8)|Temp_byte1;
 80025aa:	4b15      	ldr	r3, [pc, #84]	; (8002600 <getTemperature+0xc0>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	021b      	lsls	r3, r3, #8
 80025b0:	b21a      	sxth	r2, r3
 80025b2:	4b12      	ldr	r3, [pc, #72]	; (80025fc <getTemperature+0xbc>)
 80025b4:	781b      	ldrb	r3, [r3, #0]
 80025b6:	b21b      	sxth	r3, r3
 80025b8:	4313      	orrs	r3, r2
 80025ba:	b21b      	sxth	r3, r3
 80025bc:	b29a      	uxth	r2, r3
 80025be:	4b11      	ldr	r3, [pc, #68]	; (8002604 <getTemperature+0xc4>)
 80025c0:	801a      	strh	r2, [r3, #0]
	Temperature = (float)TEMP/16;
 80025c2:	4b10      	ldr	r3, [pc, #64]	; (8002604 <getTemperature+0xc4>)
 80025c4:	881b      	ldrh	r3, [r3, #0]
 80025c6:	4618      	mov	r0, r3
 80025c8:	f7fe fb34 	bl	8000c34 <__aeabi_ui2f>
 80025cc:	4603      	mov	r3, r0
 80025ce:	f04f 4183 	mov.w	r1, #1098907648	; 0x41800000
 80025d2:	4618      	mov	r0, r3
 80025d4:	f7fe fc3a 	bl	8000e4c <__aeabi_fdiv>
 80025d8:	4603      	mov	r3, r0
 80025da:	461a      	mov	r2, r3
 80025dc:	4b0a      	ldr	r3, [pc, #40]	; (8002608 <getTemperature+0xc8>)
 80025de:	601a      	str	r2, [r3, #0]

	HAL_ADC_Start_DMA(&hadc1,(uint32_t*) Gb_suiAdcValue, 4);
 80025e0:	2204      	movs	r2, #4
 80025e2:	490a      	ldr	r1, [pc, #40]	; (800260c <getTemperature+0xcc>)
 80025e4:	4803      	ldr	r0, [pc, #12]	; (80025f4 <getTemperature+0xb4>)
 80025e6:	f000 fe0f 	bl	8003208 <HAL_ADC_Start_DMA>
	HAL_ADC_Start_IT(&hadc1);
 80025ea:	4802      	ldr	r0, [pc, #8]	; (80025f4 <getTemperature+0xb4>)
 80025ec:	f000 fd22 	bl	8003034 <HAL_ADC_Start_IT>
}
 80025f0:	bf00      	nop
 80025f2:	bd80      	pop	{r7, pc}
 80025f4:	20000adc 	.word	0x20000adc
 80025f8:	20000be9 	.word	0x20000be9
 80025fc:	20000bea 	.word	0x20000bea
 8002600:	20000beb 	.word	0x20000beb
 8002604:	20000bec 	.word	0x20000bec
 8002608:	20000bf0 	.word	0x20000bf0
 800260c:	20000bf4 	.word	0x20000bf4

08002610 <DS18B20_Read>:

uint8_t DS18B20_Read (void)
{
 8002610:	b580      	push	{r7, lr}
 8002612:	b082      	sub	sp, #8
 8002614:	af00      	add	r7, sp, #0
	uint8_t value=0;
 8002616:	2300      	movs	r3, #0
 8002618:	71fb      	strb	r3, [r7, #7]

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 800261a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800261e:	481c      	ldr	r0, [pc, #112]	; (8002690 <DS18B20_Read+0x80>)
 8002620:	f000 f838 	bl	8002694 <Set_Pin_Input>

	for (int i=0;i<8;i++)
 8002624:	2300      	movs	r3, #0
 8002626:	603b      	str	r3, [r7, #0]
 8002628:	e02a      	b.n	8002680 <DS18B20_Read+0x70>
	{
		Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set as output
 800262a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800262e:	4818      	ldr	r0, [pc, #96]	; (8002690 <DS18B20_Read+0x80>)
 8002630:	f000 f84d 	bl	80026ce <Set_Pin_Output>

		HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the data pin LOW
 8002634:	2200      	movs	r2, #0
 8002636:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800263a:	4815      	ldr	r0, [pc, #84]	; (8002690 <DS18B20_Read+0x80>)
 800263c:	f001 ff35 	bl	80044aa <HAL_GPIO_WritePin>
		delay (1);  // wait for > 1us
 8002640:	2001      	movs	r0, #1
 8002642:	f000 f861 	bl	8002708 <delay>

		Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 8002646:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800264a:	4811      	ldr	r0, [pc, #68]	; (8002690 <DS18B20_Read+0x80>)
 800264c:	f000 f822 	bl	8002694 <Set_Pin_Input>
		if (HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))  // if the pin is HIGH
 8002650:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002654:	480e      	ldr	r0, [pc, #56]	; (8002690 <DS18B20_Read+0x80>)
 8002656:	f001 ff11 	bl	800447c <HAL_GPIO_ReadPin>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d009      	beq.n	8002674 <DS18B20_Read+0x64>
		{
			value |= 1<<i;  // read = 1
 8002660:	2201      	movs	r2, #1
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	b25a      	sxtb	r2, r3
 800266a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800266e:	4313      	orrs	r3, r2
 8002670:	b25b      	sxtb	r3, r3
 8002672:	71fb      	strb	r3, [r7, #7]
		}
		delay (50);  // wait for 60 us
 8002674:	2032      	movs	r0, #50	; 0x32
 8002676:	f000 f847 	bl	8002708 <delay>
	for (int i=0;i<8;i++)
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	3301      	adds	r3, #1
 800267e:	603b      	str	r3, [r7, #0]
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	2b07      	cmp	r3, #7
 8002684:	ddd1      	ble.n	800262a <DS18B20_Read+0x1a>
	}
	return value;
 8002686:	79fb      	ldrb	r3, [r7, #7]
}
 8002688:	4618      	mov	r0, r3
 800268a:	3708      	adds	r7, #8
 800268c:	46bd      	mov	sp, r7
 800268e:	bd80      	pop	{r7, pc}
 8002690:	40010c00 	.word	0x40010c00

08002694 <Set_Pin_Input>:

void Set_Pin_Input (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002694:	b580      	push	{r7, lr}
 8002696:	b086      	sub	sp, #24
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	460b      	mov	r3, r1
 800269e:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a0:	f107 0308 	add.w	r3, r7, #8
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
 80026a8:	605a      	str	r2, [r3, #4]
 80026aa:	609a      	str	r2, [r3, #8]
 80026ac:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80026ae:	887b      	ldrh	r3, [r7, #2]
 80026b0:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80026b2:	2300      	movs	r3, #0
 80026b4:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80026b6:	2301      	movs	r3, #1
 80026b8:	613b      	str	r3, [r7, #16]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80026ba:	f107 0308 	add.w	r3, r7, #8
 80026be:	4619      	mov	r1, r3
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f001 fd57 	bl	8004174 <HAL_GPIO_Init>
}
 80026c6:	bf00      	nop
 80026c8:	3718      	adds	r7, #24
 80026ca:	46bd      	mov	sp, r7
 80026cc:	bd80      	pop	{r7, pc}

080026ce <Set_Pin_Output>:
void Set_Pin_Output (GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80026ce:	b580      	push	{r7, lr}
 80026d0:	b086      	sub	sp, #24
 80026d2:	af00      	add	r7, sp, #0
 80026d4:	6078      	str	r0, [r7, #4]
 80026d6:	460b      	mov	r3, r1
 80026d8:	807b      	strh	r3, [r7, #2]
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026da:	f107 0308 	add.w	r3, r7, #8
 80026de:	2200      	movs	r2, #0
 80026e0:	601a      	str	r2, [r3, #0]
 80026e2:	605a      	str	r2, [r3, #4]
 80026e4:	609a      	str	r2, [r3, #8]
 80026e6:	60da      	str	r2, [r3, #12]
	GPIO_InitStruct.Pin = GPIO_Pin;
 80026e8:	887b      	ldrh	r3, [r7, #2]
 80026ea:	60bb      	str	r3, [r7, #8]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80026ec:	2301      	movs	r3, #1
 80026ee:	60fb      	str	r3, [r7, #12]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026f0:	2302      	movs	r3, #2
 80026f2:	617b      	str	r3, [r7, #20]
	HAL_GPIO_Init(GPIOx, &GPIO_InitStruct);
 80026f4:	f107 0308 	add.w	r3, r7, #8
 80026f8:	4619      	mov	r1, r3
 80026fa:	6878      	ldr	r0, [r7, #4]
 80026fc:	f001 fd3a 	bl	8004174 <HAL_GPIO_Init>
}
 8002700:	bf00      	nop
 8002702:	3718      	adds	r7, #24
 8002704:	46bd      	mov	sp, r7
 8002706:	bd80      	pop	{r7, pc}

08002708 <delay>:
void delay (uint16_t time)
{
 8002708:	b480      	push	{r7}
 800270a:	b083      	sub	sp, #12
 800270c:	af00      	add	r7, sp, #0
 800270e:	4603      	mov	r3, r0
 8002710:	80fb      	strh	r3, [r7, #6]
	/* change your code here for the delay in microseconds */
	__HAL_TIM_SET_COUNTER(&htim2, 0);
 8002712:	4b08      	ldr	r3, [pc, #32]	; (8002734 <delay+0x2c>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	2200      	movs	r2, #0
 8002718:	625a      	str	r2, [r3, #36]	; 0x24
	while ((__HAL_TIM_GET_COUNTER(&htim2))<time);
 800271a:	bf00      	nop
 800271c:	4b05      	ldr	r3, [pc, #20]	; (8002734 <delay+0x2c>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002722:	88fb      	ldrh	r3, [r7, #6]
 8002724:	429a      	cmp	r2, r3
 8002726:	d3f9      	bcc.n	800271c <delay+0x14>
}
 8002728:	bf00      	nop
 800272a:	bf00      	nop
 800272c:	370c      	adds	r7, #12
 800272e:	46bd      	mov	sp, r7
 8002730:	bc80      	pop	{r7}
 8002732:	4770      	bx	lr
 8002734:	20000b50 	.word	0x20000b50

08002738 <DS18B20_Write>:
void DS18B20_Write (uint8_t data)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b084      	sub	sp, #16
 800273c:	af00      	add	r7, sp, #0
 800273e:	4603      	mov	r3, r0
 8002740:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8002742:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002746:	4821      	ldr	r0, [pc, #132]	; (80027cc <DS18B20_Write+0x94>)
 8002748:	f7ff ffc1 	bl	80026ce <Set_Pin_Output>

	for (int i=0; i<8; i++)
 800274c:	2300      	movs	r3, #0
 800274e:	60fb      	str	r3, [r7, #12]
 8002750:	e034      	b.n	80027bc <DS18B20_Write+0x84>
	{

		if ((data & (1<<i))!=0)  // if the bit is high
 8002752:	79fa      	ldrb	r2, [r7, #7]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	fa42 f303 	asr.w	r3, r2, r3
 800275a:	f003 0301 	and.w	r3, r3, #1
 800275e:	2b00      	cmp	r3, #0
 8002760:	d016      	beq.n	8002790 <DS18B20_Write+0x58>
		{
			// write 1

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);  // set as output
 8002762:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002766:	4819      	ldr	r0, [pc, #100]	; (80027cc <DS18B20_Write+0x94>)
 8002768:	f7ff ffb1 	bl	80026ce <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 800276c:	2200      	movs	r2, #0
 800276e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002772:	4816      	ldr	r0, [pc, #88]	; (80027cc <DS18B20_Write+0x94>)
 8002774:	f001 fe99 	bl	80044aa <HAL_GPIO_WritePin>
			delay (1);  // wait for 1 us
 8002778:	2001      	movs	r0, #1
 800277a:	f7ff ffc5 	bl	8002708 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);  // set as input
 800277e:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002782:	4812      	ldr	r0, [pc, #72]	; (80027cc <DS18B20_Write+0x94>)
 8002784:	f7ff ff86 	bl	8002694 <Set_Pin_Input>
			delay (50);  // wait for 60 us
 8002788:	2032      	movs	r0, #50	; 0x32
 800278a:	f7ff ffbd 	bl	8002708 <delay>
 800278e:	e012      	b.n	80027b6 <DS18B20_Write+0x7e>

		else  // if the bit is low
		{
			// write 0

			Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);
 8002790:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8002794:	480d      	ldr	r0, [pc, #52]	; (80027cc <DS18B20_Write+0x94>)
 8002796:	f7ff ff9a 	bl	80026ce <Set_Pin_Output>
			HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin LOW
 800279a:	2200      	movs	r2, #0
 800279c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027a0:	480a      	ldr	r0, [pc, #40]	; (80027cc <DS18B20_Write+0x94>)
 80027a2:	f001 fe82 	bl	80044aa <HAL_GPIO_WritePin>
			delay (50);  // wait for 60 us
 80027a6:	2032      	movs	r0, #50	; 0x32
 80027a8:	f7ff ffae 	bl	8002708 <delay>

			Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);
 80027ac:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027b0:	4806      	ldr	r0, [pc, #24]	; (80027cc <DS18B20_Write+0x94>)
 80027b2:	f7ff ff6f 	bl	8002694 <Set_Pin_Input>
	for (int i=0; i<8; i++)
 80027b6:	68fb      	ldr	r3, [r7, #12]
 80027b8:	3301      	adds	r3, #1
 80027ba:	60fb      	str	r3, [r7, #12]
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	2b07      	cmp	r3, #7
 80027c0:	ddc7      	ble.n	8002752 <DS18B20_Write+0x1a>
		}
	}
}
 80027c2:	bf00      	nop
 80027c4:	bf00      	nop
 80027c6:	3710      	adds	r7, #16
 80027c8:	46bd      	mov	sp, r7
 80027ca:	bd80      	pop	{r7, pc}
 80027cc:	40010c00 	.word	0x40010c00

080027d0 <DS18B20_Start>:
uint8_t DS18B20_Start (void)
{
 80027d0:	b580      	push	{r7, lr}
 80027d2:	b082      	sub	sp, #8
 80027d4:	af00      	add	r7, sp, #0
	uint8_t Response = 0;
 80027d6:	2300      	movs	r3, #0
 80027d8:	71fb      	strb	r3, [r7, #7]
	Set_Pin_Output(DS18B20_PORT, DS18B20_PIN);   // set the pin as output
 80027da:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027de:	4815      	ldr	r0, [pc, #84]	; (8002834 <DS18B20_Start+0x64>)
 80027e0:	f7ff ff75 	bl	80026ce <Set_Pin_Output>
	HAL_GPIO_WritePin (DS18B20_PORT, DS18B20_PIN, 0);  // pull the pin low
 80027e4:	2200      	movs	r2, #0
 80027e6:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027ea:	4812      	ldr	r0, [pc, #72]	; (8002834 <DS18B20_Start+0x64>)
 80027ec:	f001 fe5d 	bl	80044aa <HAL_GPIO_WritePin>
	delay (480);   // delay according to datasheet
 80027f0:	f44f 70f0 	mov.w	r0, #480	; 0x1e0
 80027f4:	f7ff ff88 	bl	8002708 <delay>

	Set_Pin_Input(DS18B20_PORT, DS18B20_PIN);    // set the pin as input
 80027f8:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80027fc:	480d      	ldr	r0, [pc, #52]	; (8002834 <DS18B20_Start+0x64>)
 80027fe:	f7ff ff49 	bl	8002694 <Set_Pin_Input>
	delay (80);    // delay according to datasheet
 8002802:	2050      	movs	r0, #80	; 0x50
 8002804:	f7ff ff80 	bl	8002708 <delay>

	if (!(HAL_GPIO_ReadPin (DS18B20_PORT, DS18B20_PIN))) Response = 1;    // if the pin is low i.e the presence pulse is detected
 8002808:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 800280c:	4809      	ldr	r0, [pc, #36]	; (8002834 <DS18B20_Start+0x64>)
 800280e:	f001 fe35 	bl	800447c <HAL_GPIO_ReadPin>
 8002812:	4603      	mov	r3, r0
 8002814:	2b00      	cmp	r3, #0
 8002816:	d102      	bne.n	800281e <DS18B20_Start+0x4e>
 8002818:	2301      	movs	r3, #1
 800281a:	71fb      	strb	r3, [r7, #7]
 800281c:	e001      	b.n	8002822 <DS18B20_Start+0x52>
	else Response = -1;
 800281e:	23ff      	movs	r3, #255	; 0xff
 8002820:	71fb      	strb	r3, [r7, #7]

	delay (400); // 480 us delay totally.
 8002822:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002826:	f7ff ff6f 	bl	8002708 <delay>

	return Response;
 800282a:	79fb      	ldrb	r3, [r7, #7]
}
 800282c:	4618      	mov	r0, r3
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}
 8002834:	40010c00 	.word	0x40010c00

08002838 <HAL_ADC_ConvCpltCallback>:

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc){
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
 800283e:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == hadc1.Instance){
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	681a      	ldr	r2, [r3, #0]
 8002844:	4b32      	ldr	r3, [pc, #200]	; (8002910 <HAL_ADC_ConvCpltCallback+0xd8>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	429a      	cmp	r2, r3
 800284a:	d15c      	bne.n	8002906 <HAL_ADC_ConvCpltCallback+0xce>
		Gb_suiCountReadAdc++;
 800284c:	4b31      	ldr	r3, [pc, #196]	; (8002914 <HAL_ADC_ConvCpltCallback+0xdc>)
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	3301      	adds	r3, #1
 8002852:	b29a      	uxth	r2, r3
 8002854:	4b2f      	ldr	r3, [pc, #188]	; (8002914 <HAL_ADC_ConvCpltCallback+0xdc>)
 8002856:	801a      	strh	r2, [r3, #0]
		Gb_suiAdcTemp[0] = Gb_suiAdcValue[0] - 1977;
 8002858:	4b2f      	ldr	r3, [pc, #188]	; (8002918 <HAL_ADC_ConvCpltCallback+0xe0>)
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	f2a3 73b9 	subw	r3, r3, #1977	; 0x7b9
 8002860:	b29b      	uxth	r3, r3
 8002862:	b21a      	sxth	r2, r3
 8002864:	4b2d      	ldr	r3, [pc, #180]	; (800291c <HAL_ADC_ConvCpltCallback+0xe4>)
 8002866:	801a      	strh	r2, [r3, #0]
		Gb_suiAdcTemp[1] = Gb_suiAdcValue[1] - 1977;
 8002868:	4b2b      	ldr	r3, [pc, #172]	; (8002918 <HAL_ADC_ConvCpltCallback+0xe0>)
 800286a:	885b      	ldrh	r3, [r3, #2]
 800286c:	f2a3 73b9 	subw	r3, r3, #1977	; 0x7b9
 8002870:	b29b      	uxth	r3, r3
 8002872:	b21a      	sxth	r2, r3
 8002874:	4b29      	ldr	r3, [pc, #164]	; (800291c <HAL_ADC_ConvCpltCallback+0xe4>)
 8002876:	805a      	strh	r2, [r3, #2]
		Gb_uiAdcSum[0] += (Gb_suiAdcTemp[0])*(Gb_suiAdcTemp[0]);
 8002878:	4b29      	ldr	r3, [pc, #164]	; (8002920 <HAL_ADC_ConvCpltCallback+0xe8>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	4a27      	ldr	r2, [pc, #156]	; (800291c <HAL_ADC_ConvCpltCallback+0xe4>)
 800287e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002882:	4611      	mov	r1, r2
 8002884:	4a25      	ldr	r2, [pc, #148]	; (800291c <HAL_ADC_ConvCpltCallback+0xe4>)
 8002886:	f9b2 2000 	ldrsh.w	r2, [r2]
 800288a:	fb01 f202 	mul.w	r2, r1, r2
 800288e:	4413      	add	r3, r2
 8002890:	4a23      	ldr	r2, [pc, #140]	; (8002920 <HAL_ADC_ConvCpltCallback+0xe8>)
 8002892:	6013      	str	r3, [r2, #0]
		Gb_uiAdcSum[1] += (Gb_suiAdcTemp[1])*(Gb_suiAdcTemp[1]);
 8002894:	4b22      	ldr	r3, [pc, #136]	; (8002920 <HAL_ADC_ConvCpltCallback+0xe8>)
 8002896:	685b      	ldr	r3, [r3, #4]
 8002898:	4a20      	ldr	r2, [pc, #128]	; (800291c <HAL_ADC_ConvCpltCallback+0xe4>)
 800289a:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800289e:	4611      	mov	r1, r2
 80028a0:	4a1e      	ldr	r2, [pc, #120]	; (800291c <HAL_ADC_ConvCpltCallback+0xe4>)
 80028a2:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80028a6:	fb01 f202 	mul.w	r2, r1, r2
 80028aa:	4413      	add	r3, r2
 80028ac:	4a1c      	ldr	r2, [pc, #112]	; (8002920 <HAL_ADC_ConvCpltCallback+0xe8>)
 80028ae:	6053      	str	r3, [r2, #4]

		if (Gb_suiAdcValue[2] > Gb_suiAdcMaxValue[0]){
 80028b0:	4b19      	ldr	r3, [pc, #100]	; (8002918 <HAL_ADC_ConvCpltCallback+0xe0>)
 80028b2:	889a      	ldrh	r2, [r3, #4]
 80028b4:	4b1b      	ldr	r3, [pc, #108]	; (8002924 <HAL_ADC_ConvCpltCallback+0xec>)
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	429a      	cmp	r2, r3
 80028ba:	d903      	bls.n	80028c4 <HAL_ADC_ConvCpltCallback+0x8c>
			Gb_suiAdcMaxValue[0] = Gb_suiAdcValue[2];
 80028bc:	4b16      	ldr	r3, [pc, #88]	; (8002918 <HAL_ADC_ConvCpltCallback+0xe0>)
 80028be:	889a      	ldrh	r2, [r3, #4]
 80028c0:	4b18      	ldr	r3, [pc, #96]	; (8002924 <HAL_ADC_ConvCpltCallback+0xec>)
 80028c2:	801a      	strh	r2, [r3, #0]
		}
		if (Gb_suiAdcValue[2] < Gb_suiAdcMinValue[0]){
 80028c4:	4b14      	ldr	r3, [pc, #80]	; (8002918 <HAL_ADC_ConvCpltCallback+0xe0>)
 80028c6:	889a      	ldrh	r2, [r3, #4]
 80028c8:	4b17      	ldr	r3, [pc, #92]	; (8002928 <HAL_ADC_ConvCpltCallback+0xf0>)
 80028ca:	881b      	ldrh	r3, [r3, #0]
 80028cc:	429a      	cmp	r2, r3
 80028ce:	d203      	bcs.n	80028d8 <HAL_ADC_ConvCpltCallback+0xa0>
			/*record the minimum sensor value*/
			Gb_suiAdcMinValue[0] = Gb_suiAdcValue[2];
 80028d0:	4b11      	ldr	r3, [pc, #68]	; (8002918 <HAL_ADC_ConvCpltCallback+0xe0>)
 80028d2:	889a      	ldrh	r2, [r3, #4]
 80028d4:	4b14      	ldr	r3, [pc, #80]	; (8002928 <HAL_ADC_ConvCpltCallback+0xf0>)
 80028d6:	801a      	strh	r2, [r3, #0]
		}

		if (Gb_suiAdcValue[3] > Gb_suiAdcMaxValue[1]){
 80028d8:	4b0f      	ldr	r3, [pc, #60]	; (8002918 <HAL_ADC_ConvCpltCallback+0xe0>)
 80028da:	88da      	ldrh	r2, [r3, #6]
 80028dc:	4b11      	ldr	r3, [pc, #68]	; (8002924 <HAL_ADC_ConvCpltCallback+0xec>)
 80028de:	885b      	ldrh	r3, [r3, #2]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d903      	bls.n	80028ec <HAL_ADC_ConvCpltCallback+0xb4>
			/*record the maximum sensor value*/
			Gb_suiAdcMaxValue[1] = Gb_suiAdcValue[3];
 80028e4:	4b0c      	ldr	r3, [pc, #48]	; (8002918 <HAL_ADC_ConvCpltCallback+0xe0>)
 80028e6:	88da      	ldrh	r2, [r3, #6]
 80028e8:	4b0e      	ldr	r3, [pc, #56]	; (8002924 <HAL_ADC_ConvCpltCallback+0xec>)
 80028ea:	805a      	strh	r2, [r3, #2]
		}
		if (Gb_suiAdcValue[3] < Gb_suiAdcMinValue[1]){
 80028ec:	4b0a      	ldr	r3, [pc, #40]	; (8002918 <HAL_ADC_ConvCpltCallback+0xe0>)
 80028ee:	88da      	ldrh	r2, [r3, #6]
 80028f0:	4b0d      	ldr	r3, [pc, #52]	; (8002928 <HAL_ADC_ConvCpltCallback+0xf0>)
 80028f2:	885b      	ldrh	r3, [r3, #2]
 80028f4:	429a      	cmp	r2, r3
 80028f6:	d203      	bcs.n	8002900 <HAL_ADC_ConvCpltCallback+0xc8>
			/*record the minimum sensor value*/
			Gb_suiAdcMinValue[1] = Gb_suiAdcValue[3];
 80028f8:	4b07      	ldr	r3, [pc, #28]	; (8002918 <HAL_ADC_ConvCpltCallback+0xe0>)
 80028fa:	88da      	ldrh	r2, [r3, #6]
 80028fc:	4b0a      	ldr	r3, [pc, #40]	; (8002928 <HAL_ADC_ConvCpltCallback+0xf0>)
 80028fe:	805a      	strh	r2, [r3, #2]
		}

		HAL_ADC_Start_IT(&hadc1);
 8002900:	4803      	ldr	r0, [pc, #12]	; (8002910 <HAL_ADC_ConvCpltCallback+0xd8>)
 8002902:	f000 fb97 	bl	8003034 <HAL_ADC_Start_IT>
	}
}
 8002906:	bf00      	nop
 8002908:	3708      	adds	r7, #8
 800290a:	46bd      	mov	sp, r7
 800290c:	bd80      	pop	{r7, pc}
 800290e:	bf00      	nop
 8002910:	20000adc 	.word	0x20000adc
 8002914:	20000bfc 	.word	0x20000bfc
 8002918:	20000bf4 	.word	0x20000bf4
 800291c:	20000c0c 	.word	0x20000c0c
 8002920:	20000c00 	.word	0x20000c00
 8002924:	20000c08 	.word	0x20000c08
 8002928:	20000200 	.word	0x20000200

0800292c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800292c:	b480      	push	{r7}
 800292e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002930:	b672      	cpsid	i
}
 8002932:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002934:	e7fe      	b.n	8002934 <Error_Handler+0x8>
	...

08002938 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002938:	b480      	push	{r7}
 800293a:	b085      	sub	sp, #20
 800293c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800293e:	4b15      	ldr	r3, [pc, #84]	; (8002994 <HAL_MspInit+0x5c>)
 8002940:	699b      	ldr	r3, [r3, #24]
 8002942:	4a14      	ldr	r2, [pc, #80]	; (8002994 <HAL_MspInit+0x5c>)
 8002944:	f043 0301 	orr.w	r3, r3, #1
 8002948:	6193      	str	r3, [r2, #24]
 800294a:	4b12      	ldr	r3, [pc, #72]	; (8002994 <HAL_MspInit+0x5c>)
 800294c:	699b      	ldr	r3, [r3, #24]
 800294e:	f003 0301 	and.w	r3, r3, #1
 8002952:	60bb      	str	r3, [r7, #8]
 8002954:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002956:	4b0f      	ldr	r3, [pc, #60]	; (8002994 <HAL_MspInit+0x5c>)
 8002958:	69db      	ldr	r3, [r3, #28]
 800295a:	4a0e      	ldr	r2, [pc, #56]	; (8002994 <HAL_MspInit+0x5c>)
 800295c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002960:	61d3      	str	r3, [r2, #28]
 8002962:	4b0c      	ldr	r3, [pc, #48]	; (8002994 <HAL_MspInit+0x5c>)
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800296a:	607b      	str	r3, [r7, #4]
 800296c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800296e:	4b0a      	ldr	r3, [pc, #40]	; (8002998 <HAL_MspInit+0x60>)
 8002970:	685b      	ldr	r3, [r3, #4]
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 800297a:	60fb      	str	r3, [r7, #12]
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002982:	60fb      	str	r3, [r7, #12]
 8002984:	4a04      	ldr	r2, [pc, #16]	; (8002998 <HAL_MspInit+0x60>)
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800298a:	bf00      	nop
 800298c:	3714      	adds	r7, #20
 800298e:	46bd      	mov	sp, r7
 8002990:	bc80      	pop	{r7}
 8002992:	4770      	bx	lr
 8002994:	40021000 	.word	0x40021000
 8002998:	40010000 	.word	0x40010000

0800299c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 800299c:	b580      	push	{r7, lr}
 800299e:	b088      	sub	sp, #32
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029a4:	f107 0310 	add.w	r3, r7, #16
 80029a8:	2200      	movs	r2, #0
 80029aa:	601a      	str	r2, [r3, #0]
 80029ac:	605a      	str	r2, [r3, #4]
 80029ae:	609a      	str	r2, [r3, #8]
 80029b0:	60da      	str	r2, [r3, #12]
  if(hadc->Instance==ADC1)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4a2c      	ldr	r2, [pc, #176]	; (8002a68 <HAL_ADC_MspInit+0xcc>)
 80029b8:	4293      	cmp	r3, r2
 80029ba:	d151      	bne.n	8002a60 <HAL_ADC_MspInit+0xc4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80029bc:	4b2b      	ldr	r3, [pc, #172]	; (8002a6c <HAL_ADC_MspInit+0xd0>)
 80029be:	699b      	ldr	r3, [r3, #24]
 80029c0:	4a2a      	ldr	r2, [pc, #168]	; (8002a6c <HAL_ADC_MspInit+0xd0>)
 80029c2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80029c6:	6193      	str	r3, [r2, #24]
 80029c8:	4b28      	ldr	r3, [pc, #160]	; (8002a6c <HAL_ADC_MspInit+0xd0>)
 80029ca:	699b      	ldr	r3, [r3, #24]
 80029cc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80029d0:	60fb      	str	r3, [r7, #12]
 80029d2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029d4:	4b25      	ldr	r3, [pc, #148]	; (8002a6c <HAL_ADC_MspInit+0xd0>)
 80029d6:	699b      	ldr	r3, [r3, #24]
 80029d8:	4a24      	ldr	r2, [pc, #144]	; (8002a6c <HAL_ADC_MspInit+0xd0>)
 80029da:	f043 0304 	orr.w	r3, r3, #4
 80029de:	6193      	str	r3, [r2, #24]
 80029e0:	4b22      	ldr	r3, [pc, #136]	; (8002a6c <HAL_ADC_MspInit+0xd0>)
 80029e2:	699b      	ldr	r3, [r3, #24]
 80029e4:	f003 0304 	and.w	r3, r3, #4
 80029e8:	60bb      	str	r3, [r7, #8]
 80029ea:	68bb      	ldr	r3, [r7, #8]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80029ec:	230f      	movs	r3, #15
 80029ee:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80029f0:	2303      	movs	r3, #3
 80029f2:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029f4:	f107 0310 	add.w	r3, r7, #16
 80029f8:	4619      	mov	r1, r3
 80029fa:	481d      	ldr	r0, [pc, #116]	; (8002a70 <HAL_ADC_MspInit+0xd4>)
 80029fc:	f001 fbba 	bl	8004174 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8002a00:	4b1c      	ldr	r3, [pc, #112]	; (8002a74 <HAL_ADC_MspInit+0xd8>)
 8002a02:	4a1d      	ldr	r2, [pc, #116]	; (8002a78 <HAL_ADC_MspInit+0xdc>)
 8002a04:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a06:	4b1b      	ldr	r3, [pc, #108]	; (8002a74 <HAL_ADC_MspInit+0xd8>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a0c:	4b19      	ldr	r3, [pc, #100]	; (8002a74 <HAL_ADC_MspInit+0xd8>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8002a12:	4b18      	ldr	r3, [pc, #96]	; (8002a74 <HAL_ADC_MspInit+0xd8>)
 8002a14:	2280      	movs	r2, #128	; 0x80
 8002a16:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8002a18:	4b16      	ldr	r3, [pc, #88]	; (8002a74 <HAL_ADC_MspInit+0xd8>)
 8002a1a:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002a1e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8002a20:	4b14      	ldr	r3, [pc, #80]	; (8002a74 <HAL_ADC_MspInit+0xd8>)
 8002a22:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a26:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8002a28:	4b12      	ldr	r3, [pc, #72]	; (8002a74 <HAL_ADC_MspInit+0xd8>)
 8002a2a:	2220      	movs	r2, #32
 8002a2c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8002a2e:	4b11      	ldr	r3, [pc, #68]	; (8002a74 <HAL_ADC_MspInit+0xd8>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8002a34:	480f      	ldr	r0, [pc, #60]	; (8002a74 <HAL_ADC_MspInit+0xd8>)
 8002a36:	f001 f8fb 	bl	8003c30 <HAL_DMA_Init>
 8002a3a:	4603      	mov	r3, r0
 8002a3c:	2b00      	cmp	r3, #0
 8002a3e:	d001      	beq.n	8002a44 <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 8002a40:	f7ff ff74 	bl	800292c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	4a0b      	ldr	r2, [pc, #44]	; (8002a74 <HAL_ADC_MspInit+0xd8>)
 8002a48:	621a      	str	r2, [r3, #32]
 8002a4a:	4a0a      	ldr	r2, [pc, #40]	; (8002a74 <HAL_ADC_MspInit+0xd8>)
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	6253      	str	r3, [r2, #36]	; 0x24

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 0, 0);
 8002a50:	2200      	movs	r2, #0
 8002a52:	2100      	movs	r1, #0
 8002a54:	2012      	movs	r0, #18
 8002a56:	f001 f8b4 	bl	8003bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8002a5a:	2012      	movs	r0, #18
 8002a5c:	f001 f8cd 	bl	8003bfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002a60:	bf00      	nop
 8002a62:	3720      	adds	r7, #32
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}
 8002a68:	40012400 	.word	0x40012400
 8002a6c:	40021000 	.word	0x40021000
 8002a70:	40010800 	.word	0x40010800
 8002a74:	20000b0c 	.word	0x20000b0c
 8002a78:	40020008 	.word	0x40020008

08002a7c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a8c:	d10b      	bne.n	8002aa6 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a8e:	4b08      	ldr	r3, [pc, #32]	; (8002ab0 <HAL_TIM_Base_MspInit+0x34>)
 8002a90:	69db      	ldr	r3, [r3, #28]
 8002a92:	4a07      	ldr	r2, [pc, #28]	; (8002ab0 <HAL_TIM_Base_MspInit+0x34>)
 8002a94:	f043 0301 	orr.w	r3, r3, #1
 8002a98:	61d3      	str	r3, [r2, #28]
 8002a9a:	4b05      	ldr	r3, [pc, #20]	; (8002ab0 <HAL_TIM_Base_MspInit+0x34>)
 8002a9c:	69db      	ldr	r3, [r3, #28]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	60fb      	str	r3, [r7, #12]
 8002aa4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8002aa6:	bf00      	nop
 8002aa8:	3714      	adds	r7, #20
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr
 8002ab0:	40021000 	.word	0x40021000

08002ab4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b088      	sub	sp, #32
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002abc:	f107 0310 	add.w	r3, r7, #16
 8002ac0:	2200      	movs	r2, #0
 8002ac2:	601a      	str	r2, [r3, #0]
 8002ac4:	605a      	str	r2, [r3, #4]
 8002ac6:	609a      	str	r2, [r3, #8]
 8002ac8:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4a20      	ldr	r2, [pc, #128]	; (8002b50 <HAL_UART_MspInit+0x9c>)
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d139      	bne.n	8002b48 <HAL_UART_MspInit+0x94>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ad4:	4b1f      	ldr	r3, [pc, #124]	; (8002b54 <HAL_UART_MspInit+0xa0>)
 8002ad6:	699b      	ldr	r3, [r3, #24]
 8002ad8:	4a1e      	ldr	r2, [pc, #120]	; (8002b54 <HAL_UART_MspInit+0xa0>)
 8002ada:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002ade:	6193      	str	r3, [r2, #24]
 8002ae0:	4b1c      	ldr	r3, [pc, #112]	; (8002b54 <HAL_UART_MspInit+0xa0>)
 8002ae2:	699b      	ldr	r3, [r3, #24]
 8002ae4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ae8:	60fb      	str	r3, [r7, #12]
 8002aea:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aec:	4b19      	ldr	r3, [pc, #100]	; (8002b54 <HAL_UART_MspInit+0xa0>)
 8002aee:	699b      	ldr	r3, [r3, #24]
 8002af0:	4a18      	ldr	r2, [pc, #96]	; (8002b54 <HAL_UART_MspInit+0xa0>)
 8002af2:	f043 0304 	orr.w	r3, r3, #4
 8002af6:	6193      	str	r3, [r2, #24]
 8002af8:	4b16      	ldr	r3, [pc, #88]	; (8002b54 <HAL_UART_MspInit+0xa0>)
 8002afa:	699b      	ldr	r3, [r3, #24]
 8002afc:	f003 0304 	and.w	r3, r3, #4
 8002b00:	60bb      	str	r3, [r7, #8]
 8002b02:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002b04:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b08:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b0a:	2302      	movs	r3, #2
 8002b0c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002b0e:	2303      	movs	r3, #3
 8002b10:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b12:	f107 0310 	add.w	r3, r7, #16
 8002b16:	4619      	mov	r1, r3
 8002b18:	480f      	ldr	r0, [pc, #60]	; (8002b58 <HAL_UART_MspInit+0xa4>)
 8002b1a:	f001 fb2b 	bl	8004174 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002b1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002b22:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002b24:	2300      	movs	r3, #0
 8002b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b28:	2300      	movs	r3, #0
 8002b2a:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b2c:	f107 0310 	add.w	r3, r7, #16
 8002b30:	4619      	mov	r1, r3
 8002b32:	4809      	ldr	r0, [pc, #36]	; (8002b58 <HAL_UART_MspInit+0xa4>)
 8002b34:	f001 fb1e 	bl	8004174 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002b38:	2200      	movs	r2, #0
 8002b3a:	2100      	movs	r1, #0
 8002b3c:	2025      	movs	r0, #37	; 0x25
 8002b3e:	f001 f840 	bl	8003bc2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002b42:	2025      	movs	r0, #37	; 0x25
 8002b44:	f001 f859 	bl	8003bfa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002b48:	bf00      	nop
 8002b4a:	3720      	adds	r7, #32
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40013800 	.word	0x40013800
 8002b54:	40021000 	.word	0x40021000
 8002b58:	40010800 	.word	0x40010800

08002b5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002b60:	e7fe      	b.n	8002b60 <NMI_Handler+0x4>

08002b62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002b62:	b480      	push	{r7}
 8002b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002b66:	e7fe      	b.n	8002b66 <HardFault_Handler+0x4>

08002b68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002b6c:	e7fe      	b.n	8002b6c <MemManage_Handler+0x4>

08002b6e <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002b6e:	b480      	push	{r7}
 8002b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002b72:	e7fe      	b.n	8002b72 <BusFault_Handler+0x4>

08002b74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002b74:	b480      	push	{r7}
 8002b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002b78:	e7fe      	b.n	8002b78 <UsageFault_Handler+0x4>

08002b7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002b7a:	b480      	push	{r7}
 8002b7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002b7e:	bf00      	nop
 8002b80:	46bd      	mov	sp, r7
 8002b82:	bc80      	pop	{r7}
 8002b84:	4770      	bx	lr

08002b86 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002b86:	b480      	push	{r7}
 8002b88:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002b8a:	bf00      	nop
 8002b8c:	46bd      	mov	sp, r7
 8002b8e:	bc80      	pop	{r7}
 8002b90:	4770      	bx	lr

08002b92 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002b92:	b480      	push	{r7}
 8002b94:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002b96:	bf00      	nop
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr

08002b9e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002b9e:	b580      	push	{r7, lr}
 8002ba0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ba2:	f000 f953 	bl	8002e4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ba6:	bf00      	nop
 8002ba8:	bd80      	pop	{r7, pc}
	...

08002bac <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002bac:	b580      	push	{r7, lr}
 8002bae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002bb0:	4802      	ldr	r0, [pc, #8]	; (8002bbc <DMA1_Channel1_IRQHandler+0x10>)
 8002bb2:	f001 f9ab 	bl	8003f0c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8002bb6:	bf00      	nop
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	20000b0c 	.word	0x20000b0c

08002bc0 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC1_2_IRQHandler(void)
{
 8002bc0:	b580      	push	{r7, lr}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002bc4:	4802      	ldr	r0, [pc, #8]	; (8002bd0 <ADC1_2_IRQHandler+0x10>)
 8002bc6:	f000 fc49 	bl	800345c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8002bca:	bf00      	nop
 8002bcc:	bd80      	pop	{r7, pc}
 8002bce:	bf00      	nop
 8002bd0:	20000adc 	.word	0x20000adc

08002bd4 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002bd4:	b580      	push	{r7, lr}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002bd8:	4802      	ldr	r0, [pc, #8]	; (8002be4 <USART1_IRQHandler+0x10>)
 8002bda:	f002 fcf5 	bl	80055c8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002bde:	bf00      	nop
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	20000b98 	.word	0x20000b98

08002be8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0
	return 1;
 8002bec:	2301      	movs	r3, #1
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bc80      	pop	{r7}
 8002bf4:	4770      	bx	lr

08002bf6 <_kill>:

int _kill(int pid, int sig)
{
 8002bf6:	b580      	push	{r7, lr}
 8002bf8:	b082      	sub	sp, #8
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
 8002bfe:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002c00:	f003 fa62 	bl	80060c8 <__errno>
 8002c04:	4603      	mov	r3, r0
 8002c06:	2216      	movs	r2, #22
 8002c08:	601a      	str	r2, [r3, #0]
	return -1;
 8002c0a:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c0e:	4618      	mov	r0, r3
 8002c10:	3708      	adds	r7, #8
 8002c12:	46bd      	mov	sp, r7
 8002c14:	bd80      	pop	{r7, pc}

08002c16 <_exit>:

void _exit (int status)
{
 8002c16:	b580      	push	{r7, lr}
 8002c18:	b082      	sub	sp, #8
 8002c1a:	af00      	add	r7, sp, #0
 8002c1c:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002c1e:	f04f 31ff 	mov.w	r1, #4294967295
 8002c22:	6878      	ldr	r0, [r7, #4]
 8002c24:	f7ff ffe7 	bl	8002bf6 <_kill>
	while (1) {}		/* Make sure we hang here */
 8002c28:	e7fe      	b.n	8002c28 <_exit+0x12>

08002c2a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b086      	sub	sp, #24
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	60f8      	str	r0, [r7, #12]
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c36:	2300      	movs	r3, #0
 8002c38:	617b      	str	r3, [r7, #20]
 8002c3a:	e00a      	b.n	8002c52 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002c3c:	f3af 8000 	nop.w
 8002c40:	4601      	mov	r1, r0
 8002c42:	68bb      	ldr	r3, [r7, #8]
 8002c44:	1c5a      	adds	r2, r3, #1
 8002c46:	60ba      	str	r2, [r7, #8]
 8002c48:	b2ca      	uxtb	r2, r1
 8002c4a:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c4c:	697b      	ldr	r3, [r7, #20]
 8002c4e:	3301      	adds	r3, #1
 8002c50:	617b      	str	r3, [r7, #20]
 8002c52:	697a      	ldr	r2, [r7, #20]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	429a      	cmp	r2, r3
 8002c58:	dbf0      	blt.n	8002c3c <_read+0x12>
	}

return len;
 8002c5a:	687b      	ldr	r3, [r7, #4]
}
 8002c5c:	4618      	mov	r0, r3
 8002c5e:	3718      	adds	r7, #24
 8002c60:	46bd      	mov	sp, r7
 8002c62:	bd80      	pop	{r7, pc}

08002c64 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b086      	sub	sp, #24
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	60f8      	str	r0, [r7, #12]
 8002c6c:	60b9      	str	r1, [r7, #8]
 8002c6e:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]
 8002c74:	e009      	b.n	8002c8a <_write+0x26>
	{
		__io_putchar(*ptr++);
 8002c76:	68bb      	ldr	r3, [r7, #8]
 8002c78:	1c5a      	adds	r2, r3, #1
 8002c7a:	60ba      	str	r2, [r7, #8]
 8002c7c:	781b      	ldrb	r3, [r3, #0]
 8002c7e:	4618      	mov	r0, r3
 8002c80:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c84:	697b      	ldr	r3, [r7, #20]
 8002c86:	3301      	adds	r3, #1
 8002c88:	617b      	str	r3, [r7, #20]
 8002c8a:	697a      	ldr	r2, [r7, #20]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	429a      	cmp	r2, r3
 8002c90:	dbf1      	blt.n	8002c76 <_write+0x12>
	}
	return len;
 8002c92:	687b      	ldr	r3, [r7, #4]
}
 8002c94:	4618      	mov	r0, r3
 8002c96:	3718      	adds	r7, #24
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}

08002c9c <_close>:

int _close(int file)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
	return -1;
 8002ca4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	370c      	adds	r7, #12
 8002cac:	46bd      	mov	sp, r7
 8002cae:	bc80      	pop	{r7}
 8002cb0:	4770      	bx	lr

08002cb2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002cb2:	b480      	push	{r7}
 8002cb4:	b083      	sub	sp, #12
 8002cb6:	af00      	add	r7, sp, #0
 8002cb8:	6078      	str	r0, [r7, #4]
 8002cba:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002cbc:	683b      	ldr	r3, [r7, #0]
 8002cbe:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002cc2:	605a      	str	r2, [r3, #4]
	return 0;
 8002cc4:	2300      	movs	r3, #0
}
 8002cc6:	4618      	mov	r0, r3
 8002cc8:	370c      	adds	r7, #12
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	bc80      	pop	{r7}
 8002cce:	4770      	bx	lr

08002cd0 <_isatty>:

int _isatty(int file)
{
 8002cd0:	b480      	push	{r7}
 8002cd2:	b083      	sub	sp, #12
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	6078      	str	r0, [r7, #4]
	return 1;
 8002cd8:	2301      	movs	r3, #1
}
 8002cda:	4618      	mov	r0, r3
 8002cdc:	370c      	adds	r7, #12
 8002cde:	46bd      	mov	sp, r7
 8002ce0:	bc80      	pop	{r7}
 8002ce2:	4770      	bx	lr

08002ce4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b085      	sub	sp, #20
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	60f8      	str	r0, [r7, #12]
 8002cec:	60b9      	str	r1, [r7, #8]
 8002cee:	607a      	str	r2, [r7, #4]
	return 0;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	3714      	adds	r7, #20
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	bc80      	pop	{r7}
 8002cfa:	4770      	bx	lr

08002cfc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b086      	sub	sp, #24
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002d04:	4a14      	ldr	r2, [pc, #80]	; (8002d58 <_sbrk+0x5c>)
 8002d06:	4b15      	ldr	r3, [pc, #84]	; (8002d5c <_sbrk+0x60>)
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002d0c:	697b      	ldr	r3, [r7, #20]
 8002d0e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002d10:	4b13      	ldr	r3, [pc, #76]	; (8002d60 <_sbrk+0x64>)
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	2b00      	cmp	r3, #0
 8002d16:	d102      	bne.n	8002d1e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002d18:	4b11      	ldr	r3, [pc, #68]	; (8002d60 <_sbrk+0x64>)
 8002d1a:	4a12      	ldr	r2, [pc, #72]	; (8002d64 <_sbrk+0x68>)
 8002d1c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002d1e:	4b10      	ldr	r3, [pc, #64]	; (8002d60 <_sbrk+0x64>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4413      	add	r3, r2
 8002d26:	693a      	ldr	r2, [r7, #16]
 8002d28:	429a      	cmp	r2, r3
 8002d2a:	d207      	bcs.n	8002d3c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d2c:	f003 f9cc 	bl	80060c8 <__errno>
 8002d30:	4603      	mov	r3, r0
 8002d32:	220c      	movs	r2, #12
 8002d34:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d36:	f04f 33ff 	mov.w	r3, #4294967295
 8002d3a:	e009      	b.n	8002d50 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d3c:	4b08      	ldr	r3, [pc, #32]	; (8002d60 <_sbrk+0x64>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d42:	4b07      	ldr	r3, [pc, #28]	; (8002d60 <_sbrk+0x64>)
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	4413      	add	r3, r2
 8002d4a:	4a05      	ldr	r2, [pc, #20]	; (8002d60 <_sbrk+0x64>)
 8002d4c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
}
 8002d50:	4618      	mov	r0, r3
 8002d52:	3718      	adds	r7, #24
 8002d54:	46bd      	mov	sp, r7
 8002d56:	bd80      	pop	{r7, pc}
 8002d58:	20005000 	.word	0x20005000
 8002d5c:	00000400 	.word	0x00000400
 8002d60:	20000c28 	.word	0x20000c28
 8002d64:	20000c40 	.word	0x20000c40

08002d68 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002d68:	b480      	push	{r7}
 8002d6a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d6c:	bf00      	nop
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bc80      	pop	{r7}
 8002d72:	4770      	bx	lr

08002d74 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002d74:	f7ff fff8 	bl	8002d68 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002d78:	480b      	ldr	r0, [pc, #44]	; (8002da8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002d7a:	490c      	ldr	r1, [pc, #48]	; (8002dac <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002d7c:	4a0c      	ldr	r2, [pc, #48]	; (8002db0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002d7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d80:	e002      	b.n	8002d88 <LoopCopyDataInit>

08002d82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d86:	3304      	adds	r3, #4

08002d88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d8c:	d3f9      	bcc.n	8002d82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d8e:	4a09      	ldr	r2, [pc, #36]	; (8002db4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002d90:	4c09      	ldr	r4, [pc, #36]	; (8002db8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002d92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d94:	e001      	b.n	8002d9a <LoopFillZerobss>

08002d96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d98:	3204      	adds	r2, #4

08002d9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d9c:	d3fb      	bcc.n	8002d96 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d9e:	f003 f999 	bl	80060d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002da2:	f7ff f805 	bl	8001db0 <main>
  bx lr
 8002da6:	4770      	bx	lr
  ldr r0, =_sdata
 8002da8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002dac:	20000274 	.word	0x20000274
  ldr r2, =_sidata
 8002db0:	08007538 	.word	0x08007538
  ldr r2, =_sbss
 8002db4:	20000274 	.word	0x20000274
  ldr r4, =_ebss
 8002db8:	20000c40 	.word	0x20000c40

08002dbc <CAN1_RX1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002dbc:	e7fe      	b.n	8002dbc <CAN1_RX1_IRQHandler>
	...

08002dc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dc4:	4b08      	ldr	r3, [pc, #32]	; (8002de8 <HAL_Init+0x28>)
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a07      	ldr	r2, [pc, #28]	; (8002de8 <HAL_Init+0x28>)
 8002dca:	f043 0310 	orr.w	r3, r3, #16
 8002dce:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002dd0:	2003      	movs	r0, #3
 8002dd2:	f000 feeb 	bl	8003bac <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dd6:	200f      	movs	r0, #15
 8002dd8:	f000 f808 	bl	8002dec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ddc:	f7ff fdac 	bl	8002938 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002de0:	2300      	movs	r3, #0
}
 8002de2:	4618      	mov	r0, r3
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40022000 	.word	0x40022000

08002dec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b082      	sub	sp, #8
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002df4:	4b12      	ldr	r3, [pc, #72]	; (8002e40 <HAL_InitTick+0x54>)
 8002df6:	681a      	ldr	r2, [r3, #0]
 8002df8:	4b12      	ldr	r3, [pc, #72]	; (8002e44 <HAL_InitTick+0x58>)
 8002dfa:	781b      	ldrb	r3, [r3, #0]
 8002dfc:	4619      	mov	r1, r3
 8002dfe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e02:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e06:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e0a:	4618      	mov	r0, r3
 8002e0c:	f000 ff03 	bl	8003c16 <HAL_SYSTICK_Config>
 8002e10:	4603      	mov	r3, r0
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d001      	beq.n	8002e1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e16:	2301      	movs	r3, #1
 8002e18:	e00e      	b.n	8002e38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	2b0f      	cmp	r3, #15
 8002e1e:	d80a      	bhi.n	8002e36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e20:	2200      	movs	r2, #0
 8002e22:	6879      	ldr	r1, [r7, #4]
 8002e24:	f04f 30ff 	mov.w	r0, #4294967295
 8002e28:	f000 fecb 	bl	8003bc2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e2c:	4a06      	ldr	r2, [pc, #24]	; (8002e48 <HAL_InitTick+0x5c>)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e32:	2300      	movs	r3, #0
 8002e34:	e000      	b.n	8002e38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e36:	2301      	movs	r3, #1
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3708      	adds	r7, #8
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}
 8002e40:	20000204 	.word	0x20000204
 8002e44:	2000020c 	.word	0x2000020c
 8002e48:	20000208 	.word	0x20000208

08002e4c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e50:	4b05      	ldr	r3, [pc, #20]	; (8002e68 <HAL_IncTick+0x1c>)
 8002e52:	781b      	ldrb	r3, [r3, #0]
 8002e54:	461a      	mov	r2, r3
 8002e56:	4b05      	ldr	r3, [pc, #20]	; (8002e6c <HAL_IncTick+0x20>)
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4413      	add	r3, r2
 8002e5c:	4a03      	ldr	r2, [pc, #12]	; (8002e6c <HAL_IncTick+0x20>)
 8002e5e:	6013      	str	r3, [r2, #0]
}
 8002e60:	bf00      	nop
 8002e62:	46bd      	mov	sp, r7
 8002e64:	bc80      	pop	{r7}
 8002e66:	4770      	bx	lr
 8002e68:	2000020c 	.word	0x2000020c
 8002e6c:	20000c2c 	.word	0x20000c2c

08002e70 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e70:	b480      	push	{r7}
 8002e72:	af00      	add	r7, sp, #0
  return uwTick;
 8002e74:	4b02      	ldr	r3, [pc, #8]	; (8002e80 <HAL_GetTick+0x10>)
 8002e76:	681b      	ldr	r3, [r3, #0]
}
 8002e78:	4618      	mov	r0, r3
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bc80      	pop	{r7}
 8002e7e:	4770      	bx	lr
 8002e80:	20000c2c 	.word	0x20000c2c

08002e84 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e84:	b580      	push	{r7, lr}
 8002e86:	b086      	sub	sp, #24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002e8c:	2300      	movs	r3, #0
 8002e8e:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8002e90:	2300      	movs	r3, #0
 8002e92:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8002e94:	2300      	movs	r3, #0
 8002e96:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8002e98:	2300      	movs	r3, #0
 8002e9a:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d101      	bne.n	8002ea6 <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e0be      	b.n	8003024 <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	689b      	ldr	r3, [r3, #8]
 8002eaa:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d109      	bne.n	8002ec8 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002ec2:	6878      	ldr	r0, [r7, #4]
 8002ec4:	f7ff fd6a 	bl	800299c <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8002ec8:	6878      	ldr	r0, [r7, #4]
 8002eca:	f000 fcf3 	bl	80038b4 <ADC_ConversionStop_Disable>
 8002ece:	4603      	mov	r3, r0
 8002ed0:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ed6:	f003 0310 	and.w	r3, r3, #16
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	f040 8099 	bne.w	8003012 <HAL_ADC_Init+0x18e>
 8002ee0:	7dfb      	ldrb	r3, [r7, #23]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	f040 8095 	bne.w	8003012 <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002eec:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ef0:	f023 0302 	bic.w	r3, r3, #2
 8002ef4:	f043 0202 	orr.w	r2, r3, #2
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	629a      	str	r2, [r3, #40]	; 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f04:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	7b1b      	ldrb	r3, [r3, #12]
 8002f0a:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8002f0c:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8002f0e:	68ba      	ldr	r2, [r7, #8]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	689b      	ldr	r3, [r3, #8]
 8002f18:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002f1c:	d003      	beq.n	8002f26 <HAL_ADC_Init+0xa2>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d102      	bne.n	8002f2c <HAL_ADC_Init+0xa8>
 8002f26:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f2a:	e000      	b.n	8002f2e <HAL_ADC_Init+0xaa>
 8002f2c:	2300      	movs	r3, #0
 8002f2e:	693a      	ldr	r2, [r7, #16]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	7d1b      	ldrb	r3, [r3, #20]
 8002f38:	2b01      	cmp	r3, #1
 8002f3a:	d119      	bne.n	8002f70 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	7b1b      	ldrb	r3, [r3, #12]
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d109      	bne.n	8002f58 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	699b      	ldr	r3, [r3, #24]
 8002f48:	3b01      	subs	r3, #1
 8002f4a:	035a      	lsls	r2, r3, #13
 8002f4c:	693b      	ldr	r3, [r7, #16]
 8002f4e:	4313      	orrs	r3, r2
 8002f50:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8002f54:	613b      	str	r3, [r7, #16]
 8002f56:	e00b      	b.n	8002f70 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5c:	f043 0220 	orr.w	r2, r3, #32
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	629a      	str	r2, [r3, #40]	; 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f68:	f043 0201 	orr.w	r2, r3, #1
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	62da      	str	r2, [r3, #44]	; 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f423 4169 	bic.w	r1, r3, #59648	; 0xe900
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	430a      	orrs	r2, r1
 8002f82:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	689a      	ldr	r2, [r3, #8]
 8002f8a:	4b28      	ldr	r3, [pc, #160]	; (800302c <HAL_ADC_Init+0x1a8>)
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	687a      	ldr	r2, [r7, #4]
 8002f90:	6812      	ldr	r2, [r2, #0]
 8002f92:	68b9      	ldr	r1, [r7, #8]
 8002f94:	430b      	orrs	r3, r1
 8002f96:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	689b      	ldr	r3, [r3, #8]
 8002f9c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002fa0:	d003      	beq.n	8002faa <HAL_ADC_Init+0x126>
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	689b      	ldr	r3, [r3, #8]
 8002fa6:	2b01      	cmp	r3, #1
 8002fa8:	d104      	bne.n	8002fb4 <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	691b      	ldr	r3, [r3, #16]
 8002fae:	3b01      	subs	r3, #1
 8002fb0:	051b      	lsls	r3, r3, #20
 8002fb2:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002fba:	f423 0170 	bic.w	r1, r3, #15728640	; 0xf00000
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	68fa      	ldr	r2, [r7, #12]
 8002fc4:	430a      	orrs	r2, r1
 8002fc6:	62da      	str	r2, [r3, #44]	; 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	689a      	ldr	r2, [r3, #8]
 8002fce:	4b18      	ldr	r3, [pc, #96]	; (8003030 <HAL_ADC_Init+0x1ac>)
 8002fd0:	4013      	ands	r3, r2
 8002fd2:	68ba      	ldr	r2, [r7, #8]
 8002fd4:	429a      	cmp	r2, r3
 8002fd6:	d10b      	bne.n	8002ff0 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	2200      	movs	r2, #0
 8002fdc:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fe2:	f023 0303 	bic.w	r3, r3, #3
 8002fe6:	f043 0201 	orr.w	r2, r3, #1
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	629a      	str	r2, [r3, #40]	; 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8002fee:	e018      	b.n	8003022 <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ff4:	f023 0312 	bic.w	r3, r3, #18
 8002ff8:	f043 0210 	orr.w	r2, r3, #16
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003004:	f043 0201 	orr.w	r2, r3, #1
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      tmp_hal_status = HAL_ERROR;
 800300c:	2301      	movs	r3, #1
 800300e:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8003010:	e007      	b.n	8003022 <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003016:	f043 0210 	orr.w	r2, r3, #16
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	629a      	str	r2, [r3, #40]	; 0x28
        
    tmp_hal_status = HAL_ERROR;
 800301e:	2301      	movs	r3, #1
 8003020:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8003022:	7dfb      	ldrb	r3, [r7, #23]
}
 8003024:	4618      	mov	r0, r3
 8003026:	3718      	adds	r7, #24
 8003028:	46bd      	mov	sp, r7
 800302a:	bd80      	pop	{r7, pc}
 800302c:	ffe1f7fd 	.word	0xffe1f7fd
 8003030:	ff1f0efe 	.word	0xff1f0efe

08003034 <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800303c:	2300      	movs	r3, #0
 800303e:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003046:	2b01      	cmp	r3, #1
 8003048:	d101      	bne.n	800304e <HAL_ADC_Start_IT+0x1a>
 800304a:	2302      	movs	r3, #2
 800304c:	e0a0      	b.n	8003190 <HAL_ADC_Start_IT+0x15c>
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 fbd2 	bl	8003800 <ADC_Enable>
 800305c:	4603      	mov	r3, r0
 800305e:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8003060:	7bfb      	ldrb	r3, [r7, #15]
 8003062:	2b00      	cmp	r3, #0
 8003064:	f040 808f 	bne.w	8003186 <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800306c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8003070:	f023 0301 	bic.w	r3, r3, #1
 8003074:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a45      	ldr	r2, [pc, #276]	; (8003198 <HAL_ADC_Start_IT+0x164>)
 8003082:	4293      	cmp	r3, r2
 8003084:	d105      	bne.n	8003092 <HAL_ADC_Start_IT+0x5e>
 8003086:	4b45      	ldr	r3, [pc, #276]	; (800319c <HAL_ADC_Start_IT+0x168>)
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 800308e:	2b00      	cmp	r3, #0
 8003090:	d115      	bne.n	80030be <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003096:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	d026      	beq.n	80030fa <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030b0:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030b4:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80030bc:	e01d      	b.n	80030fa <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	681b      	ldr	r3, [r3, #0]
 80030ce:	4a33      	ldr	r2, [pc, #204]	; (800319c <HAL_ADC_Start_IT+0x168>)
 80030d0:	4293      	cmp	r3, r2
 80030d2:	d004      	beq.n	80030de <HAL_ADC_Start_IT+0xaa>
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	4a2f      	ldr	r2, [pc, #188]	; (8003198 <HAL_ADC_Start_IT+0x164>)
 80030da:	4293      	cmp	r3, r2
 80030dc:	d10d      	bne.n	80030fa <HAL_ADC_Start_IT+0xc6>
 80030de:	4b2f      	ldr	r3, [pc, #188]	; (800319c <HAL_ADC_Start_IT+0x168>)
 80030e0:	685b      	ldr	r3, [r3, #4]
 80030e2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d007      	beq.n	80030fa <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030ee:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80030f2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003102:	2b00      	cmp	r3, #0
 8003104:	d006      	beq.n	8003114 <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800310a:	f023 0206 	bic.w	r2, r3, #6
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	62da      	str	r2, [r3, #44]	; 0x2c
 8003112:	e002      	b.n	800311a <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2200      	movs	r2, #0
 8003118:	62da      	str	r2, [r3, #44]	; 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2200      	movs	r2, #0
 800311e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	681b      	ldr	r3, [r3, #0]
 8003126:	f06f 0202 	mvn.w	r2, #2
 800312a:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	685a      	ldr	r2, [r3, #4]
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	f042 0220 	orr.w	r2, r2, #32
 800313a:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003146:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800314a:	d113      	bne.n	8003174 <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8003150:	4a11      	ldr	r2, [pc, #68]	; (8003198 <HAL_ADC_Start_IT+0x164>)
 8003152:	4293      	cmp	r3, r2
 8003154:	d105      	bne.n	8003162 <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8003156:	4b11      	ldr	r3, [pc, #68]	; (800319c <HAL_ADC_Start_IT+0x168>)
 8003158:	685b      	ldr	r3, [r3, #4]
 800315a:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 800315e:	2b00      	cmp	r3, #0
 8003160:	d108      	bne.n	8003174 <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	689a      	ldr	r2, [r3, #8]
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003170:	609a      	str	r2, [r3, #8]
 8003172:	e00c      	b.n	800318e <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	689a      	ldr	r2, [r3, #8]
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003182:	609a      	str	r2, [r3, #8]
 8003184:	e003      	b.n	800318e <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	2200      	movs	r2, #0
 800318a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 800318e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003190:	4618      	mov	r0, r3
 8003192:	3710      	adds	r7, #16
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}
 8003198:	40012800 	.word	0x40012800
 800319c:	40012400 	.word	0x40012400

080031a0 <HAL_ADC_Stop_IT>:
  *         end-of-conversion, disable ADC peripheral.
  * @param  hadc: ADC handle
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Stop_IT(ADC_HandleTypeDef* hadc)
{
 80031a0:	b580      	push	{r7, lr}
 80031a2:	b084      	sub	sp, #16
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80031a8:	2300      	movs	r3, #0
 80031aa:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80031b2:	2b01      	cmp	r3, #1
 80031b4:	d101      	bne.n	80031ba <HAL_ADC_Stop_IT+0x1a>
 80031b6:	2302      	movs	r3, #2
 80031b8:	e022      	b.n	8003200 <HAL_ADC_Stop_IT+0x60>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80031c2:	6878      	ldr	r0, [r7, #4]
 80031c4:	f000 fb76 	bl	80038b4 <ADC_ConversionStop_Disable>
 80031c8:	4603      	mov	r3, r0
 80031ca:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80031cc:	7bfb      	ldrb	r3, [r7, #15]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d111      	bne.n	80031f6 <HAL_ADC_Stop_IT+0x56>
  {
    /* Disable ADC end of conversion interrupt for regular group */
    __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	685a      	ldr	r2, [r3, #4]
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f022 0220 	bic.w	r2, r2, #32
 80031e0:	605a      	str	r2, [r3, #4]
    
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80031ea:	f023 0301 	bic.w	r3, r3, #1
 80031ee:	f043 0201 	orr.w	r2, r3, #1
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	629a      	str	r2, [r3, #40]	; 0x28
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	2200      	movs	r2, #0
 80031fa:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80031fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8003200:	4618      	mov	r0, r3
 8003202:	3710      	adds	r7, #16
 8003204:	46bd      	mov	sp, r7
 8003206:	bd80      	pop	{r7, pc}

08003208 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b086      	sub	sp, #24
 800320c:	af00      	add	r7, sp, #0
 800320e:	60f8      	str	r0, [r7, #12]
 8003210:	60b9      	str	r1, [r7, #8]
 8003212:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003214:	2300      	movs	r3, #0
 8003216:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	4a64      	ldr	r2, [pc, #400]	; (80033b0 <HAL_ADC_Start_DMA+0x1a8>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d004      	beq.n	800322c <HAL_ADC_Start_DMA+0x24>
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a63      	ldr	r2, [pc, #396]	; (80033b4 <HAL_ADC_Start_DMA+0x1ac>)
 8003228:	4293      	cmp	r3, r2
 800322a:	d106      	bne.n	800323a <HAL_ADC_Start_DMA+0x32>
 800322c:	4b60      	ldr	r3, [pc, #384]	; (80033b0 <HAL_ADC_Start_DMA+0x1a8>)
 800322e:	685b      	ldr	r3, [r3, #4]
 8003230:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003234:	2b00      	cmp	r3, #0
 8003236:	f040 80b3 	bne.w	80033a0 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003240:	2b01      	cmp	r3, #1
 8003242:	d101      	bne.n	8003248 <HAL_ADC_Start_DMA+0x40>
 8003244:	2302      	movs	r3, #2
 8003246:	e0ae      	b.n	80033a6 <HAL_ADC_Start_DMA+0x19e>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	2201      	movs	r2, #1
 800324c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8003250:	68f8      	ldr	r0, [r7, #12]
 8003252:	f000 fad5 	bl	8003800 <ADC_Enable>
 8003256:	4603      	mov	r3, r0
 8003258:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800325a:	7dfb      	ldrb	r3, [r7, #23]
 800325c:	2b00      	cmp	r3, #0
 800325e:	f040 809a 	bne.w	8003396 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003266:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 800326a:	f023 0301 	bic.w	r3, r3, #1
 800326e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	629a      	str	r2, [r3, #40]	; 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4a4e      	ldr	r2, [pc, #312]	; (80033b4 <HAL_ADC_Start_DMA+0x1ac>)
 800327c:	4293      	cmp	r3, r2
 800327e:	d105      	bne.n	800328c <HAL_ADC_Start_DMA+0x84>
 8003280:	4b4b      	ldr	r3, [pc, #300]	; (80033b0 <HAL_ADC_Start_DMA+0x1a8>)
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	f403 2370 	and.w	r3, r3, #983040	; 0xf0000
 8003288:	2b00      	cmp	r3, #0
 800328a:	d115      	bne.n	80032b8 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003290:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	685b      	ldr	r3, [r3, #4]
 800329e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d026      	beq.n	80032f4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032aa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032ae:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	629a      	str	r2, [r3, #40]	; 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80032b6:	e01d      	b.n	80032f4 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032bc:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4a39      	ldr	r2, [pc, #228]	; (80033b0 <HAL_ADC_Start_DMA+0x1a8>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d004      	beq.n	80032d8 <HAL_ADC_Start_DMA+0xd0>
 80032ce:	68fb      	ldr	r3, [r7, #12]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	4a38      	ldr	r2, [pc, #224]	; (80033b4 <HAL_ADC_Start_DMA+0x1ac>)
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d10d      	bne.n	80032f4 <HAL_ADC_Start_DMA+0xec>
 80032d8:	4b35      	ldr	r3, [pc, #212]	; (80033b0 <HAL_ADC_Start_DMA+0x1a8>)
 80032da:	685b      	ldr	r3, [r3, #4]
 80032dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80032e0:	2b00      	cmp	r3, #0
 80032e2:	d007      	beq.n	80032f4 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80032e4:	68fb      	ldr	r3, [r7, #12]
 80032e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80032ec:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80032f0:	68fb      	ldr	r3, [r7, #12]
 80032f2:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032f8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d006      	beq.n	800330e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003304:	f023 0206 	bic.w	r2, r3, #6
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	62da      	str	r2, [r3, #44]	; 0x2c
 800330c:	e002      	b.n	8003314 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2200      	movs	r2, #0
 8003312:	62da      	str	r2, [r3, #44]	; 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8003314:	68fb      	ldr	r3, [r7, #12]
 8003316:	2200      	movs	r2, #0
 8003318:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6a1b      	ldr	r3, [r3, #32]
 8003320:	4a25      	ldr	r2, [pc, #148]	; (80033b8 <HAL_ADC_Start_DMA+0x1b0>)
 8003322:	629a      	str	r2, [r3, #40]	; 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	6a1b      	ldr	r3, [r3, #32]
 8003328:	4a24      	ldr	r2, [pc, #144]	; (80033bc <HAL_ADC_Start_DMA+0x1b4>)
 800332a:	62da      	str	r2, [r3, #44]	; 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	6a1b      	ldr	r3, [r3, #32]
 8003330:	4a23      	ldr	r2, [pc, #140]	; (80033c0 <HAL_ADC_Start_DMA+0x1b8>)
 8003332:	631a      	str	r2, [r3, #48]	; 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f06f 0202 	mvn.w	r2, #2
 800333c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	689a      	ldr	r2, [r3, #8]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800334c:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	6a18      	ldr	r0, [r3, #32]
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	334c      	adds	r3, #76	; 0x4c
 8003358:	4619      	mov	r1, r3
 800335a:	68ba      	ldr	r2, [r7, #8]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	f000 fcc1 	bl	8003ce4 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 800336c:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003370:	d108      	bne.n	8003384 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	689a      	ldr	r2, [r3, #8]
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	f442 02a0 	orr.w	r2, r2, #5242880	; 0x500000
 8003380:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003382:	e00f      	b.n	80033a4 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	689a      	ldr	r2, [r3, #8]
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 8003392:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8003394:	e006      	b.n	80033a4 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003396:	68fb      	ldr	r3, [r7, #12]
 8003398:	2200      	movs	r2, #0
 800339a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    if (tmp_hal_status == HAL_OK)
 800339e:	e001      	b.n	80033a4 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 80033a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3718      	adds	r7, #24
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}
 80033ae:	bf00      	nop
 80033b0:	40012400 	.word	0x40012400
 80033b4:	40012800 	.word	0x40012800
 80033b8:	08003937 	.word	0x08003937
 80033bc:	080039b3 	.word	0x080039b3
 80033c0:	080039cf 	.word	0x080039cf

080033c4 <HAL_ADC_Stop_DMA>:
  *         on devices) have DMA capability.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop_DMA(ADC_HandleTypeDef* hadc)
{
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80033cc:	2300      	movs	r3, #0
 80033ce:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
     
  /* Process locked */
  __HAL_LOCK(hadc);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80033d6:	2b01      	cmp	r3, #1
 80033d8:	d101      	bne.n	80033de <HAL_ADC_Stop_DMA+0x1a>
 80033da:	2302      	movs	r3, #2
 80033dc:	e03a      	b.n	8003454 <HAL_ADC_Stop_DMA+0x90>
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2201      	movs	r2, #1
 80033e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 80033e6:	6878      	ldr	r0, [r7, #4]
 80033e8:	f000 fa64 	bl	80038b4 <ADC_ConversionStop_Disable>
 80033ec:	4603      	mov	r3, r0
 80033ee:	73fb      	strb	r3, [r7, #15]
  
  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 80033f0:	7bfb      	ldrb	r3, [r7, #15]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d129      	bne.n	800344a <HAL_ADC_Stop_DMA+0x86>
  {
    /* Disable ADC DMA mode */
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	689a      	ldr	r2, [r3, #8]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003404:	609a      	str	r2, [r3, #8]
    
    /* Disable the DMA channel (in case of DMA in circular mode or stop while */
    /* DMA transfer is on going)                                              */
    if (hadc->DMA_Handle->State == HAL_DMA_STATE_BUSY)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6a1b      	ldr	r3, [r3, #32]
 800340a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 800340e:	b2db      	uxtb	r3, r3
 8003410:	2b02      	cmp	r3, #2
 8003412:	d11a      	bne.n	800344a <HAL_ADC_Stop_DMA+0x86>
    {
      tmp_hal_status = HAL_DMA_Abort(hadc->DMA_Handle);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	6a1b      	ldr	r3, [r3, #32]
 8003418:	4618      	mov	r0, r3
 800341a:	f000 fcc3 	bl	8003da4 <HAL_DMA_Abort>
 800341e:	4603      	mov	r3, r0
 8003420:	73fb      	strb	r3, [r7, #15]
      
      /* Check if DMA channel effectively disabled */
      if (tmp_hal_status == HAL_OK)
 8003422:	7bfb      	ldrb	r3, [r7, #15]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d10a      	bne.n	800343e <HAL_ADC_Stop_DMA+0x7a>
      {
        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800342c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003430:	f023 0301 	bic.w	r3, r3, #1
 8003434:	f043 0201 	orr.w	r2, r3, #1
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	629a      	str	r2, [r3, #40]	; 0x28
 800343c:	e005      	b.n	800344a <HAL_ADC_Stop_DMA+0x86>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003442:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	629a      	str	r2, [r3, #40]	; 0x28
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
    
  /* Return function status */
  return tmp_hal_status;
 8003452:	7bfb      	ldrb	r3, [r7, #15]
}
 8003454:	4618      	mov	r0, r3
 8003456:	3710      	adds	r7, #16
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}

0800345c <HAL_ADC_IRQHandler>:
  * @brief  Handles ADC interrupt request  
  * @param  hadc: ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef* hadc)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t tmp_sr = hadc->Instance->SR;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_cr1 = hadc->Instance->CR1;
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	60bb      	str	r3, [r7, #8]
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
  
  
  /* ========== Check End of Conversion flag for regular group ========== */
  if((tmp_cr1 & ADC_IT_EOC) == ADC_IT_EOC)
 8003474:	68bb      	ldr	r3, [r7, #8]
 8003476:	f003 0320 	and.w	r3, r3, #32
 800347a:	2b00      	cmp	r3, #0
 800347c:	d03e      	beq.n	80034fc <HAL_ADC_IRQHandler+0xa0>
  {
    if((tmp_sr & ADC_FLAG_EOC) == ADC_FLAG_EOC)
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	f003 0302 	and.w	r3, r3, #2
 8003484:	2b00      	cmp	r3, #0
 8003486:	d039      	beq.n	80034fc <HAL_ADC_IRQHandler+0xa0>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800348c:	f003 0310 	and.w	r3, r3, #16
 8003490:	2b00      	cmp	r3, #0
 8003492:	d105      	bne.n	80034a0 <HAL_ADC_IRQHandler+0x44>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC); 
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003498:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	629a      	str	r2, [r3, #40]	; 0x28
      /* Determine whether any further conversion upcoming on group regular   */
      /* by external trigger, continuous mode or scan sequence on going.      */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	689b      	ldr	r3, [r3, #8]
 80034a6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 80034aa:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 80034ae:	d11d      	bne.n	80034ec <HAL_ADC_IRQHandler+0x90>
         (hadc->Init.ContinuousConvMode == DISABLE)   )
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	7b1b      	ldrb	r3, [r3, #12]
      if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d119      	bne.n	80034ec <HAL_ADC_IRQHandler+0x90>
      {
        /* Disable ADC end of conversion interrupt on group regular */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	685a      	ldr	r2, [r3, #4]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f022 0220 	bic.w	r2, r2, #32
 80034c6:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034cc:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	629a      	str	r2, [r3, #40]	; 0x28
        
        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d105      	bne.n	80034ec <HAL_ADC_IRQHandler+0x90>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034e4:	f043 0201 	orr.w	r2, r3, #1
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ConvCpltCallback(hadc);
#else
      HAL_ADC_ConvCpltCallback(hadc);
 80034ec:	6878      	ldr	r0, [r7, #4]
 80034ee:	f7ff f9a3 	bl	8002838 <HAL_ADC_ConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear regular group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f06f 0212 	mvn.w	r2, #18
 80034fa:	601a      	str	r2, [r3, #0]
    }
  }
  
  /* ========== Check End of Conversion flag for injected group ========== */
  if((tmp_cr1 & ADC_IT_JEOC) == ADC_IT_JEOC)
 80034fc:	68bb      	ldr	r3, [r7, #8]
 80034fe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003502:	2b00      	cmp	r3, #0
 8003504:	d04d      	beq.n	80035a2 <HAL_ADC_IRQHandler+0x146>
  {
    if((tmp_sr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC)
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	f003 0304 	and.w	r3, r3, #4
 800350c:	2b00      	cmp	r3, #0
 800350e:	d048      	beq.n	80035a2 <HAL_ADC_IRQHandler+0x146>
    {
      /* Update state machine on conversion status if not in error state */
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003514:	f003 0310 	and.w	r3, r3, #16
 8003518:	2b00      	cmp	r3, #0
 800351a:	d105      	bne.n	8003528 <HAL_ADC_IRQHandler+0xcc>
      {
        /* Set ADC state */
        SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003520:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	629a      	str	r2, [r3, #40]	; 0x28
      /* conversion from group regular (same conditions as group regular      */
      /* interruption disabling above).                                       */
      /* Note: On STM32F1 devices, in case of sequencer enabled               */
      /*       (several ranks selected), end of conversion flag is raised     */
      /*       at the end of the sequence.                                    */
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	689b      	ldr	r3, [r3, #8]
 800352e:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8003532:	f5b3 4fe0 	cmp.w	r3, #28672	; 0x7000
 8003536:	d012      	beq.n	800355e <HAL_ADC_IRQHandler+0x102>
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	685b      	ldr	r3, [r3, #4]
 800353e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      if(ADC_IS_SOFTWARE_START_INJECTED(hadc)                     || 
 8003542:	2b00      	cmp	r3, #0
 8003544:	d125      	bne.n	8003592 <HAL_ADC_IRQHandler+0x136>
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
         (HAL_IS_BIT_CLR(hadc->Instance->CR1, ADC_CR1_JAUTO) &&     
 8003550:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 8003554:	d11d      	bne.n	8003592 <HAL_ADC_IRQHandler+0x136>
          (hadc->Init.ContinuousConvMode == DISABLE)   )        )   )
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	7b1b      	ldrb	r3, [r3, #12]
         (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800355a:	2b00      	cmp	r3, #0
 800355c:	d119      	bne.n	8003592 <HAL_ADC_IRQHandler+0x136>
      {
        /* Disable ADC end of conversion interrupt on group injected */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	685a      	ldr	r2, [r3, #4]
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800356c:	605a      	str	r2, [r3, #4]
        
        /* Set ADC state */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);   
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003572:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	629a      	str	r2, [r3, #40]	; 0x28

        if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_REG_BUSY))
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800357e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003582:	2b00      	cmp	r3, #0
 8003584:	d105      	bne.n	8003592 <HAL_ADC_IRQHandler+0x136>
        { 
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800358a:	f043 0201 	orr.w	r2, r3, #1
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	629a      	str	r2, [r3, #40]	; 0x28

      /* Conversion complete callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->InjectedConvCpltCallback(hadc);
#else
      HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f000 fa35 	bl	8003a02 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear injected group conversion flag */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_JSTRT | ADC_FLAG_JEOC));
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f06f 020c 	mvn.w	r2, #12
 80035a0:	601a      	str	r2, [r3, #0]
    }
  }
   
  /* ========== Check Analog watchdog flags ========== */
  if((tmp_cr1 & ADC_IT_AWD) == ADC_IT_AWD)
 80035a2:	68bb      	ldr	r3, [r7, #8]
 80035a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80035a8:	2b00      	cmp	r3, #0
 80035aa:	d012      	beq.n	80035d2 <HAL_ADC_IRQHandler+0x176>
  {
    if((tmp_sr & ADC_FLAG_AWD) == ADC_FLAG_AWD)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	f003 0301 	and.w	r3, r3, #1
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d00d      	beq.n	80035d2 <HAL_ADC_IRQHandler+0x176>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035ba:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	629a      	str	r2, [r3, #40]	; 0x28
      
      /* Level out of window callback */ 
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->LevelOutOfWindowCallback(hadc);
#else
      HAL_ADC_LevelOutOfWindowCallback(hadc);
 80035c2:	6878      	ldr	r0, [r7, #4]
 80035c4:	f000 f812 	bl	80035ec <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
      
      /* Clear the ADC analog watchdog flag */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD);
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f06f 0201 	mvn.w	r2, #1
 80035d0:	601a      	str	r2, [r3, #0]
    }
  }
  
}
 80035d2:	bf00      	nop
 80035d4:	3710      	adds	r7, #16
 80035d6:	46bd      	mov	sp, r7
 80035d8:	bd80      	pop	{r7, pc}

080035da <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80035da:	b480      	push	{r7}
 80035dc:	b083      	sub	sp, #12
 80035de:	af00      	add	r7, sp, #0
 80035e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80035e2:	bf00      	nop
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bc80      	pop	{r7}
 80035ea:	4770      	bx	lr

080035ec <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog callback in non blocking mode. 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef* hadc)
{
 80035ec:	b480      	push	{r7}
 80035ee:	b083      	sub	sp, #12
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80035f4:	bf00      	nop
 80035f6:	370c      	adds	r7, #12
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bc80      	pop	{r7}
 80035fc:	4770      	bx	lr

080035fe <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80035fe:	b480      	push	{r7}
 8003600:	b083      	sub	sp, #12
 8003602:	af00      	add	r7, sp, #0
 8003604:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003606:	bf00      	nop
 8003608:	370c      	adds	r7, #12
 800360a:	46bd      	mov	sp, r7
 800360c:	bc80      	pop	{r7}
 800360e:	4770      	bx	lr

08003610 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800361a:	2300      	movs	r3, #0
 800361c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 800361e:	2300      	movs	r3, #0
 8003620:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8003628:	2b01      	cmp	r3, #1
 800362a:	d101      	bne.n	8003630 <HAL_ADC_ConfigChannel+0x20>
 800362c:	2302      	movs	r3, #2
 800362e:	e0dc      	b.n	80037ea <HAL_ADC_ConfigChannel+0x1da>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2201      	movs	r2, #1
 8003634:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003638:	683b      	ldr	r3, [r7, #0]
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	2b06      	cmp	r3, #6
 800363e:	d81c      	bhi.n	800367a <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003646:	683b      	ldr	r3, [r7, #0]
 8003648:	685a      	ldr	r2, [r3, #4]
 800364a:	4613      	mov	r3, r2
 800364c:	009b      	lsls	r3, r3, #2
 800364e:	4413      	add	r3, r2
 8003650:	3b05      	subs	r3, #5
 8003652:	221f      	movs	r2, #31
 8003654:	fa02 f303 	lsl.w	r3, r2, r3
 8003658:	43db      	mvns	r3, r3
 800365a:	4019      	ands	r1, r3
 800365c:	683b      	ldr	r3, [r7, #0]
 800365e:	6818      	ldr	r0, [r3, #0]
 8003660:	683b      	ldr	r3, [r7, #0]
 8003662:	685a      	ldr	r2, [r3, #4]
 8003664:	4613      	mov	r3, r2
 8003666:	009b      	lsls	r3, r3, #2
 8003668:	4413      	add	r3, r2
 800366a:	3b05      	subs	r3, #5
 800366c:	fa00 f203 	lsl.w	r2, r0, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	430a      	orrs	r2, r1
 8003676:	635a      	str	r2, [r3, #52]	; 0x34
 8003678:	e03c      	b.n	80036f4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	2b0c      	cmp	r3, #12
 8003680:	d81c      	bhi.n	80036bc <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	685a      	ldr	r2, [r3, #4]
 800368c:	4613      	mov	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	4413      	add	r3, r2
 8003692:	3b23      	subs	r3, #35	; 0x23
 8003694:	221f      	movs	r2, #31
 8003696:	fa02 f303 	lsl.w	r3, r2, r3
 800369a:	43db      	mvns	r3, r3
 800369c:	4019      	ands	r1, r3
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	6818      	ldr	r0, [r3, #0]
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	685a      	ldr	r2, [r3, #4]
 80036a6:	4613      	mov	r3, r2
 80036a8:	009b      	lsls	r3, r3, #2
 80036aa:	4413      	add	r3, r2
 80036ac:	3b23      	subs	r3, #35	; 0x23
 80036ae:	fa00 f203 	lsl.w	r2, r0, r3
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	681b      	ldr	r3, [r3, #0]
 80036b6:	430a      	orrs	r2, r1
 80036b8:	631a      	str	r2, [r3, #48]	; 0x30
 80036ba:	e01b      	b.n	80036f4 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	685a      	ldr	r2, [r3, #4]
 80036c6:	4613      	mov	r3, r2
 80036c8:	009b      	lsls	r3, r3, #2
 80036ca:	4413      	add	r3, r2
 80036cc:	3b41      	subs	r3, #65	; 0x41
 80036ce:	221f      	movs	r2, #31
 80036d0:	fa02 f303 	lsl.w	r3, r2, r3
 80036d4:	43db      	mvns	r3, r3
 80036d6:	4019      	ands	r1, r3
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	6818      	ldr	r0, [r3, #0]
 80036dc:	683b      	ldr	r3, [r7, #0]
 80036de:	685a      	ldr	r2, [r3, #4]
 80036e0:	4613      	mov	r3, r2
 80036e2:	009b      	lsls	r3, r3, #2
 80036e4:	4413      	add	r3, r2
 80036e6:	3b41      	subs	r3, #65	; 0x41
 80036e8:	fa00 f203 	lsl.w	r2, r0, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	430a      	orrs	r2, r1
 80036f2:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 80036f4:	683b      	ldr	r3, [r7, #0]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	2b09      	cmp	r3, #9
 80036fa:	d91c      	bls.n	8003736 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	68d9      	ldr	r1, [r3, #12]
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	681a      	ldr	r2, [r3, #0]
 8003706:	4613      	mov	r3, r2
 8003708:	005b      	lsls	r3, r3, #1
 800370a:	4413      	add	r3, r2
 800370c:	3b1e      	subs	r3, #30
 800370e:	2207      	movs	r2, #7
 8003710:	fa02 f303 	lsl.w	r3, r2, r3
 8003714:	43db      	mvns	r3, r3
 8003716:	4019      	ands	r1, r3
 8003718:	683b      	ldr	r3, [r7, #0]
 800371a:	6898      	ldr	r0, [r3, #8]
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	4613      	mov	r3, r2
 8003722:	005b      	lsls	r3, r3, #1
 8003724:	4413      	add	r3, r2
 8003726:	3b1e      	subs	r3, #30
 8003728:	fa00 f203 	lsl.w	r2, r0, r3
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	430a      	orrs	r2, r1
 8003732:	60da      	str	r2, [r3, #12]
 8003734:	e019      	b.n	800376a <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	6919      	ldr	r1, [r3, #16]
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	681a      	ldr	r2, [r3, #0]
 8003740:	4613      	mov	r3, r2
 8003742:	005b      	lsls	r3, r3, #1
 8003744:	4413      	add	r3, r2
 8003746:	2207      	movs	r2, #7
 8003748:	fa02 f303 	lsl.w	r3, r2, r3
 800374c:	43db      	mvns	r3, r3
 800374e:	4019      	ands	r1, r3
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	6898      	ldr	r0, [r3, #8]
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	4613      	mov	r3, r2
 800375a:	005b      	lsls	r3, r3, #1
 800375c:	4413      	add	r3, r2
 800375e:	fa00 f203 	lsl.w	r2, r0, r3
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	430a      	orrs	r2, r1
 8003768:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	2b10      	cmp	r3, #16
 8003770:	d003      	beq.n	800377a <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 8003776:	2b11      	cmp	r3, #17
 8003778:	d132      	bne.n	80037e0 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	4a1d      	ldr	r2, [pc, #116]	; (80037f4 <HAL_ADC_ConfigChannel+0x1e4>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d125      	bne.n	80037d0 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	689b      	ldr	r3, [r3, #8]
 800378a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800378e:	2b00      	cmp	r3, #0
 8003790:	d126      	bne.n	80037e0 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	689a      	ldr	r2, [r3, #8]
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	f442 0200 	orr.w	r2, r2, #8388608	; 0x800000
 80037a0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037a2:	683b      	ldr	r3, [r7, #0]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	2b10      	cmp	r3, #16
 80037a8:	d11a      	bne.n	80037e0 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80037aa:	4b13      	ldr	r3, [pc, #76]	; (80037f8 <HAL_ADC_ConfigChannel+0x1e8>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	4a13      	ldr	r2, [pc, #76]	; (80037fc <HAL_ADC_ConfigChannel+0x1ec>)
 80037b0:	fba2 2303 	umull	r2, r3, r2, r3
 80037b4:	0c9a      	lsrs	r2, r3, #18
 80037b6:	4613      	mov	r3, r2
 80037b8:	009b      	lsls	r3, r3, #2
 80037ba:	4413      	add	r3, r2
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80037c0:	e002      	b.n	80037c8 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 80037c2:	68bb      	ldr	r3, [r7, #8]
 80037c4:	3b01      	subs	r3, #1
 80037c6:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1f9      	bne.n	80037c2 <HAL_ADC_ConfigChannel+0x1b2>
 80037ce:	e007      	b.n	80037e0 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d4:	f043 0220 	orr.w	r2, r3, #32
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	629a      	str	r2, [r3, #40]	; 0x28
      
      tmp_hal_status = HAL_ERROR;
 80037dc:	2301      	movs	r3, #1
 80037de:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  
  /* Return function status */
  return tmp_hal_status;
 80037e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80037ea:	4618      	mov	r0, r3
 80037ec:	3714      	adds	r7, #20
 80037ee:	46bd      	mov	sp, r7
 80037f0:	bc80      	pop	{r7}
 80037f2:	4770      	bx	lr
 80037f4:	40012400 	.word	0x40012400
 80037f8:	20000204 	.word	0x20000204
 80037fc:	431bde83 	.word	0x431bde83

08003800 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8003800:	b580      	push	{r7, lr}
 8003802:	b084      	sub	sp, #16
 8003804:	af00      	add	r7, sp, #0
 8003806:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003808:	2300      	movs	r3, #0
 800380a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800380c:	2300      	movs	r3, #0
 800380e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	689b      	ldr	r3, [r3, #8]
 8003816:	f003 0301 	and.w	r3, r3, #1
 800381a:	2b01      	cmp	r3, #1
 800381c:	d040      	beq.n	80038a0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	689a      	ldr	r2, [r3, #8]
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f042 0201 	orr.w	r2, r2, #1
 800382c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800382e:	4b1f      	ldr	r3, [pc, #124]	; (80038ac <ADC_Enable+0xac>)
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	4a1f      	ldr	r2, [pc, #124]	; (80038b0 <ADC_Enable+0xb0>)
 8003834:	fba2 2303 	umull	r2, r3, r2, r3
 8003838:	0c9b      	lsrs	r3, r3, #18
 800383a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800383c:	e002      	b.n	8003844 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	3b01      	subs	r3, #1
 8003842:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8003844:	68bb      	ldr	r3, [r7, #8]
 8003846:	2b00      	cmp	r3, #0
 8003848:	d1f9      	bne.n	800383e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800384a:	f7ff fb11 	bl	8002e70 <HAL_GetTick>
 800384e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003850:	e01f      	b.n	8003892 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003852:	f7ff fb0d 	bl	8002e70 <HAL_GetTick>
 8003856:	4602      	mov	r2, r0
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	1ad3      	subs	r3, r2, r3
 800385c:	2b02      	cmp	r3, #2
 800385e:	d918      	bls.n	8003892 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 0301 	and.w	r3, r3, #1
 800386a:	2b01      	cmp	r3, #1
 800386c:	d011      	beq.n	8003892 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003872:	f043 0210 	orr.w	r2, r3, #16
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387e:	f043 0201 	orr.w	r2, r3, #1
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	62da      	str	r2, [r3, #44]	; 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	2200      	movs	r2, #0
 800388a:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

          return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e007      	b.n	80038a2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	f003 0301 	and.w	r3, r3, #1
 800389c:	2b01      	cmp	r3, #1
 800389e:	d1d8      	bne.n	8003852 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80038a0:	2300      	movs	r3, #0
}
 80038a2:	4618      	mov	r0, r3
 80038a4:	3710      	adds	r7, #16
 80038a6:	46bd      	mov	sp, r7
 80038a8:	bd80      	pop	{r7, pc}
 80038aa:	bf00      	nop
 80038ac:	20000204 	.word	0x20000204
 80038b0:	431bde83 	.word	0x431bde83

080038b4 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b084      	sub	sp, #16
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80038bc:	2300      	movs	r3, #0
 80038be:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	689b      	ldr	r3, [r3, #8]
 80038c6:	f003 0301 	and.w	r3, r3, #1
 80038ca:	2b01      	cmp	r3, #1
 80038cc:	d12e      	bne.n	800392c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	689a      	ldr	r2, [r3, #8]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0201 	bic.w	r2, r2, #1
 80038dc:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 80038de:	f7ff fac7 	bl	8002e70 <HAL_GetTick>
 80038e2:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 80038e4:	e01b      	b.n	800391e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 80038e6:	f7ff fac3 	bl	8002e70 <HAL_GetTick>
 80038ea:	4602      	mov	r2, r0
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	1ad3      	subs	r3, r2, r3
 80038f0:	2b02      	cmp	r3, #2
 80038f2:	d914      	bls.n	800391e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	689b      	ldr	r3, [r3, #8]
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b01      	cmp	r3, #1
 8003900:	d10d      	bne.n	800391e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003906:	f043 0210 	orr.w	r2, r3, #16
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	629a      	str	r2, [r3, #40]	; 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003912:	f043 0201 	orr.w	r2, r3, #1
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	62da      	str	r2, [r3, #44]	; 0x2c

          return HAL_ERROR;
 800391a:	2301      	movs	r3, #1
 800391c:	e007      	b.n	800392e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	689b      	ldr	r3, [r3, #8]
 8003924:	f003 0301 	and.w	r3, r3, #1
 8003928:	2b01      	cmp	r3, #1
 800392a:	d0dc      	beq.n	80038e6 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800392c:	2300      	movs	r3, #0
}
 800392e:	4618      	mov	r0, r3
 8003930:	3710      	adds	r7, #16
 8003932:	46bd      	mov	sp, r7
 8003934:	bd80      	pop	{r7, pc}

08003936 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003936:	b580      	push	{r7, lr}
 8003938:	b084      	sub	sp, #16
 800393a:	af00      	add	r7, sp, #0
 800393c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003942:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003948:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800394c:	2b00      	cmp	r3, #0
 800394e:	d127      	bne.n	80039a0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003954:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	629a      	str	r2, [r3, #40]	; 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	689b      	ldr	r3, [r3, #8]
 8003962:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
 8003966:	f5b3 2f60 	cmp.w	r3, #917504	; 0xe0000
 800396a:	d115      	bne.n	8003998 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 8003970:	2b00      	cmp	r3, #0
 8003972:	d111      	bne.n	8003998 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003978:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	629a      	str	r2, [r3, #40]	; 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003984:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003988:	2b00      	cmp	r3, #0
 800398a:	d105      	bne.n	8003998 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003990:	f043 0201 	orr.w	r2, r3, #1
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	629a      	str	r2, [r3, #40]	; 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003998:	68f8      	ldr	r0, [r7, #12]
 800399a:	f7fe ff4d 	bl	8002838 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 800399e:	e004      	b.n	80039aa <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80039a0:	68fb      	ldr	r3, [r7, #12]
 80039a2:	6a1b      	ldr	r3, [r3, #32]
 80039a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	4798      	blx	r3
}
 80039aa:	bf00      	nop
 80039ac:	3710      	adds	r7, #16
 80039ae:	46bd      	mov	sp, r7
 80039b0:	bd80      	pop	{r7, pc}

080039b2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80039b2:	b580      	push	{r7, lr}
 80039b4:	b084      	sub	sp, #16
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039be:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 80039c0:	68f8      	ldr	r0, [r7, #12]
 80039c2:	f7ff fe0a 	bl	80035da <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039c6:	bf00      	nop
 80039c8:	3710      	adds	r7, #16
 80039ca:	46bd      	mov	sp, r7
 80039cc:	bd80      	pop	{r7, pc}

080039ce <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80039ce:	b580      	push	{r7, lr}
 80039d0:	b084      	sub	sp, #16
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039da:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039e0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	629a      	str	r2, [r3, #40]	; 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039ec:	f043 0204 	orr.w	r2, r3, #4
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80039f4:	68f8      	ldr	r0, [r7, #12]
 80039f6:	f7ff fe02 	bl	80035fe <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80039fa:	bf00      	nop
 80039fc:	3710      	adds	r7, #16
 80039fe:	46bd      	mov	sp, r7
 8003a00:	bd80      	pop	{r7, pc}

08003a02 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADCEx_InjectedConvCpltCallback could be implemented in the user file
  */
}
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bc80      	pop	{r7}
 8003a12:	4770      	bx	lr

08003a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a14:	b480      	push	{r7}
 8003a16:	b085      	sub	sp, #20
 8003a18:	af00      	add	r7, sp, #0
 8003a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	f003 0307 	and.w	r3, r3, #7
 8003a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003a24:	4b0c      	ldr	r3, [pc, #48]	; (8003a58 <__NVIC_SetPriorityGrouping+0x44>)
 8003a26:	68db      	ldr	r3, [r3, #12]
 8003a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003a2a:	68ba      	ldr	r2, [r7, #8]
 8003a2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003a30:	4013      	ands	r3, r2
 8003a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003a38:	68bb      	ldr	r3, [r7, #8]
 8003a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003a3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003a40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003a46:	4a04      	ldr	r2, [pc, #16]	; (8003a58 <__NVIC_SetPriorityGrouping+0x44>)
 8003a48:	68bb      	ldr	r3, [r7, #8]
 8003a4a:	60d3      	str	r3, [r2, #12]
}
 8003a4c:	bf00      	nop
 8003a4e:	3714      	adds	r7, #20
 8003a50:	46bd      	mov	sp, r7
 8003a52:	bc80      	pop	{r7}
 8003a54:	4770      	bx	lr
 8003a56:	bf00      	nop
 8003a58:	e000ed00 	.word	0xe000ed00

08003a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003a60:	4b04      	ldr	r3, [pc, #16]	; (8003a74 <__NVIC_GetPriorityGrouping+0x18>)
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	0a1b      	lsrs	r3, r3, #8
 8003a66:	f003 0307 	and.w	r3, r3, #7
}
 8003a6a:	4618      	mov	r0, r3
 8003a6c:	46bd      	mov	sp, r7
 8003a6e:	bc80      	pop	{r7}
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	e000ed00 	.word	0xe000ed00

08003a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003a78:	b480      	push	{r7}
 8003a7a:	b083      	sub	sp, #12
 8003a7c:	af00      	add	r7, sp, #0
 8003a7e:	4603      	mov	r3, r0
 8003a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	db0b      	blt.n	8003aa2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a8a:	79fb      	ldrb	r3, [r7, #7]
 8003a8c:	f003 021f 	and.w	r2, r3, #31
 8003a90:	4906      	ldr	r1, [pc, #24]	; (8003aac <__NVIC_EnableIRQ+0x34>)
 8003a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003a96:	095b      	lsrs	r3, r3, #5
 8003a98:	2001      	movs	r0, #1
 8003a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8003a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003aa2:	bf00      	nop
 8003aa4:	370c      	adds	r7, #12
 8003aa6:	46bd      	mov	sp, r7
 8003aa8:	bc80      	pop	{r7}
 8003aaa:	4770      	bx	lr
 8003aac:	e000e100 	.word	0xe000e100

08003ab0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b083      	sub	sp, #12
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	6039      	str	r1, [r7, #0]
 8003aba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003abc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	db0a      	blt.n	8003ada <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	b2da      	uxtb	r2, r3
 8003ac8:	490c      	ldr	r1, [pc, #48]	; (8003afc <__NVIC_SetPriority+0x4c>)
 8003aca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ace:	0112      	lsls	r2, r2, #4
 8003ad0:	b2d2      	uxtb	r2, r2
 8003ad2:	440b      	add	r3, r1
 8003ad4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003ad8:	e00a      	b.n	8003af0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	b2da      	uxtb	r2, r3
 8003ade:	4908      	ldr	r1, [pc, #32]	; (8003b00 <__NVIC_SetPriority+0x50>)
 8003ae0:	79fb      	ldrb	r3, [r7, #7]
 8003ae2:	f003 030f 	and.w	r3, r3, #15
 8003ae6:	3b04      	subs	r3, #4
 8003ae8:	0112      	lsls	r2, r2, #4
 8003aea:	b2d2      	uxtb	r2, r2
 8003aec:	440b      	add	r3, r1
 8003aee:	761a      	strb	r2, [r3, #24]
}
 8003af0:	bf00      	nop
 8003af2:	370c      	adds	r7, #12
 8003af4:	46bd      	mov	sp, r7
 8003af6:	bc80      	pop	{r7}
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	e000e100 	.word	0xe000e100
 8003b00:	e000ed00 	.word	0xe000ed00

08003b04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003b04:	b480      	push	{r7}
 8003b06:	b089      	sub	sp, #36	; 0x24
 8003b08:	af00      	add	r7, sp, #0
 8003b0a:	60f8      	str	r0, [r7, #12]
 8003b0c:	60b9      	str	r1, [r7, #8]
 8003b0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	f003 0307 	and.w	r3, r3, #7
 8003b16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003b18:	69fb      	ldr	r3, [r7, #28]
 8003b1a:	f1c3 0307 	rsb	r3, r3, #7
 8003b1e:	2b04      	cmp	r3, #4
 8003b20:	bf28      	it	cs
 8003b22:	2304      	movcs	r3, #4
 8003b24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003b26:	69fb      	ldr	r3, [r7, #28]
 8003b28:	3304      	adds	r3, #4
 8003b2a:	2b06      	cmp	r3, #6
 8003b2c:	d902      	bls.n	8003b34 <NVIC_EncodePriority+0x30>
 8003b2e:	69fb      	ldr	r3, [r7, #28]
 8003b30:	3b03      	subs	r3, #3
 8003b32:	e000      	b.n	8003b36 <NVIC_EncodePriority+0x32>
 8003b34:	2300      	movs	r3, #0
 8003b36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b38:	f04f 32ff 	mov.w	r2, #4294967295
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003b42:	43da      	mvns	r2, r3
 8003b44:	68bb      	ldr	r3, [r7, #8]
 8003b46:	401a      	ands	r2, r3
 8003b48:	697b      	ldr	r3, [r7, #20]
 8003b4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003b4c:	f04f 31ff 	mov.w	r1, #4294967295
 8003b50:	697b      	ldr	r3, [r7, #20]
 8003b52:	fa01 f303 	lsl.w	r3, r1, r3
 8003b56:	43d9      	mvns	r1, r3
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003b5c:	4313      	orrs	r3, r2
         );
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3724      	adds	r7, #36	; 0x24
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bc80      	pop	{r7}
 8003b66:	4770      	bx	lr

08003b68 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003b68:	b580      	push	{r7, lr}
 8003b6a:	b082      	sub	sp, #8
 8003b6c:	af00      	add	r7, sp, #0
 8003b6e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	3b01      	subs	r3, #1
 8003b74:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003b78:	d301      	bcc.n	8003b7e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e00f      	b.n	8003b9e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003b7e:	4a0a      	ldr	r2, [pc, #40]	; (8003ba8 <SysTick_Config+0x40>)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	3b01      	subs	r3, #1
 8003b84:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003b86:	210f      	movs	r1, #15
 8003b88:	f04f 30ff 	mov.w	r0, #4294967295
 8003b8c:	f7ff ff90 	bl	8003ab0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003b90:	4b05      	ldr	r3, [pc, #20]	; (8003ba8 <SysTick_Config+0x40>)
 8003b92:	2200      	movs	r2, #0
 8003b94:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003b96:	4b04      	ldr	r3, [pc, #16]	; (8003ba8 <SysTick_Config+0x40>)
 8003b98:	2207      	movs	r2, #7
 8003b9a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003b9c:	2300      	movs	r3, #0
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	3708      	adds	r7, #8
 8003ba2:	46bd      	mov	sp, r7
 8003ba4:	bd80      	pop	{r7, pc}
 8003ba6:	bf00      	nop
 8003ba8:	e000e010 	.word	0xe000e010

08003bac <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b082      	sub	sp, #8
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003bb4:	6878      	ldr	r0, [r7, #4]
 8003bb6:	f7ff ff2d 	bl	8003a14 <__NVIC_SetPriorityGrouping>
}
 8003bba:	bf00      	nop
 8003bbc:	3708      	adds	r7, #8
 8003bbe:	46bd      	mov	sp, r7
 8003bc0:	bd80      	pop	{r7, pc}

08003bc2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003bc2:	b580      	push	{r7, lr}
 8003bc4:	b086      	sub	sp, #24
 8003bc6:	af00      	add	r7, sp, #0
 8003bc8:	4603      	mov	r3, r0
 8003bca:	60b9      	str	r1, [r7, #8]
 8003bcc:	607a      	str	r2, [r7, #4]
 8003bce:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003bd4:	f7ff ff42 	bl	8003a5c <__NVIC_GetPriorityGrouping>
 8003bd8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003bda:	687a      	ldr	r2, [r7, #4]
 8003bdc:	68b9      	ldr	r1, [r7, #8]
 8003bde:	6978      	ldr	r0, [r7, #20]
 8003be0:	f7ff ff90 	bl	8003b04 <NVIC_EncodePriority>
 8003be4:	4602      	mov	r2, r0
 8003be6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003bea:	4611      	mov	r1, r2
 8003bec:	4618      	mov	r0, r3
 8003bee:	f7ff ff5f 	bl	8003ab0 <__NVIC_SetPriority>
}
 8003bf2:	bf00      	nop
 8003bf4:	3718      	adds	r7, #24
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}

08003bfa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bfa:	b580      	push	{r7, lr}
 8003bfc:	b082      	sub	sp, #8
 8003bfe:	af00      	add	r7, sp, #0
 8003c00:	4603      	mov	r3, r0
 8003c02:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003c04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f7ff ff35 	bl	8003a78 <__NVIC_EnableIRQ>
}
 8003c0e:	bf00      	nop
 8003c10:	3708      	adds	r7, #8
 8003c12:	46bd      	mov	sp, r7
 8003c14:	bd80      	pop	{r7, pc}

08003c16 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003c16:	b580      	push	{r7, lr}
 8003c18:	b082      	sub	sp, #8
 8003c1a:	af00      	add	r7, sp, #0
 8003c1c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f7ff ffa2 	bl	8003b68 <SysTick_Config>
 8003c24:	4603      	mov	r3, r0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3708      	adds	r7, #8
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	bd80      	pop	{r7, pc}
	...

08003c30 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003c30:	b480      	push	{r7}
 8003c32:	b085      	sub	sp, #20
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003c38:	2300      	movs	r3, #0
 8003c3a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d101      	bne.n	8003c46 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8003c42:	2301      	movs	r3, #1
 8003c44:	e043      	b.n	8003cce <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	461a      	mov	r2, r3
 8003c4c:	4b22      	ldr	r3, [pc, #136]	; (8003cd8 <HAL_DMA_Init+0xa8>)
 8003c4e:	4413      	add	r3, r2
 8003c50:	4a22      	ldr	r2, [pc, #136]	; (8003cdc <HAL_DMA_Init+0xac>)
 8003c52:	fba2 2303 	umull	r2, r3, r2, r3
 8003c56:	091b      	lsrs	r3, r3, #4
 8003c58:	009a      	lsls	r2, r3, #2
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	641a      	str	r2, [r3, #64]	; 0x40
  hdma->DmaBaseAddress = DMA1;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	4a1f      	ldr	r2, [pc, #124]	; (8003ce0 <HAL_DMA_Init+0xb0>)
 8003c62:	63da      	str	r2, [r3, #60]	; 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	2202      	movs	r2, #2
 8003c68:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003c7a:	f023 0330 	bic.w	r3, r3, #48	; 0x30
 8003c7e:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 8003c88:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	68db      	ldr	r3, [r3, #12]
 8003c8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003c94:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	695b      	ldr	r3, [r3, #20]
 8003c9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ca0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	69db      	ldr	r3, [r3, #28]
 8003ca6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8003ca8:	68fa      	ldr	r2, [r7, #12]
 8003caa:	4313      	orrs	r3, r2
 8003cac:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	68fa      	ldr	r2, [r7, #12]
 8003cb4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	2200      	movs	r2, #0
 8003cba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	bc80      	pop	{r7}
 8003cd6:	4770      	bx	lr
 8003cd8:	bffdfff8 	.word	0xbffdfff8
 8003cdc:	cccccccd 	.word	0xcccccccd
 8003ce0:	40020000 	.word	0x40020000

08003ce4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ce4:	b580      	push	{r7, lr}
 8003ce6:	b086      	sub	sp, #24
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	60f8      	str	r0, [r7, #12]
 8003cec:	60b9      	str	r1, [r7, #8]
 8003cee:	607a      	str	r2, [r7, #4]
 8003cf0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf2:	2300      	movs	r3, #0
 8003cf4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d101      	bne.n	8003d04 <HAL_DMA_Start_IT+0x20>
 8003d00:	2302      	movs	r3, #2
 8003d02:	e04b      	b.n	8003d9c <HAL_DMA_Start_IT+0xb8>
 8003d04:	68fb      	ldr	r3, [r7, #12]
 8003d06:	2201      	movs	r2, #1
 8003d08:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003d12:	b2db      	uxtb	r3, r3
 8003d14:	2b01      	cmp	r3, #1
 8003d16:	d13a      	bne.n	8003d8e <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2202      	movs	r2, #2
 8003d1c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	2200      	movs	r2, #0
 8003d24:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	681a      	ldr	r2, [r3, #0]
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	f022 0201 	bic.w	r2, r2, #1
 8003d34:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003d36:	683b      	ldr	r3, [r7, #0]
 8003d38:	687a      	ldr	r2, [r7, #4]
 8003d3a:	68b9      	ldr	r1, [r7, #8]
 8003d3c:	68f8      	ldr	r0, [r7, #12]
 8003d3e:	f000 f9eb 	bl	8004118 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d008      	beq.n	8003d5c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f042 020e 	orr.w	r2, r2, #14
 8003d58:	601a      	str	r2, [r3, #0]
 8003d5a:	e00f      	b.n	8003d7c <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	681a      	ldr	r2, [r3, #0]
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	f022 0204 	bic.w	r2, r2, #4
 8003d6a:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	681a      	ldr	r2, [r3, #0]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f042 020a 	orr.w	r2, r2, #10
 8003d7a:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f042 0201 	orr.w	r2, r2, #1
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	e005      	b.n	8003d9a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	2200      	movs	r2, #0
 8003d92:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 8003d96:	2302      	movs	r3, #2
 8003d98:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 8003d9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3718      	adds	r7, #24
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}

08003da4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003da4:	b480      	push	{r7}
 8003da6:	b085      	sub	sp, #20
 8003da8:	af00      	add	r7, sp, #0
 8003daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003dac:	2300      	movs	r3, #0
 8003dae:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b02      	cmp	r3, #2
 8003dba:	d008      	beq.n	8003dce <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2204      	movs	r2, #4
 8003dc0:	639a      	str	r2, [r3, #56]	; 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	2200      	movs	r2, #0
 8003dc6:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 8003dca:	2301      	movs	r3, #1
 8003dcc:	e020      	b.n	8003e10 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	681a      	ldr	r2, [r3, #0]
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	f022 020e 	bic.w	r2, r2, #14
 8003ddc:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	f022 0201 	bic.w	r2, r2, #1
 8003dec:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003df6:	2101      	movs	r1, #1
 8003df8:	fa01 f202 	lsl.w	r2, r1, r2
 8003dfc:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	2201      	movs	r2, #1
 8003e02:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 8003e0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e10:	4618      	mov	r0, r3
 8003e12:	3714      	adds	r7, #20
 8003e14:	46bd      	mov	sp, r7
 8003e16:	bc80      	pop	{r7}
 8003e18:	4770      	bx	lr
	...

08003e1c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e24:	2300      	movs	r3, #0
 8003e26:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 3021 	ldrb.w	r3, [r3, #33]	; 0x21
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b02      	cmp	r3, #2
 8003e32:	d005      	beq.n	8003e40 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2204      	movs	r2, #4
 8003e38:	639a      	str	r2, [r3, #56]	; 0x38
        
    status = HAL_ERROR;
 8003e3a:	2301      	movs	r3, #1
 8003e3c:	73fb      	strb	r3, [r7, #15]
 8003e3e:	e051      	b.n	8003ee4 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	681a      	ldr	r2, [r3, #0]
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	f022 020e 	bic.w	r2, r2, #14
 8003e4e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	681a      	ldr	r2, [r3, #0]
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f022 0201 	bic.w	r2, r2, #1
 8003e5e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	4a22      	ldr	r2, [pc, #136]	; (8003ef0 <HAL_DMA_Abort_IT+0xd4>)
 8003e66:	4293      	cmp	r3, r2
 8003e68:	d029      	beq.n	8003ebe <HAL_DMA_Abort_IT+0xa2>
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	4a21      	ldr	r2, [pc, #132]	; (8003ef4 <HAL_DMA_Abort_IT+0xd8>)
 8003e70:	4293      	cmp	r3, r2
 8003e72:	d022      	beq.n	8003eba <HAL_DMA_Abort_IT+0x9e>
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	4a1f      	ldr	r2, [pc, #124]	; (8003ef8 <HAL_DMA_Abort_IT+0xdc>)
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	d01a      	beq.n	8003eb4 <HAL_DMA_Abort_IT+0x98>
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	4a1e      	ldr	r2, [pc, #120]	; (8003efc <HAL_DMA_Abort_IT+0xe0>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d012      	beq.n	8003eae <HAL_DMA_Abort_IT+0x92>
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a1c      	ldr	r2, [pc, #112]	; (8003f00 <HAL_DMA_Abort_IT+0xe4>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d00a      	beq.n	8003ea8 <HAL_DMA_Abort_IT+0x8c>
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a1b      	ldr	r2, [pc, #108]	; (8003f04 <HAL_DMA_Abort_IT+0xe8>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d102      	bne.n	8003ea2 <HAL_DMA_Abort_IT+0x86>
 8003e9c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8003ea0:	e00e      	b.n	8003ec0 <HAL_DMA_Abort_IT+0xa4>
 8003ea2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8003ea6:	e00b      	b.n	8003ec0 <HAL_DMA_Abort_IT+0xa4>
 8003ea8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8003eac:	e008      	b.n	8003ec0 <HAL_DMA_Abort_IT+0xa4>
 8003eae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003eb2:	e005      	b.n	8003ec0 <HAL_DMA_Abort_IT+0xa4>
 8003eb4:	f44f 7380 	mov.w	r3, #256	; 0x100
 8003eb8:	e002      	b.n	8003ec0 <HAL_DMA_Abort_IT+0xa4>
 8003eba:	2310      	movs	r3, #16
 8003ebc:	e000      	b.n	8003ec0 <HAL_DMA_Abort_IT+0xa4>
 8003ebe:	2301      	movs	r3, #1
 8003ec0:	4a11      	ldr	r2, [pc, #68]	; (8003f08 <HAL_DMA_Abort_IT+0xec>)
 8003ec2:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d003      	beq.n	8003ee4 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003ee0:	6878      	ldr	r0, [r7, #4]
 8003ee2:	4798      	blx	r3
    } 
  }
  return status;
 8003ee4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	3710      	adds	r7, #16
 8003eea:	46bd      	mov	sp, r7
 8003eec:	bd80      	pop	{r7, pc}
 8003eee:	bf00      	nop
 8003ef0:	40020008 	.word	0x40020008
 8003ef4:	4002001c 	.word	0x4002001c
 8003ef8:	40020030 	.word	0x40020030
 8003efc:	40020044 	.word	0x40020044
 8003f00:	40020058 	.word	0x40020058
 8003f04:	4002006c 	.word	0x4002006c
 8003f08:	40020000 	.word	0x40020000

08003f0c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f0c:	b580      	push	{r7, lr}
 8003f0e:	b084      	sub	sp, #16
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f28:	2204      	movs	r2, #4
 8003f2a:	409a      	lsls	r2, r3
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	4013      	ands	r3, r2
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d04f      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0xc8>
 8003f34:	68bb      	ldr	r3, [r7, #8]
 8003f36:	f003 0304 	and.w	r3, r3, #4
 8003f3a:	2b00      	cmp	r3, #0
 8003f3c:	d04a      	beq.n	8003fd4 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	f003 0320 	and.w	r3, r3, #32
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d107      	bne.n	8003f5c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	f022 0204 	bic.w	r2, r2, #4
 8003f5a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a66      	ldr	r2, [pc, #408]	; (80040fc <HAL_DMA_IRQHandler+0x1f0>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d029      	beq.n	8003fba <HAL_DMA_IRQHandler+0xae>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a65      	ldr	r2, [pc, #404]	; (8004100 <HAL_DMA_IRQHandler+0x1f4>)
 8003f6c:	4293      	cmp	r3, r2
 8003f6e:	d022      	beq.n	8003fb6 <HAL_DMA_IRQHandler+0xaa>
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	4a63      	ldr	r2, [pc, #396]	; (8004104 <HAL_DMA_IRQHandler+0x1f8>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d01a      	beq.n	8003fb0 <HAL_DMA_IRQHandler+0xa4>
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4a62      	ldr	r2, [pc, #392]	; (8004108 <HAL_DMA_IRQHandler+0x1fc>)
 8003f80:	4293      	cmp	r3, r2
 8003f82:	d012      	beq.n	8003faa <HAL_DMA_IRQHandler+0x9e>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	4a60      	ldr	r2, [pc, #384]	; (800410c <HAL_DMA_IRQHandler+0x200>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d00a      	beq.n	8003fa4 <HAL_DMA_IRQHandler+0x98>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	4a5f      	ldr	r2, [pc, #380]	; (8004110 <HAL_DMA_IRQHandler+0x204>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d102      	bne.n	8003f9e <HAL_DMA_IRQHandler+0x92>
 8003f98:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003f9c:	e00e      	b.n	8003fbc <HAL_DMA_IRQHandler+0xb0>
 8003f9e:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 8003fa2:	e00b      	b.n	8003fbc <HAL_DMA_IRQHandler+0xb0>
 8003fa4:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8003fa8:	e008      	b.n	8003fbc <HAL_DMA_IRQHandler+0xb0>
 8003faa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003fae:	e005      	b.n	8003fbc <HAL_DMA_IRQHandler+0xb0>
 8003fb0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003fb4:	e002      	b.n	8003fbc <HAL_DMA_IRQHandler+0xb0>
 8003fb6:	2340      	movs	r3, #64	; 0x40
 8003fb8:	e000      	b.n	8003fbc <HAL_DMA_IRQHandler+0xb0>
 8003fba:	2304      	movs	r3, #4
 8003fbc:	4a55      	ldr	r2, [pc, #340]	; (8004114 <HAL_DMA_IRQHandler+0x208>)
 8003fbe:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	f000 8094 	beq.w	80040f2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8003fd2:	e08e      	b.n	80040f2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fd8:	2202      	movs	r2, #2
 8003fda:	409a      	lsls	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	4013      	ands	r3, r2
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d056      	beq.n	8004092 <HAL_DMA_IRQHandler+0x186>
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	f003 0302 	and.w	r3, r3, #2
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d051      	beq.n	8004092 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0320 	and.w	r3, r3, #32
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d10b      	bne.n	8004014 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	681a      	ldr	r2, [r3, #0]
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	f022 020a 	bic.w	r2, r2, #10
 800400a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	2201      	movs	r2, #1
 8004010:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	4a38      	ldr	r2, [pc, #224]	; (80040fc <HAL_DMA_IRQHandler+0x1f0>)
 800401a:	4293      	cmp	r3, r2
 800401c:	d029      	beq.n	8004072 <HAL_DMA_IRQHandler+0x166>
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4a37      	ldr	r2, [pc, #220]	; (8004100 <HAL_DMA_IRQHandler+0x1f4>)
 8004024:	4293      	cmp	r3, r2
 8004026:	d022      	beq.n	800406e <HAL_DMA_IRQHandler+0x162>
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	681b      	ldr	r3, [r3, #0]
 800402c:	4a35      	ldr	r2, [pc, #212]	; (8004104 <HAL_DMA_IRQHandler+0x1f8>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d01a      	beq.n	8004068 <HAL_DMA_IRQHandler+0x15c>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	4a34      	ldr	r2, [pc, #208]	; (8004108 <HAL_DMA_IRQHandler+0x1fc>)
 8004038:	4293      	cmp	r3, r2
 800403a:	d012      	beq.n	8004062 <HAL_DMA_IRQHandler+0x156>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	4a32      	ldr	r2, [pc, #200]	; (800410c <HAL_DMA_IRQHandler+0x200>)
 8004042:	4293      	cmp	r3, r2
 8004044:	d00a      	beq.n	800405c <HAL_DMA_IRQHandler+0x150>
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	4a31      	ldr	r2, [pc, #196]	; (8004110 <HAL_DMA_IRQHandler+0x204>)
 800404c:	4293      	cmp	r3, r2
 800404e:	d102      	bne.n	8004056 <HAL_DMA_IRQHandler+0x14a>
 8004050:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004054:	e00e      	b.n	8004074 <HAL_DMA_IRQHandler+0x168>
 8004056:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800405a:	e00b      	b.n	8004074 <HAL_DMA_IRQHandler+0x168>
 800405c:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8004060:	e008      	b.n	8004074 <HAL_DMA_IRQHandler+0x168>
 8004062:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8004066:	e005      	b.n	8004074 <HAL_DMA_IRQHandler+0x168>
 8004068:	f44f 7300 	mov.w	r3, #512	; 0x200
 800406c:	e002      	b.n	8004074 <HAL_DMA_IRQHandler+0x168>
 800406e:	2320      	movs	r3, #32
 8004070:	e000      	b.n	8004074 <HAL_DMA_IRQHandler+0x168>
 8004072:	2302      	movs	r3, #2
 8004074:	4a27      	ldr	r2, [pc, #156]	; (8004114 <HAL_DMA_IRQHandler+0x208>)
 8004076:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004084:	2b00      	cmp	r3, #0
 8004086:	d034      	beq.n	80040f2 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800408c:	6878      	ldr	r0, [r7, #4]
 800408e:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 8004090:	e02f      	b.n	80040f2 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004096:	2208      	movs	r2, #8
 8004098:	409a      	lsls	r2, r3
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	4013      	ands	r3, r2
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d028      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x1e8>
 80040a2:	68bb      	ldr	r3, [r7, #8]
 80040a4:	f003 0308 	and.w	r3, r3, #8
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d023      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 020e 	bic.w	r2, r2, #14
 80040ba:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040c4:	2101      	movs	r1, #1
 80040c6:	fa01 f202 	lsl.w	r2, r1, r2
 80040ca:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	2201      	movs	r2, #1
 80040d0:	639a      	str	r2, [r3, #56]	; 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	2201      	movs	r2, #1
 80040d6:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d004      	beq.n	80040f4 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040ee:	6878      	ldr	r0, [r7, #4]
 80040f0:	4798      	blx	r3
    }
  }
  return;
 80040f2:	bf00      	nop
 80040f4:	bf00      	nop
}
 80040f6:	3710      	adds	r7, #16
 80040f8:	46bd      	mov	sp, r7
 80040fa:	bd80      	pop	{r7, pc}
 80040fc:	40020008 	.word	0x40020008
 8004100:	4002001c 	.word	0x4002001c
 8004104:	40020030 	.word	0x40020030
 8004108:	40020044 	.word	0x40020044
 800410c:	40020058 	.word	0x40020058
 8004110:	4002006c 	.word	0x4002006c
 8004114:	40020000 	.word	0x40020000

08004118 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004118:	b480      	push	{r7}
 800411a:	b085      	sub	sp, #20
 800411c:	af00      	add	r7, sp, #0
 800411e:	60f8      	str	r0, [r7, #12]
 8004120:	60b9      	str	r1, [r7, #8]
 8004122:	607a      	str	r2, [r7, #4]
 8004124:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800412e:	2101      	movs	r1, #1
 8004130:	fa01 f202 	lsl.w	r2, r1, r2
 8004134:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	683a      	ldr	r2, [r7, #0]
 800413c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	685b      	ldr	r3, [r3, #4]
 8004142:	2b10      	cmp	r3, #16
 8004144:	d108      	bne.n	8004158 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8004146:	68fb      	ldr	r3, [r7, #12]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	687a      	ldr	r2, [r7, #4]
 800414c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	68ba      	ldr	r2, [r7, #8]
 8004154:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004156:	e007      	b.n	8004168 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	68ba      	ldr	r2, [r7, #8]
 800415e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	687a      	ldr	r2, [r7, #4]
 8004166:	60da      	str	r2, [r3, #12]
}
 8004168:	bf00      	nop
 800416a:	3714      	adds	r7, #20
 800416c:	46bd      	mov	sp, r7
 800416e:	bc80      	pop	{r7}
 8004170:	4770      	bx	lr
	...

08004174 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004174:	b480      	push	{r7}
 8004176:	b08b      	sub	sp, #44	; 0x2c
 8004178:	af00      	add	r7, sp, #0
 800417a:	6078      	str	r0, [r7, #4]
 800417c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800417e:	2300      	movs	r3, #0
 8004180:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004182:	2300      	movs	r3, #0
 8004184:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004186:	e169      	b.n	800445c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004188:	2201      	movs	r2, #1
 800418a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800418c:	fa02 f303 	lsl.w	r3, r2, r3
 8004190:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	69fa      	ldr	r2, [r7, #28]
 8004198:	4013      	ands	r3, r2
 800419a:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	429a      	cmp	r2, r3
 80041a2:	f040 8158 	bne.w	8004456 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80041a6:	683b      	ldr	r3, [r7, #0]
 80041a8:	685b      	ldr	r3, [r3, #4]
 80041aa:	4a9a      	ldr	r2, [pc, #616]	; (8004414 <HAL_GPIO_Init+0x2a0>)
 80041ac:	4293      	cmp	r3, r2
 80041ae:	d05e      	beq.n	800426e <HAL_GPIO_Init+0xfa>
 80041b0:	4a98      	ldr	r2, [pc, #608]	; (8004414 <HAL_GPIO_Init+0x2a0>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d875      	bhi.n	80042a2 <HAL_GPIO_Init+0x12e>
 80041b6:	4a98      	ldr	r2, [pc, #608]	; (8004418 <HAL_GPIO_Init+0x2a4>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d058      	beq.n	800426e <HAL_GPIO_Init+0xfa>
 80041bc:	4a96      	ldr	r2, [pc, #600]	; (8004418 <HAL_GPIO_Init+0x2a4>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d86f      	bhi.n	80042a2 <HAL_GPIO_Init+0x12e>
 80041c2:	4a96      	ldr	r2, [pc, #600]	; (800441c <HAL_GPIO_Init+0x2a8>)
 80041c4:	4293      	cmp	r3, r2
 80041c6:	d052      	beq.n	800426e <HAL_GPIO_Init+0xfa>
 80041c8:	4a94      	ldr	r2, [pc, #592]	; (800441c <HAL_GPIO_Init+0x2a8>)
 80041ca:	4293      	cmp	r3, r2
 80041cc:	d869      	bhi.n	80042a2 <HAL_GPIO_Init+0x12e>
 80041ce:	4a94      	ldr	r2, [pc, #592]	; (8004420 <HAL_GPIO_Init+0x2ac>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d04c      	beq.n	800426e <HAL_GPIO_Init+0xfa>
 80041d4:	4a92      	ldr	r2, [pc, #584]	; (8004420 <HAL_GPIO_Init+0x2ac>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d863      	bhi.n	80042a2 <HAL_GPIO_Init+0x12e>
 80041da:	4a92      	ldr	r2, [pc, #584]	; (8004424 <HAL_GPIO_Init+0x2b0>)
 80041dc:	4293      	cmp	r3, r2
 80041de:	d046      	beq.n	800426e <HAL_GPIO_Init+0xfa>
 80041e0:	4a90      	ldr	r2, [pc, #576]	; (8004424 <HAL_GPIO_Init+0x2b0>)
 80041e2:	4293      	cmp	r3, r2
 80041e4:	d85d      	bhi.n	80042a2 <HAL_GPIO_Init+0x12e>
 80041e6:	2b12      	cmp	r3, #18
 80041e8:	d82a      	bhi.n	8004240 <HAL_GPIO_Init+0xcc>
 80041ea:	2b12      	cmp	r3, #18
 80041ec:	d859      	bhi.n	80042a2 <HAL_GPIO_Init+0x12e>
 80041ee:	a201      	add	r2, pc, #4	; (adr r2, 80041f4 <HAL_GPIO_Init+0x80>)
 80041f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041f4:	0800426f 	.word	0x0800426f
 80041f8:	08004249 	.word	0x08004249
 80041fc:	0800425b 	.word	0x0800425b
 8004200:	0800429d 	.word	0x0800429d
 8004204:	080042a3 	.word	0x080042a3
 8004208:	080042a3 	.word	0x080042a3
 800420c:	080042a3 	.word	0x080042a3
 8004210:	080042a3 	.word	0x080042a3
 8004214:	080042a3 	.word	0x080042a3
 8004218:	080042a3 	.word	0x080042a3
 800421c:	080042a3 	.word	0x080042a3
 8004220:	080042a3 	.word	0x080042a3
 8004224:	080042a3 	.word	0x080042a3
 8004228:	080042a3 	.word	0x080042a3
 800422c:	080042a3 	.word	0x080042a3
 8004230:	080042a3 	.word	0x080042a3
 8004234:	080042a3 	.word	0x080042a3
 8004238:	08004251 	.word	0x08004251
 800423c:	08004265 	.word	0x08004265
 8004240:	4a79      	ldr	r2, [pc, #484]	; (8004428 <HAL_GPIO_Init+0x2b4>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d013      	beq.n	800426e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004246:	e02c      	b.n	80042a2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	68db      	ldr	r3, [r3, #12]
 800424c:	623b      	str	r3, [r7, #32]
          break;
 800424e:	e029      	b.n	80042a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	3304      	adds	r3, #4
 8004256:	623b      	str	r3, [r7, #32]
          break;
 8004258:	e024      	b.n	80042a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800425a:	683b      	ldr	r3, [r7, #0]
 800425c:	68db      	ldr	r3, [r3, #12]
 800425e:	3308      	adds	r3, #8
 8004260:	623b      	str	r3, [r7, #32]
          break;
 8004262:	e01f      	b.n	80042a4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	330c      	adds	r3, #12
 800426a:	623b      	str	r3, [r7, #32]
          break;
 800426c:	e01a      	b.n	80042a4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	2b00      	cmp	r3, #0
 8004274:	d102      	bne.n	800427c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004276:	2304      	movs	r3, #4
 8004278:	623b      	str	r3, [r7, #32]
          break;
 800427a:	e013      	b.n	80042a4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	689b      	ldr	r3, [r3, #8]
 8004280:	2b01      	cmp	r3, #1
 8004282:	d105      	bne.n	8004290 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004284:	2308      	movs	r3, #8
 8004286:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	69fa      	ldr	r2, [r7, #28]
 800428c:	611a      	str	r2, [r3, #16]
          break;
 800428e:	e009      	b.n	80042a4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004290:	2308      	movs	r3, #8
 8004292:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	69fa      	ldr	r2, [r7, #28]
 8004298:	615a      	str	r2, [r3, #20]
          break;
 800429a:	e003      	b.n	80042a4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 800429c:	2300      	movs	r3, #0
 800429e:	623b      	str	r3, [r7, #32]
          break;
 80042a0:	e000      	b.n	80042a4 <HAL_GPIO_Init+0x130>
          break;
 80042a2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80042a4:	69bb      	ldr	r3, [r7, #24]
 80042a6:	2bff      	cmp	r3, #255	; 0xff
 80042a8:	d801      	bhi.n	80042ae <HAL_GPIO_Init+0x13a>
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	e001      	b.n	80042b2 <HAL_GPIO_Init+0x13e>
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	3304      	adds	r3, #4
 80042b2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80042b4:	69bb      	ldr	r3, [r7, #24]
 80042b6:	2bff      	cmp	r3, #255	; 0xff
 80042b8:	d802      	bhi.n	80042c0 <HAL_GPIO_Init+0x14c>
 80042ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042bc:	009b      	lsls	r3, r3, #2
 80042be:	e002      	b.n	80042c6 <HAL_GPIO_Init+0x152>
 80042c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042c2:	3b08      	subs	r3, #8
 80042c4:	009b      	lsls	r3, r3, #2
 80042c6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80042c8:	697b      	ldr	r3, [r7, #20]
 80042ca:	681a      	ldr	r2, [r3, #0]
 80042cc:	210f      	movs	r1, #15
 80042ce:	693b      	ldr	r3, [r7, #16]
 80042d0:	fa01 f303 	lsl.w	r3, r1, r3
 80042d4:	43db      	mvns	r3, r3
 80042d6:	401a      	ands	r2, r3
 80042d8:	6a39      	ldr	r1, [r7, #32]
 80042da:	693b      	ldr	r3, [r7, #16]
 80042dc:	fa01 f303 	lsl.w	r3, r1, r3
 80042e0:	431a      	orrs	r2, r3
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	685b      	ldr	r3, [r3, #4]
 80042ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	f000 80b1 	beq.w	8004456 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80042f4:	4b4d      	ldr	r3, [pc, #308]	; (800442c <HAL_GPIO_Init+0x2b8>)
 80042f6:	699b      	ldr	r3, [r3, #24]
 80042f8:	4a4c      	ldr	r2, [pc, #304]	; (800442c <HAL_GPIO_Init+0x2b8>)
 80042fa:	f043 0301 	orr.w	r3, r3, #1
 80042fe:	6193      	str	r3, [r2, #24]
 8004300:	4b4a      	ldr	r3, [pc, #296]	; (800442c <HAL_GPIO_Init+0x2b8>)
 8004302:	699b      	ldr	r3, [r3, #24]
 8004304:	f003 0301 	and.w	r3, r3, #1
 8004308:	60bb      	str	r3, [r7, #8]
 800430a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800430c:	4a48      	ldr	r2, [pc, #288]	; (8004430 <HAL_GPIO_Init+0x2bc>)
 800430e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004310:	089b      	lsrs	r3, r3, #2
 8004312:	3302      	adds	r3, #2
 8004314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004318:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800431a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800431c:	f003 0303 	and.w	r3, r3, #3
 8004320:	009b      	lsls	r3, r3, #2
 8004322:	220f      	movs	r2, #15
 8004324:	fa02 f303 	lsl.w	r3, r2, r3
 8004328:	43db      	mvns	r3, r3
 800432a:	68fa      	ldr	r2, [r7, #12]
 800432c:	4013      	ands	r3, r2
 800432e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	4a40      	ldr	r2, [pc, #256]	; (8004434 <HAL_GPIO_Init+0x2c0>)
 8004334:	4293      	cmp	r3, r2
 8004336:	d013      	beq.n	8004360 <HAL_GPIO_Init+0x1ec>
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	4a3f      	ldr	r2, [pc, #252]	; (8004438 <HAL_GPIO_Init+0x2c4>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d00d      	beq.n	800435c <HAL_GPIO_Init+0x1e8>
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a3e      	ldr	r2, [pc, #248]	; (800443c <HAL_GPIO_Init+0x2c8>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d007      	beq.n	8004358 <HAL_GPIO_Init+0x1e4>
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	4a3d      	ldr	r2, [pc, #244]	; (8004440 <HAL_GPIO_Init+0x2cc>)
 800434c:	4293      	cmp	r3, r2
 800434e:	d101      	bne.n	8004354 <HAL_GPIO_Init+0x1e0>
 8004350:	2303      	movs	r3, #3
 8004352:	e006      	b.n	8004362 <HAL_GPIO_Init+0x1ee>
 8004354:	2304      	movs	r3, #4
 8004356:	e004      	b.n	8004362 <HAL_GPIO_Init+0x1ee>
 8004358:	2302      	movs	r3, #2
 800435a:	e002      	b.n	8004362 <HAL_GPIO_Init+0x1ee>
 800435c:	2301      	movs	r3, #1
 800435e:	e000      	b.n	8004362 <HAL_GPIO_Init+0x1ee>
 8004360:	2300      	movs	r3, #0
 8004362:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004364:	f002 0203 	and.w	r2, r2, #3
 8004368:	0092      	lsls	r2, r2, #2
 800436a:	4093      	lsls	r3, r2
 800436c:	68fa      	ldr	r2, [r7, #12]
 800436e:	4313      	orrs	r3, r2
 8004370:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004372:	492f      	ldr	r1, [pc, #188]	; (8004430 <HAL_GPIO_Init+0x2bc>)
 8004374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004376:	089b      	lsrs	r3, r3, #2
 8004378:	3302      	adds	r3, #2
 800437a:	68fa      	ldr	r2, [r7, #12]
 800437c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004388:	2b00      	cmp	r3, #0
 800438a:	d006      	beq.n	800439a <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 800438c:	4b2d      	ldr	r3, [pc, #180]	; (8004444 <HAL_GPIO_Init+0x2d0>)
 800438e:	689a      	ldr	r2, [r3, #8]
 8004390:	492c      	ldr	r1, [pc, #176]	; (8004444 <HAL_GPIO_Init+0x2d0>)
 8004392:	69bb      	ldr	r3, [r7, #24]
 8004394:	4313      	orrs	r3, r2
 8004396:	608b      	str	r3, [r1, #8]
 8004398:	e006      	b.n	80043a8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800439a:	4b2a      	ldr	r3, [pc, #168]	; (8004444 <HAL_GPIO_Init+0x2d0>)
 800439c:	689a      	ldr	r2, [r3, #8]
 800439e:	69bb      	ldr	r3, [r7, #24]
 80043a0:	43db      	mvns	r3, r3
 80043a2:	4928      	ldr	r1, [pc, #160]	; (8004444 <HAL_GPIO_Init+0x2d0>)
 80043a4:	4013      	ands	r3, r2
 80043a6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	685b      	ldr	r3, [r3, #4]
 80043ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d006      	beq.n	80043c2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80043b4:	4b23      	ldr	r3, [pc, #140]	; (8004444 <HAL_GPIO_Init+0x2d0>)
 80043b6:	68da      	ldr	r2, [r3, #12]
 80043b8:	4922      	ldr	r1, [pc, #136]	; (8004444 <HAL_GPIO_Init+0x2d0>)
 80043ba:	69bb      	ldr	r3, [r7, #24]
 80043bc:	4313      	orrs	r3, r2
 80043be:	60cb      	str	r3, [r1, #12]
 80043c0:	e006      	b.n	80043d0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80043c2:	4b20      	ldr	r3, [pc, #128]	; (8004444 <HAL_GPIO_Init+0x2d0>)
 80043c4:	68da      	ldr	r2, [r3, #12]
 80043c6:	69bb      	ldr	r3, [r7, #24]
 80043c8:	43db      	mvns	r3, r3
 80043ca:	491e      	ldr	r1, [pc, #120]	; (8004444 <HAL_GPIO_Init+0x2d0>)
 80043cc:	4013      	ands	r3, r2
 80043ce:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80043d0:	683b      	ldr	r3, [r7, #0]
 80043d2:	685b      	ldr	r3, [r3, #4]
 80043d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d006      	beq.n	80043ea <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80043dc:	4b19      	ldr	r3, [pc, #100]	; (8004444 <HAL_GPIO_Init+0x2d0>)
 80043de:	685a      	ldr	r2, [r3, #4]
 80043e0:	4918      	ldr	r1, [pc, #96]	; (8004444 <HAL_GPIO_Init+0x2d0>)
 80043e2:	69bb      	ldr	r3, [r7, #24]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	604b      	str	r3, [r1, #4]
 80043e8:	e006      	b.n	80043f8 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80043ea:	4b16      	ldr	r3, [pc, #88]	; (8004444 <HAL_GPIO_Init+0x2d0>)
 80043ec:	685a      	ldr	r2, [r3, #4]
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	43db      	mvns	r3, r3
 80043f2:	4914      	ldr	r1, [pc, #80]	; (8004444 <HAL_GPIO_Init+0x2d0>)
 80043f4:	4013      	ands	r3, r2
 80043f6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004400:	2b00      	cmp	r3, #0
 8004402:	d021      	beq.n	8004448 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004404:	4b0f      	ldr	r3, [pc, #60]	; (8004444 <HAL_GPIO_Init+0x2d0>)
 8004406:	681a      	ldr	r2, [r3, #0]
 8004408:	490e      	ldr	r1, [pc, #56]	; (8004444 <HAL_GPIO_Init+0x2d0>)
 800440a:	69bb      	ldr	r3, [r7, #24]
 800440c:	4313      	orrs	r3, r2
 800440e:	600b      	str	r3, [r1, #0]
 8004410:	e021      	b.n	8004456 <HAL_GPIO_Init+0x2e2>
 8004412:	bf00      	nop
 8004414:	10320000 	.word	0x10320000
 8004418:	10310000 	.word	0x10310000
 800441c:	10220000 	.word	0x10220000
 8004420:	10210000 	.word	0x10210000
 8004424:	10120000 	.word	0x10120000
 8004428:	10110000 	.word	0x10110000
 800442c:	40021000 	.word	0x40021000
 8004430:	40010000 	.word	0x40010000
 8004434:	40010800 	.word	0x40010800
 8004438:	40010c00 	.word	0x40010c00
 800443c:	40011000 	.word	0x40011000
 8004440:	40011400 	.word	0x40011400
 8004444:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004448:	4b0b      	ldr	r3, [pc, #44]	; (8004478 <HAL_GPIO_Init+0x304>)
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	69bb      	ldr	r3, [r7, #24]
 800444e:	43db      	mvns	r3, r3
 8004450:	4909      	ldr	r1, [pc, #36]	; (8004478 <HAL_GPIO_Init+0x304>)
 8004452:	4013      	ands	r3, r2
 8004454:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004456:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004458:	3301      	adds	r3, #1
 800445a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800445c:	683b      	ldr	r3, [r7, #0]
 800445e:	681a      	ldr	r2, [r3, #0]
 8004460:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004462:	fa22 f303 	lsr.w	r3, r2, r3
 8004466:	2b00      	cmp	r3, #0
 8004468:	f47f ae8e 	bne.w	8004188 <HAL_GPIO_Init+0x14>
  }
}
 800446c:	bf00      	nop
 800446e:	bf00      	nop
 8004470:	372c      	adds	r7, #44	; 0x2c
 8004472:	46bd      	mov	sp, r7
 8004474:	bc80      	pop	{r7}
 8004476:	4770      	bx	lr
 8004478:	40010400 	.word	0x40010400

0800447c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]
 8004484:	460b      	mov	r3, r1
 8004486:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	689a      	ldr	r2, [r3, #8]
 800448c:	887b      	ldrh	r3, [r7, #2]
 800448e:	4013      	ands	r3, r2
 8004490:	2b00      	cmp	r3, #0
 8004492:	d002      	beq.n	800449a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004494:	2301      	movs	r3, #1
 8004496:	73fb      	strb	r3, [r7, #15]
 8004498:	e001      	b.n	800449e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800449a:	2300      	movs	r3, #0
 800449c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800449e:	7bfb      	ldrb	r3, [r7, #15]
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3714      	adds	r7, #20
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bc80      	pop	{r7}
 80044a8:	4770      	bx	lr

080044aa <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b083      	sub	sp, #12
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
 80044b2:	460b      	mov	r3, r1
 80044b4:	807b      	strh	r3, [r7, #2]
 80044b6:	4613      	mov	r3, r2
 80044b8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80044ba:	787b      	ldrb	r3, [r7, #1]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d003      	beq.n	80044c8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80044c0:	887a      	ldrh	r2, [r7, #2]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80044c6:	e003      	b.n	80044d0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80044c8:	887b      	ldrh	r3, [r7, #2]
 80044ca:	041a      	lsls	r2, r3, #16
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	611a      	str	r2, [r3, #16]
}
 80044d0:	bf00      	nop
 80044d2:	370c      	adds	r7, #12
 80044d4:	46bd      	mov	sp, r7
 80044d6:	bc80      	pop	{r7}
 80044d8:	4770      	bx	lr
	...

080044dc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80044dc:	b580      	push	{r7, lr}
 80044de:	b086      	sub	sp, #24
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e272      	b.n	80049d4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0301 	and.w	r3, r3, #1
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	f000 8087 	beq.w	800460a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80044fc:	4b92      	ldr	r3, [pc, #584]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f003 030c 	and.w	r3, r3, #12
 8004504:	2b04      	cmp	r3, #4
 8004506:	d00c      	beq.n	8004522 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8004508:	4b8f      	ldr	r3, [pc, #572]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f003 030c 	and.w	r3, r3, #12
 8004510:	2b08      	cmp	r3, #8
 8004512:	d112      	bne.n	800453a <HAL_RCC_OscConfig+0x5e>
 8004514:	4b8c      	ldr	r3, [pc, #560]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800451c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004520:	d10b      	bne.n	800453a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004522:	4b89      	ldr	r3, [pc, #548]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800452a:	2b00      	cmp	r3, #0
 800452c:	d06c      	beq.n	8004608 <HAL_RCC_OscConfig+0x12c>
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	685b      	ldr	r3, [r3, #4]
 8004532:	2b00      	cmp	r3, #0
 8004534:	d168      	bne.n	8004608 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8004536:	2301      	movs	r3, #1
 8004538:	e24c      	b.n	80049d4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004542:	d106      	bne.n	8004552 <HAL_RCC_OscConfig+0x76>
 8004544:	4b80      	ldr	r3, [pc, #512]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	4a7f      	ldr	r2, [pc, #508]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 800454a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800454e:	6013      	str	r3, [r2, #0]
 8004550:	e02e      	b.n	80045b0 <HAL_RCC_OscConfig+0xd4>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	2b00      	cmp	r3, #0
 8004558:	d10c      	bne.n	8004574 <HAL_RCC_OscConfig+0x98>
 800455a:	4b7b      	ldr	r3, [pc, #492]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	4a7a      	ldr	r2, [pc, #488]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 8004560:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004564:	6013      	str	r3, [r2, #0]
 8004566:	4b78      	ldr	r3, [pc, #480]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	4a77      	ldr	r2, [pc, #476]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 800456c:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004570:	6013      	str	r3, [r2, #0]
 8004572:	e01d      	b.n	80045b0 <HAL_RCC_OscConfig+0xd4>
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	685b      	ldr	r3, [r3, #4]
 8004578:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800457c:	d10c      	bne.n	8004598 <HAL_RCC_OscConfig+0xbc>
 800457e:	4b72      	ldr	r3, [pc, #456]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	4a71      	ldr	r2, [pc, #452]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 8004584:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004588:	6013      	str	r3, [r2, #0]
 800458a:	4b6f      	ldr	r3, [pc, #444]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4a6e      	ldr	r2, [pc, #440]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 8004590:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004594:	6013      	str	r3, [r2, #0]
 8004596:	e00b      	b.n	80045b0 <HAL_RCC_OscConfig+0xd4>
 8004598:	4b6b      	ldr	r3, [pc, #428]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	4a6a      	ldr	r2, [pc, #424]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 800459e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80045a2:	6013      	str	r3, [r2, #0]
 80045a4:	4b68      	ldr	r3, [pc, #416]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	4a67      	ldr	r2, [pc, #412]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 80045aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80045ae:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	2b00      	cmp	r3, #0
 80045b6:	d013      	beq.n	80045e0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045b8:	f7fe fc5a 	bl	8002e70 <HAL_GetTick>
 80045bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045be:	e008      	b.n	80045d2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045c0:	f7fe fc56 	bl	8002e70 <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	693b      	ldr	r3, [r7, #16]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	2b64      	cmp	r3, #100	; 0x64
 80045cc:	d901      	bls.n	80045d2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80045ce:	2303      	movs	r3, #3
 80045d0:	e200      	b.n	80049d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045d2:	4b5d      	ldr	r3, [pc, #372]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d0f0      	beq.n	80045c0 <HAL_RCC_OscConfig+0xe4>
 80045de:	e014      	b.n	800460a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80045e0:	f7fe fc46 	bl	8002e70 <HAL_GetTick>
 80045e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045e6:	e008      	b.n	80045fa <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80045e8:	f7fe fc42 	bl	8002e70 <HAL_GetTick>
 80045ec:	4602      	mov	r2, r0
 80045ee:	693b      	ldr	r3, [r7, #16]
 80045f0:	1ad3      	subs	r3, r2, r3
 80045f2:	2b64      	cmp	r3, #100	; 0x64
 80045f4:	d901      	bls.n	80045fa <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80045f6:	2303      	movs	r3, #3
 80045f8:	e1ec      	b.n	80049d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80045fa:	4b53      	ldr	r3, [pc, #332]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004602:	2b00      	cmp	r3, #0
 8004604:	d1f0      	bne.n	80045e8 <HAL_RCC_OscConfig+0x10c>
 8004606:	e000      	b.n	800460a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004608:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 0302 	and.w	r3, r3, #2
 8004612:	2b00      	cmp	r3, #0
 8004614:	d063      	beq.n	80046de <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8004616:	4b4c      	ldr	r3, [pc, #304]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	f003 030c 	and.w	r3, r3, #12
 800461e:	2b00      	cmp	r3, #0
 8004620:	d00b      	beq.n	800463a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8004622:	4b49      	ldr	r3, [pc, #292]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	f003 030c 	and.w	r3, r3, #12
 800462a:	2b08      	cmp	r3, #8
 800462c:	d11c      	bne.n	8004668 <HAL_RCC_OscConfig+0x18c>
 800462e:	4b46      	ldr	r3, [pc, #280]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 8004630:	685b      	ldr	r3, [r3, #4]
 8004632:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004636:	2b00      	cmp	r3, #0
 8004638:	d116      	bne.n	8004668 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800463a:	4b43      	ldr	r3, [pc, #268]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0302 	and.w	r3, r3, #2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d005      	beq.n	8004652 <HAL_RCC_OscConfig+0x176>
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	691b      	ldr	r3, [r3, #16]
 800464a:	2b01      	cmp	r3, #1
 800464c:	d001      	beq.n	8004652 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800464e:	2301      	movs	r3, #1
 8004650:	e1c0      	b.n	80049d4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004652:	4b3d      	ldr	r3, [pc, #244]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	695b      	ldr	r3, [r3, #20]
 800465e:	00db      	lsls	r3, r3, #3
 8004660:	4939      	ldr	r1, [pc, #228]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 8004662:	4313      	orrs	r3, r2
 8004664:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004666:	e03a      	b.n	80046de <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	691b      	ldr	r3, [r3, #16]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d020      	beq.n	80046b2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004670:	4b36      	ldr	r3, [pc, #216]	; (800474c <HAL_RCC_OscConfig+0x270>)
 8004672:	2201      	movs	r2, #1
 8004674:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004676:	f7fe fbfb 	bl	8002e70 <HAL_GetTick>
 800467a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800467c:	e008      	b.n	8004690 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800467e:	f7fe fbf7 	bl	8002e70 <HAL_GetTick>
 8004682:	4602      	mov	r2, r0
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	1ad3      	subs	r3, r2, r3
 8004688:	2b02      	cmp	r3, #2
 800468a:	d901      	bls.n	8004690 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e1a1      	b.n	80049d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004690:	4b2d      	ldr	r3, [pc, #180]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	f003 0302 	and.w	r3, r3, #2
 8004698:	2b00      	cmp	r3, #0
 800469a:	d0f0      	beq.n	800467e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800469c:	4b2a      	ldr	r3, [pc, #168]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	695b      	ldr	r3, [r3, #20]
 80046a8:	00db      	lsls	r3, r3, #3
 80046aa:	4927      	ldr	r1, [pc, #156]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 80046ac:	4313      	orrs	r3, r2
 80046ae:	600b      	str	r3, [r1, #0]
 80046b0:	e015      	b.n	80046de <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80046b2:	4b26      	ldr	r3, [pc, #152]	; (800474c <HAL_RCC_OscConfig+0x270>)
 80046b4:	2200      	movs	r2, #0
 80046b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046b8:	f7fe fbda 	bl	8002e70 <HAL_GetTick>
 80046bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046be:	e008      	b.n	80046d2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80046c0:	f7fe fbd6 	bl	8002e70 <HAL_GetTick>
 80046c4:	4602      	mov	r2, r0
 80046c6:	693b      	ldr	r3, [r7, #16]
 80046c8:	1ad3      	subs	r3, r2, r3
 80046ca:	2b02      	cmp	r3, #2
 80046cc:	d901      	bls.n	80046d2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80046ce:	2303      	movs	r3, #3
 80046d0:	e180      	b.n	80049d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80046d2:	4b1d      	ldr	r3, [pc, #116]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f003 0302 	and.w	r3, r3, #2
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d1f0      	bne.n	80046c0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 0308 	and.w	r3, r3, #8
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d03a      	beq.n	8004760 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	699b      	ldr	r3, [r3, #24]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d019      	beq.n	8004726 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80046f2:	4b17      	ldr	r3, [pc, #92]	; (8004750 <HAL_RCC_OscConfig+0x274>)
 80046f4:	2201      	movs	r2, #1
 80046f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80046f8:	f7fe fbba 	bl	8002e70 <HAL_GetTick>
 80046fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80046fe:	e008      	b.n	8004712 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004700:	f7fe fbb6 	bl	8002e70 <HAL_GetTick>
 8004704:	4602      	mov	r2, r0
 8004706:	693b      	ldr	r3, [r7, #16]
 8004708:	1ad3      	subs	r3, r2, r3
 800470a:	2b02      	cmp	r3, #2
 800470c:	d901      	bls.n	8004712 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800470e:	2303      	movs	r3, #3
 8004710:	e160      	b.n	80049d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004712:	4b0d      	ldr	r3, [pc, #52]	; (8004748 <HAL_RCC_OscConfig+0x26c>)
 8004714:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d0f0      	beq.n	8004700 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800471e:	2001      	movs	r0, #1
 8004720:	f000 face 	bl	8004cc0 <RCC_Delay>
 8004724:	e01c      	b.n	8004760 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004726:	4b0a      	ldr	r3, [pc, #40]	; (8004750 <HAL_RCC_OscConfig+0x274>)
 8004728:	2200      	movs	r2, #0
 800472a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800472c:	f7fe fba0 	bl	8002e70 <HAL_GetTick>
 8004730:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004732:	e00f      	b.n	8004754 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004734:	f7fe fb9c 	bl	8002e70 <HAL_GetTick>
 8004738:	4602      	mov	r2, r0
 800473a:	693b      	ldr	r3, [r7, #16]
 800473c:	1ad3      	subs	r3, r2, r3
 800473e:	2b02      	cmp	r3, #2
 8004740:	d908      	bls.n	8004754 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8004742:	2303      	movs	r3, #3
 8004744:	e146      	b.n	80049d4 <HAL_RCC_OscConfig+0x4f8>
 8004746:	bf00      	nop
 8004748:	40021000 	.word	0x40021000
 800474c:	42420000 	.word	0x42420000
 8004750:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004754:	4b92      	ldr	r3, [pc, #584]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 8004756:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004758:	f003 0302 	and.w	r3, r3, #2
 800475c:	2b00      	cmp	r3, #0
 800475e:	d1e9      	bne.n	8004734 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f003 0304 	and.w	r3, r3, #4
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 80a6 	beq.w	80048ba <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800476e:	2300      	movs	r3, #0
 8004770:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004772:	4b8b      	ldr	r3, [pc, #556]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 8004774:	69db      	ldr	r3, [r3, #28]
 8004776:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800477a:	2b00      	cmp	r3, #0
 800477c:	d10d      	bne.n	800479a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800477e:	4b88      	ldr	r3, [pc, #544]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 8004780:	69db      	ldr	r3, [r3, #28]
 8004782:	4a87      	ldr	r2, [pc, #540]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 8004784:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004788:	61d3      	str	r3, [r2, #28]
 800478a:	4b85      	ldr	r3, [pc, #532]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 800478c:	69db      	ldr	r3, [r3, #28]
 800478e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004792:	60bb      	str	r3, [r7, #8]
 8004794:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004796:	2301      	movs	r3, #1
 8004798:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800479a:	4b82      	ldr	r3, [pc, #520]	; (80049a4 <HAL_RCC_OscConfig+0x4c8>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d118      	bne.n	80047d8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80047a6:	4b7f      	ldr	r3, [pc, #508]	; (80049a4 <HAL_RCC_OscConfig+0x4c8>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	4a7e      	ldr	r2, [pc, #504]	; (80049a4 <HAL_RCC_OscConfig+0x4c8>)
 80047ac:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80047b0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80047b2:	f7fe fb5d 	bl	8002e70 <HAL_GetTick>
 80047b6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047b8:	e008      	b.n	80047cc <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80047ba:	f7fe fb59 	bl	8002e70 <HAL_GetTick>
 80047be:	4602      	mov	r2, r0
 80047c0:	693b      	ldr	r3, [r7, #16]
 80047c2:	1ad3      	subs	r3, r2, r3
 80047c4:	2b64      	cmp	r3, #100	; 0x64
 80047c6:	d901      	bls.n	80047cc <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80047c8:	2303      	movs	r3, #3
 80047ca:	e103      	b.n	80049d4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80047cc:	4b75      	ldr	r3, [pc, #468]	; (80049a4 <HAL_RCC_OscConfig+0x4c8>)
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d0f0      	beq.n	80047ba <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	2b01      	cmp	r3, #1
 80047de:	d106      	bne.n	80047ee <HAL_RCC_OscConfig+0x312>
 80047e0:	4b6f      	ldr	r3, [pc, #444]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 80047e2:	6a1b      	ldr	r3, [r3, #32]
 80047e4:	4a6e      	ldr	r2, [pc, #440]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 80047e6:	f043 0301 	orr.w	r3, r3, #1
 80047ea:	6213      	str	r3, [r2, #32]
 80047ec:	e02d      	b.n	800484a <HAL_RCC_OscConfig+0x36e>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d10c      	bne.n	8004810 <HAL_RCC_OscConfig+0x334>
 80047f6:	4b6a      	ldr	r3, [pc, #424]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 80047f8:	6a1b      	ldr	r3, [r3, #32]
 80047fa:	4a69      	ldr	r2, [pc, #420]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 80047fc:	f023 0301 	bic.w	r3, r3, #1
 8004800:	6213      	str	r3, [r2, #32]
 8004802:	4b67      	ldr	r3, [pc, #412]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 8004804:	6a1b      	ldr	r3, [r3, #32]
 8004806:	4a66      	ldr	r2, [pc, #408]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 8004808:	f023 0304 	bic.w	r3, r3, #4
 800480c:	6213      	str	r3, [r2, #32]
 800480e:	e01c      	b.n	800484a <HAL_RCC_OscConfig+0x36e>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	68db      	ldr	r3, [r3, #12]
 8004814:	2b05      	cmp	r3, #5
 8004816:	d10c      	bne.n	8004832 <HAL_RCC_OscConfig+0x356>
 8004818:	4b61      	ldr	r3, [pc, #388]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 800481a:	6a1b      	ldr	r3, [r3, #32]
 800481c:	4a60      	ldr	r2, [pc, #384]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 800481e:	f043 0304 	orr.w	r3, r3, #4
 8004822:	6213      	str	r3, [r2, #32]
 8004824:	4b5e      	ldr	r3, [pc, #376]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 8004826:	6a1b      	ldr	r3, [r3, #32]
 8004828:	4a5d      	ldr	r2, [pc, #372]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 800482a:	f043 0301 	orr.w	r3, r3, #1
 800482e:	6213      	str	r3, [r2, #32]
 8004830:	e00b      	b.n	800484a <HAL_RCC_OscConfig+0x36e>
 8004832:	4b5b      	ldr	r3, [pc, #364]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 8004834:	6a1b      	ldr	r3, [r3, #32]
 8004836:	4a5a      	ldr	r2, [pc, #360]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 8004838:	f023 0301 	bic.w	r3, r3, #1
 800483c:	6213      	str	r3, [r2, #32]
 800483e:	4b58      	ldr	r3, [pc, #352]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 8004840:	6a1b      	ldr	r3, [r3, #32]
 8004842:	4a57      	ldr	r2, [pc, #348]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 8004844:	f023 0304 	bic.w	r3, r3, #4
 8004848:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	68db      	ldr	r3, [r3, #12]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d015      	beq.n	800487e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004852:	f7fe fb0d 	bl	8002e70 <HAL_GetTick>
 8004856:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004858:	e00a      	b.n	8004870 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800485a:	f7fe fb09 	bl	8002e70 <HAL_GetTick>
 800485e:	4602      	mov	r2, r0
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	1ad3      	subs	r3, r2, r3
 8004864:	f241 3288 	movw	r2, #5000	; 0x1388
 8004868:	4293      	cmp	r3, r2
 800486a:	d901      	bls.n	8004870 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800486c:	2303      	movs	r3, #3
 800486e:	e0b1      	b.n	80049d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004870:	4b4b      	ldr	r3, [pc, #300]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 8004872:	6a1b      	ldr	r3, [r3, #32]
 8004874:	f003 0302 	and.w	r3, r3, #2
 8004878:	2b00      	cmp	r3, #0
 800487a:	d0ee      	beq.n	800485a <HAL_RCC_OscConfig+0x37e>
 800487c:	e014      	b.n	80048a8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800487e:	f7fe faf7 	bl	8002e70 <HAL_GetTick>
 8004882:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004884:	e00a      	b.n	800489c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004886:	f7fe faf3 	bl	8002e70 <HAL_GetTick>
 800488a:	4602      	mov	r2, r0
 800488c:	693b      	ldr	r3, [r7, #16]
 800488e:	1ad3      	subs	r3, r2, r3
 8004890:	f241 3288 	movw	r2, #5000	; 0x1388
 8004894:	4293      	cmp	r3, r2
 8004896:	d901      	bls.n	800489c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8004898:	2303      	movs	r3, #3
 800489a:	e09b      	b.n	80049d4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800489c:	4b40      	ldr	r3, [pc, #256]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 800489e:	6a1b      	ldr	r3, [r3, #32]
 80048a0:	f003 0302 	and.w	r3, r3, #2
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1ee      	bne.n	8004886 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80048a8:	7dfb      	ldrb	r3, [r7, #23]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d105      	bne.n	80048ba <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80048ae:	4b3c      	ldr	r3, [pc, #240]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 80048b0:	69db      	ldr	r3, [r3, #28]
 80048b2:	4a3b      	ldr	r2, [pc, #236]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 80048b4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80048b8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	69db      	ldr	r3, [r3, #28]
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 8087 	beq.w	80049d2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80048c4:	4b36      	ldr	r3, [pc, #216]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 80048c6:	685b      	ldr	r3, [r3, #4]
 80048c8:	f003 030c 	and.w	r3, r3, #12
 80048cc:	2b08      	cmp	r3, #8
 80048ce:	d061      	beq.n	8004994 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	69db      	ldr	r3, [r3, #28]
 80048d4:	2b02      	cmp	r3, #2
 80048d6:	d146      	bne.n	8004966 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80048d8:	4b33      	ldr	r3, [pc, #204]	; (80049a8 <HAL_RCC_OscConfig+0x4cc>)
 80048da:	2200      	movs	r2, #0
 80048dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80048de:	f7fe fac7 	bl	8002e70 <HAL_GetTick>
 80048e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048e4:	e008      	b.n	80048f8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80048e6:	f7fe fac3 	bl	8002e70 <HAL_GetTick>
 80048ea:	4602      	mov	r2, r0
 80048ec:	693b      	ldr	r3, [r7, #16]
 80048ee:	1ad3      	subs	r3, r2, r3
 80048f0:	2b02      	cmp	r3, #2
 80048f2:	d901      	bls.n	80048f8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80048f4:	2303      	movs	r3, #3
 80048f6:	e06d      	b.n	80049d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80048f8:	4b29      	ldr	r3, [pc, #164]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004900:	2b00      	cmp	r3, #0
 8004902:	d1f0      	bne.n	80048e6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	6a1b      	ldr	r3, [r3, #32]
 8004908:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800490c:	d108      	bne.n	8004920 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800490e:	4b24      	ldr	r3, [pc, #144]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	689b      	ldr	r3, [r3, #8]
 800491a:	4921      	ldr	r1, [pc, #132]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 800491c:	4313      	orrs	r3, r2
 800491e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8004920:	4b1f      	ldr	r3, [pc, #124]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	6a19      	ldr	r1, [r3, #32]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004930:	430b      	orrs	r3, r1
 8004932:	491b      	ldr	r1, [pc, #108]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 8004934:	4313      	orrs	r3, r2
 8004936:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004938:	4b1b      	ldr	r3, [pc, #108]	; (80049a8 <HAL_RCC_OscConfig+0x4cc>)
 800493a:	2201      	movs	r2, #1
 800493c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800493e:	f7fe fa97 	bl	8002e70 <HAL_GetTick>
 8004942:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004944:	e008      	b.n	8004958 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004946:	f7fe fa93 	bl	8002e70 <HAL_GetTick>
 800494a:	4602      	mov	r2, r0
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	1ad3      	subs	r3, r2, r3
 8004950:	2b02      	cmp	r3, #2
 8004952:	d901      	bls.n	8004958 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8004954:	2303      	movs	r3, #3
 8004956:	e03d      	b.n	80049d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8004958:	4b11      	ldr	r3, [pc, #68]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004960:	2b00      	cmp	r3, #0
 8004962:	d0f0      	beq.n	8004946 <HAL_RCC_OscConfig+0x46a>
 8004964:	e035      	b.n	80049d2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004966:	4b10      	ldr	r3, [pc, #64]	; (80049a8 <HAL_RCC_OscConfig+0x4cc>)
 8004968:	2200      	movs	r2, #0
 800496a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800496c:	f7fe fa80 	bl	8002e70 <HAL_GetTick>
 8004970:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004972:	e008      	b.n	8004986 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004974:	f7fe fa7c 	bl	8002e70 <HAL_GetTick>
 8004978:	4602      	mov	r2, r0
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	1ad3      	subs	r3, r2, r3
 800497e:	2b02      	cmp	r3, #2
 8004980:	d901      	bls.n	8004986 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8004982:	2303      	movs	r3, #3
 8004984:	e026      	b.n	80049d4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8004986:	4b06      	ldr	r3, [pc, #24]	; (80049a0 <HAL_RCC_OscConfig+0x4c4>)
 8004988:	681b      	ldr	r3, [r3, #0]
 800498a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800498e:	2b00      	cmp	r3, #0
 8004990:	d1f0      	bne.n	8004974 <HAL_RCC_OscConfig+0x498>
 8004992:	e01e      	b.n	80049d2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	69db      	ldr	r3, [r3, #28]
 8004998:	2b01      	cmp	r3, #1
 800499a:	d107      	bne.n	80049ac <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800499c:	2301      	movs	r3, #1
 800499e:	e019      	b.n	80049d4 <HAL_RCC_OscConfig+0x4f8>
 80049a0:	40021000 	.word	0x40021000
 80049a4:	40007000 	.word	0x40007000
 80049a8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80049ac:	4b0b      	ldr	r3, [pc, #44]	; (80049dc <HAL_RCC_OscConfig+0x500>)
 80049ae:	685b      	ldr	r3, [r3, #4]
 80049b0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	6a1b      	ldr	r3, [r3, #32]
 80049bc:	429a      	cmp	r2, r3
 80049be:	d106      	bne.n	80049ce <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80049ca:	429a      	cmp	r2, r3
 80049cc:	d001      	beq.n	80049d2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80049ce:	2301      	movs	r3, #1
 80049d0:	e000      	b.n	80049d4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80049d2:	2300      	movs	r3, #0
}
 80049d4:	4618      	mov	r0, r3
 80049d6:	3718      	adds	r7, #24
 80049d8:	46bd      	mov	sp, r7
 80049da:	bd80      	pop	{r7, pc}
 80049dc:	40021000 	.word	0x40021000

080049e0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80049e0:	b580      	push	{r7, lr}
 80049e2:	b084      	sub	sp, #16
 80049e4:	af00      	add	r7, sp, #0
 80049e6:	6078      	str	r0, [r7, #4]
 80049e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d101      	bne.n	80049f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80049f0:	2301      	movs	r3, #1
 80049f2:	e0d0      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80049f4:	4b6a      	ldr	r3, [pc, #424]	; (8004ba0 <HAL_RCC_ClockConfig+0x1c0>)
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0307 	and.w	r3, r3, #7
 80049fc:	683a      	ldr	r2, [r7, #0]
 80049fe:	429a      	cmp	r2, r3
 8004a00:	d910      	bls.n	8004a24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004a02:	4b67      	ldr	r3, [pc, #412]	; (8004ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	f023 0207 	bic.w	r2, r3, #7
 8004a0a:	4965      	ldr	r1, [pc, #404]	; (8004ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004a12:	4b63      	ldr	r3, [pc, #396]	; (8004ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f003 0307 	and.w	r3, r3, #7
 8004a1a:	683a      	ldr	r2, [r7, #0]
 8004a1c:	429a      	cmp	r2, r3
 8004a1e:	d001      	beq.n	8004a24 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8004a20:	2301      	movs	r3, #1
 8004a22:	e0b8      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d020      	beq.n	8004a72 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f003 0304 	and.w	r3, r3, #4
 8004a38:	2b00      	cmp	r3, #0
 8004a3a:	d005      	beq.n	8004a48 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004a3c:	4b59      	ldr	r3, [pc, #356]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	4a58      	ldr	r2, [pc, #352]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a42:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8004a46:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	f003 0308 	and.w	r3, r3, #8
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d005      	beq.n	8004a60 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004a54:	4b53      	ldr	r3, [pc, #332]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a56:	685b      	ldr	r3, [r3, #4]
 8004a58:	4a52      	ldr	r2, [pc, #328]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a5a:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8004a5e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004a60:	4b50      	ldr	r3, [pc, #320]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	689b      	ldr	r3, [r3, #8]
 8004a6c:	494d      	ldr	r1, [pc, #308]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d040      	beq.n	8004b00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	2b01      	cmp	r3, #1
 8004a84:	d107      	bne.n	8004a96 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a86:	4b47      	ldr	r3, [pc, #284]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d115      	bne.n	8004abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004a92:	2301      	movs	r3, #1
 8004a94:	e07f      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	2b02      	cmp	r3, #2
 8004a9c:	d107      	bne.n	8004aae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004a9e:	4b41      	ldr	r3, [pc, #260]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d109      	bne.n	8004abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aaa:	2301      	movs	r3, #1
 8004aac:	e073      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004aae:	4b3d      	ldr	r3, [pc, #244]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f003 0302 	and.w	r3, r3, #2
 8004ab6:	2b00      	cmp	r3, #0
 8004ab8:	d101      	bne.n	8004abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004aba:	2301      	movs	r3, #1
 8004abc:	e06b      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004abe:	4b39      	ldr	r3, [pc, #228]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f023 0203 	bic.w	r2, r3, #3
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	685b      	ldr	r3, [r3, #4]
 8004aca:	4936      	ldr	r1, [pc, #216]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004acc:	4313      	orrs	r3, r2
 8004ace:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ad0:	f7fe f9ce 	bl	8002e70 <HAL_GetTick>
 8004ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ad6:	e00a      	b.n	8004aee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ad8:	f7fe f9ca 	bl	8002e70 <HAL_GetTick>
 8004adc:	4602      	mov	r2, r0
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	1ad3      	subs	r3, r2, r3
 8004ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d901      	bls.n	8004aee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004aea:	2303      	movs	r3, #3
 8004aec:	e053      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004aee:	4b2d      	ldr	r3, [pc, #180]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004af0:	685b      	ldr	r3, [r3, #4]
 8004af2:	f003 020c 	and.w	r2, r3, #12
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	685b      	ldr	r3, [r3, #4]
 8004afa:	009b      	lsls	r3, r3, #2
 8004afc:	429a      	cmp	r2, r3
 8004afe:	d1eb      	bne.n	8004ad8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004b00:	4b27      	ldr	r3, [pc, #156]	; (8004ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f003 0307 	and.w	r3, r3, #7
 8004b08:	683a      	ldr	r2, [r7, #0]
 8004b0a:	429a      	cmp	r2, r3
 8004b0c:	d210      	bcs.n	8004b30 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004b0e:	4b24      	ldr	r3, [pc, #144]	; (8004ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f023 0207 	bic.w	r2, r3, #7
 8004b16:	4922      	ldr	r1, [pc, #136]	; (8004ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b18:	683b      	ldr	r3, [r7, #0]
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004b1e:	4b20      	ldr	r3, [pc, #128]	; (8004ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 0307 	and.w	r3, r3, #7
 8004b26:	683a      	ldr	r2, [r7, #0]
 8004b28:	429a      	cmp	r2, r3
 8004b2a:	d001      	beq.n	8004b30 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8004b2c:	2301      	movs	r3, #1
 8004b2e:	e032      	b.n	8004b96 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	f003 0304 	and.w	r3, r3, #4
 8004b38:	2b00      	cmp	r3, #0
 8004b3a:	d008      	beq.n	8004b4e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004b3c:	4b19      	ldr	r3, [pc, #100]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b3e:	685b      	ldr	r3, [r3, #4]
 8004b40:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	4916      	ldr	r1, [pc, #88]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b4a:	4313      	orrs	r3, r2
 8004b4c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	f003 0308 	and.w	r3, r3, #8
 8004b56:	2b00      	cmp	r3, #0
 8004b58:	d009      	beq.n	8004b6e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8004b5a:	4b12      	ldr	r3, [pc, #72]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	691b      	ldr	r3, [r3, #16]
 8004b66:	00db      	lsls	r3, r3, #3
 8004b68:	490e      	ldr	r1, [pc, #56]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b6a:	4313      	orrs	r3, r2
 8004b6c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004b6e:	f000 f821 	bl	8004bb4 <HAL_RCC_GetSysClockFreq>
 8004b72:	4602      	mov	r2, r0
 8004b74:	4b0b      	ldr	r3, [pc, #44]	; (8004ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8004b76:	685b      	ldr	r3, [r3, #4]
 8004b78:	091b      	lsrs	r3, r3, #4
 8004b7a:	f003 030f 	and.w	r3, r3, #15
 8004b7e:	490a      	ldr	r1, [pc, #40]	; (8004ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8004b80:	5ccb      	ldrb	r3, [r1, r3]
 8004b82:	fa22 f303 	lsr.w	r3, r2, r3
 8004b86:	4a09      	ldr	r2, [pc, #36]	; (8004bac <HAL_RCC_ClockConfig+0x1cc>)
 8004b88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8004b8a:	4b09      	ldr	r3, [pc, #36]	; (8004bb0 <HAL_RCC_ClockConfig+0x1d0>)
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	4618      	mov	r0, r3
 8004b90:	f7fe f92c 	bl	8002dec <HAL_InitTick>

  return HAL_OK;
 8004b94:	2300      	movs	r3, #0
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3710      	adds	r7, #16
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	bd80      	pop	{r7, pc}
 8004b9e:	bf00      	nop
 8004ba0:	40022000 	.word	0x40022000
 8004ba4:	40021000 	.word	0x40021000
 8004ba8:	080073bc 	.word	0x080073bc
 8004bac:	20000204 	.word	0x20000204
 8004bb0:	20000208 	.word	0x20000208

08004bb4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004bb4:	b480      	push	{r7}
 8004bb6:	b087      	sub	sp, #28
 8004bb8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8004bba:	2300      	movs	r3, #0
 8004bbc:	60fb      	str	r3, [r7, #12]
 8004bbe:	2300      	movs	r3, #0
 8004bc0:	60bb      	str	r3, [r7, #8]
 8004bc2:	2300      	movs	r3, #0
 8004bc4:	617b      	str	r3, [r7, #20]
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8004bca:	2300      	movs	r3, #0
 8004bcc:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8004bce:	4b1e      	ldr	r3, [pc, #120]	; (8004c48 <HAL_RCC_GetSysClockFreq+0x94>)
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	f003 030c 	and.w	r3, r3, #12
 8004bda:	2b04      	cmp	r3, #4
 8004bdc:	d002      	beq.n	8004be4 <HAL_RCC_GetSysClockFreq+0x30>
 8004bde:	2b08      	cmp	r3, #8
 8004be0:	d003      	beq.n	8004bea <HAL_RCC_GetSysClockFreq+0x36>
 8004be2:	e027      	b.n	8004c34 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8004be4:	4b19      	ldr	r3, [pc, #100]	; (8004c4c <HAL_RCC_GetSysClockFreq+0x98>)
 8004be6:	613b      	str	r3, [r7, #16]
      break;
 8004be8:	e027      	b.n	8004c3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	0c9b      	lsrs	r3, r3, #18
 8004bee:	f003 030f 	and.w	r3, r3, #15
 8004bf2:	4a17      	ldr	r2, [pc, #92]	; (8004c50 <HAL_RCC_GetSysClockFreq+0x9c>)
 8004bf4:	5cd3      	ldrb	r3, [r2, r3]
 8004bf6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d010      	beq.n	8004c24 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8004c02:	4b11      	ldr	r3, [pc, #68]	; (8004c48 <HAL_RCC_GetSysClockFreq+0x94>)
 8004c04:	685b      	ldr	r3, [r3, #4]
 8004c06:	0c5b      	lsrs	r3, r3, #17
 8004c08:	f003 0301 	and.w	r3, r3, #1
 8004c0c:	4a11      	ldr	r2, [pc, #68]	; (8004c54 <HAL_RCC_GetSysClockFreq+0xa0>)
 8004c0e:	5cd3      	ldrb	r3, [r2, r3]
 8004c10:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	4a0d      	ldr	r2, [pc, #52]	; (8004c4c <HAL_RCC_GetSysClockFreq+0x98>)
 8004c16:	fb03 f202 	mul.w	r2, r3, r2
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c20:	617b      	str	r3, [r7, #20]
 8004c22:	e004      	b.n	8004c2e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	4a0c      	ldr	r2, [pc, #48]	; (8004c58 <HAL_RCC_GetSysClockFreq+0xa4>)
 8004c28:	fb02 f303 	mul.w	r3, r2, r3
 8004c2c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8004c2e:	697b      	ldr	r3, [r7, #20]
 8004c30:	613b      	str	r3, [r7, #16]
      break;
 8004c32:	e002      	b.n	8004c3a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8004c34:	4b05      	ldr	r3, [pc, #20]	; (8004c4c <HAL_RCC_GetSysClockFreq+0x98>)
 8004c36:	613b      	str	r3, [r7, #16]
      break;
 8004c38:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004c3a:	693b      	ldr	r3, [r7, #16]
}
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	371c      	adds	r7, #28
 8004c40:	46bd      	mov	sp, r7
 8004c42:	bc80      	pop	{r7}
 8004c44:	4770      	bx	lr
 8004c46:	bf00      	nop
 8004c48:	40021000 	.word	0x40021000
 8004c4c:	007a1200 	.word	0x007a1200
 8004c50:	080073d4 	.word	0x080073d4
 8004c54:	080073e4 	.word	0x080073e4
 8004c58:	003d0900 	.word	0x003d0900

08004c5c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004c5c:	b480      	push	{r7}
 8004c5e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004c60:	4b02      	ldr	r3, [pc, #8]	; (8004c6c <HAL_RCC_GetHCLKFreq+0x10>)
 8004c62:	681b      	ldr	r3, [r3, #0]
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	46bd      	mov	sp, r7
 8004c68:	bc80      	pop	{r7}
 8004c6a:	4770      	bx	lr
 8004c6c:	20000204 	.word	0x20000204

08004c70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004c70:	b580      	push	{r7, lr}
 8004c72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004c74:	f7ff fff2 	bl	8004c5c <HAL_RCC_GetHCLKFreq>
 8004c78:	4602      	mov	r2, r0
 8004c7a:	4b05      	ldr	r3, [pc, #20]	; (8004c90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004c7c:	685b      	ldr	r3, [r3, #4]
 8004c7e:	0a1b      	lsrs	r3, r3, #8
 8004c80:	f003 0307 	and.w	r3, r3, #7
 8004c84:	4903      	ldr	r1, [pc, #12]	; (8004c94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004c86:	5ccb      	ldrb	r3, [r1, r3]
 8004c88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004c8c:	4618      	mov	r0, r3
 8004c8e:	bd80      	pop	{r7, pc}
 8004c90:	40021000 	.word	0x40021000
 8004c94:	080073cc 	.word	0x080073cc

08004c98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004c98:	b580      	push	{r7, lr}
 8004c9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004c9c:	f7ff ffde 	bl	8004c5c <HAL_RCC_GetHCLKFreq>
 8004ca0:	4602      	mov	r2, r0
 8004ca2:	4b05      	ldr	r3, [pc, #20]	; (8004cb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	0adb      	lsrs	r3, r3, #11
 8004ca8:	f003 0307 	and.w	r3, r3, #7
 8004cac:	4903      	ldr	r1, [pc, #12]	; (8004cbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004cae:	5ccb      	ldrb	r3, [r1, r3]
 8004cb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004cb4:	4618      	mov	r0, r3
 8004cb6:	bd80      	pop	{r7, pc}
 8004cb8:	40021000 	.word	0x40021000
 8004cbc:	080073cc 	.word	0x080073cc

08004cc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b085      	sub	sp, #20
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8004cc8:	4b0a      	ldr	r3, [pc, #40]	; (8004cf4 <RCC_Delay+0x34>)
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	4a0a      	ldr	r2, [pc, #40]	; (8004cf8 <RCC_Delay+0x38>)
 8004cce:	fba2 2303 	umull	r2, r3, r2, r3
 8004cd2:	0a5b      	lsrs	r3, r3, #9
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	fb02 f303 	mul.w	r3, r2, r3
 8004cda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8004cdc:	bf00      	nop
  }
  while (Delay --);
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	1e5a      	subs	r2, r3, #1
 8004ce2:	60fa      	str	r2, [r7, #12]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	d1f9      	bne.n	8004cdc <RCC_Delay+0x1c>
}
 8004ce8:	bf00      	nop
 8004cea:	bf00      	nop
 8004cec:	3714      	adds	r7, #20
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bc80      	pop	{r7}
 8004cf2:	4770      	bx	lr
 8004cf4:	20000204 	.word	0x20000204
 8004cf8:	10624dd3 	.word	0x10624dd3

08004cfc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004cfc:	b580      	push	{r7, lr}
 8004cfe:	b086      	sub	sp, #24
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8004d04:	2300      	movs	r3, #0
 8004d06:	613b      	str	r3, [r7, #16]
 8004d08:	2300      	movs	r3, #0
 8004d0a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f003 0301 	and.w	r3, r3, #1
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d07d      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8004d18:	2300      	movs	r3, #0
 8004d1a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004d1c:	4b4f      	ldr	r3, [pc, #316]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d1e:	69db      	ldr	r3, [r3, #28]
 8004d20:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d24:	2b00      	cmp	r3, #0
 8004d26:	d10d      	bne.n	8004d44 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004d28:	4b4c      	ldr	r3, [pc, #304]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d2a:	69db      	ldr	r3, [r3, #28]
 8004d2c:	4a4b      	ldr	r2, [pc, #300]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d2e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d32:	61d3      	str	r3, [r2, #28]
 8004d34:	4b49      	ldr	r3, [pc, #292]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d36:	69db      	ldr	r3, [r3, #28]
 8004d38:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004d3c:	60bb      	str	r3, [r7, #8]
 8004d3e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004d40:	2301      	movs	r3, #1
 8004d42:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d44:	4b46      	ldr	r3, [pc, #280]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	d118      	bne.n	8004d82 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004d50:	4b43      	ldr	r3, [pc, #268]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d52:	681b      	ldr	r3, [r3, #0]
 8004d54:	4a42      	ldr	r2, [pc, #264]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d56:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004d5a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004d5c:	f7fe f888 	bl	8002e70 <HAL_GetTick>
 8004d60:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d62:	e008      	b.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004d64:	f7fe f884 	bl	8002e70 <HAL_GetTick>
 8004d68:	4602      	mov	r2, r0
 8004d6a:	693b      	ldr	r3, [r7, #16]
 8004d6c:	1ad3      	subs	r3, r2, r3
 8004d6e:	2b64      	cmp	r3, #100	; 0x64
 8004d70:	d901      	bls.n	8004d76 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8004d72:	2303      	movs	r3, #3
 8004d74:	e06d      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004d76:	4b3a      	ldr	r3, [pc, #232]	; (8004e60 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d7e:	2b00      	cmp	r3, #0
 8004d80:	d0f0      	beq.n	8004d64 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8004d82:	4b36      	ldr	r3, [pc, #216]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004d84:	6a1b      	ldr	r3, [r3, #32]
 8004d86:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d8a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d02e      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	685b      	ldr	r3, [r3, #4]
 8004d96:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d9a:	68fa      	ldr	r2, [r7, #12]
 8004d9c:	429a      	cmp	r2, r3
 8004d9e:	d027      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004da0:	4b2e      	ldr	r3, [pc, #184]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004da2:	6a1b      	ldr	r3, [r3, #32]
 8004da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004da8:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8004daa:	4b2e      	ldr	r3, [pc, #184]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004dac:	2201      	movs	r2, #1
 8004dae:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8004db0:	4b2c      	ldr	r3, [pc, #176]	; (8004e64 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8004db6:	4a29      	ldr	r2, [pc, #164]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f003 0301 	and.w	r3, r3, #1
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d014      	beq.n	8004df0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dc6:	f7fe f853 	bl	8002e70 <HAL_GetTick>
 8004dca:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004dcc:	e00a      	b.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004dce:	f7fe f84f 	bl	8002e70 <HAL_GetTick>
 8004dd2:	4602      	mov	r2, r0
 8004dd4:	693b      	ldr	r3, [r7, #16]
 8004dd6:	1ad3      	subs	r3, r2, r3
 8004dd8:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d901      	bls.n	8004de4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e036      	b.n	8004e52 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004de4:	4b1d      	ldr	r3, [pc, #116]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004de6:	6a1b      	ldr	r3, [r3, #32]
 8004de8:	f003 0302 	and.w	r3, r3, #2
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d0ee      	beq.n	8004dce <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004df0:	4b1a      	ldr	r3, [pc, #104]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004df2:	6a1b      	ldr	r3, [r3, #32]
 8004df4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	685b      	ldr	r3, [r3, #4]
 8004dfc:	4917      	ldr	r1, [pc, #92]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004dfe:	4313      	orrs	r3, r2
 8004e00:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8004e02:	7dfb      	ldrb	r3, [r7, #23]
 8004e04:	2b01      	cmp	r3, #1
 8004e06:	d105      	bne.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004e08:	4b14      	ldr	r3, [pc, #80]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e0a:	69db      	ldr	r3, [r3, #28]
 8004e0c:	4a13      	ldr	r2, [pc, #76]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e0e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004e12:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0302 	and.w	r3, r3, #2
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d008      	beq.n	8004e32 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8004e20:	4b0e      	ldr	r3, [pc, #56]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e22:	685b      	ldr	r3, [r3, #4]
 8004e24:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	490b      	ldr	r1, [pc, #44]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e2e:	4313      	orrs	r3, r2
 8004e30:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	f003 0310 	and.w	r3, r3, #16
 8004e3a:	2b00      	cmp	r3, #0
 8004e3c:	d008      	beq.n	8004e50 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8004e3e:	4b07      	ldr	r3, [pc, #28]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e40:	685b      	ldr	r3, [r3, #4]
 8004e42:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	68db      	ldr	r3, [r3, #12]
 8004e4a:	4904      	ldr	r1, [pc, #16]	; (8004e5c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8004e4c:	4313      	orrs	r3, r2
 8004e4e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3718      	adds	r7, #24
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	40021000 	.word	0x40021000
 8004e60:	40007000 	.word	0x40007000
 8004e64:	42420440 	.word	0x42420440

08004e68 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e68:	b580      	push	{r7, lr}
 8004e6a:	b082      	sub	sp, #8
 8004e6c:	af00      	add	r7, sp, #0
 8004e6e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d101      	bne.n	8004e7a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e76:	2301      	movs	r3, #1
 8004e78:	e041      	b.n	8004efe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e80:	b2db      	uxtb	r3, r3
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	d106      	bne.n	8004e94 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	2200      	movs	r2, #0
 8004e8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f7fd fdf4 	bl	8002a7c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e94:	687b      	ldr	r3, [r7, #4]
 8004e96:	2202      	movs	r2, #2
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	681a      	ldr	r2, [r3, #0]
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	3304      	adds	r3, #4
 8004ea4:	4619      	mov	r1, r3
 8004ea6:	4610      	mov	r0, r2
 8004ea8:	f000 f940 	bl	800512c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2201      	movs	r2, #1
 8004eb0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	2201      	movs	r2, #1
 8004eb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2201      	movs	r2, #1
 8004ec0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	2201      	movs	r2, #1
 8004ec8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	2201      	movs	r2, #1
 8004ed0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2201      	movs	r2, #1
 8004ee0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	2201      	movs	r2, #1
 8004ef0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	2201      	movs	r2, #1
 8004ef8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004efc:	2300      	movs	r3, #0
}
 8004efe:	4618      	mov	r0, r3
 8004f00:	3708      	adds	r7, #8
 8004f02:	46bd      	mov	sp, r7
 8004f04:	bd80      	pop	{r7, pc}
	...

08004f08 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8004f08:	b480      	push	{r7}
 8004f0a:	b085      	sub	sp, #20
 8004f0c:	af00      	add	r7, sp, #0
 8004f0e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b01      	cmp	r3, #1
 8004f1a:	d001      	beq.n	8004f20 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8004f1c:	2301      	movs	r3, #1
 8004f1e:	e032      	b.n	8004f86 <HAL_TIM_Base_Start+0x7e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a18      	ldr	r2, [pc, #96]	; (8004f90 <HAL_TIM_Base_Start+0x88>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d00e      	beq.n	8004f50 <HAL_TIM_Base_Start+0x48>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f3a:	d009      	beq.n	8004f50 <HAL_TIM_Base_Start+0x48>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a14      	ldr	r2, [pc, #80]	; (8004f94 <HAL_TIM_Base_Start+0x8c>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d004      	beq.n	8004f50 <HAL_TIM_Base_Start+0x48>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a13      	ldr	r2, [pc, #76]	; (8004f98 <HAL_TIM_Base_Start+0x90>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d111      	bne.n	8004f74 <HAL_TIM_Base_Start+0x6c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	689b      	ldr	r3, [r3, #8]
 8004f56:	f003 0307 	and.w	r3, r3, #7
 8004f5a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	2b06      	cmp	r3, #6
 8004f60:	d010      	beq.n	8004f84 <HAL_TIM_Base_Start+0x7c>
    {
      __HAL_TIM_ENABLE(htim);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	681a      	ldr	r2, [r3, #0]
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	f042 0201 	orr.w	r2, r2, #1
 8004f70:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f72:	e007      	b.n	8004f84 <HAL_TIM_Base_Start+0x7c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	681a      	ldr	r2, [r3, #0]
 8004f7a:	687b      	ldr	r3, [r7, #4]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f042 0201 	orr.w	r2, r2, #1
 8004f82:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f84:	2300      	movs	r3, #0
}
 8004f86:	4618      	mov	r0, r3
 8004f88:	3714      	adds	r7, #20
 8004f8a:	46bd      	mov	sp, r7
 8004f8c:	bc80      	pop	{r7}
 8004f8e:	4770      	bx	lr
 8004f90:	40012c00 	.word	0x40012c00
 8004f94:	40000400 	.word	0x40000400
 8004f98:	40000800 	.word	0x40000800

08004f9c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004f9c:	b580      	push	{r7, lr}
 8004f9e:	b084      	sub	sp, #16
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
 8004fa4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004fa6:	2300      	movs	r3, #0
 8004fa8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004fb0:	2b01      	cmp	r3, #1
 8004fb2:	d101      	bne.n	8004fb8 <HAL_TIM_ConfigClockSource+0x1c>
 8004fb4:	2302      	movs	r3, #2
 8004fb6:	e0b4      	b.n	8005122 <HAL_TIM_ConfigClockSource+0x186>
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2202      	movs	r2, #2
 8004fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004fd0:	68bb      	ldr	r3, [r7, #8]
 8004fd2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004fd6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004fd8:	68bb      	ldr	r3, [r7, #8]
 8004fda:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004fde:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ff0:	d03e      	beq.n	8005070 <HAL_TIM_ConfigClockSource+0xd4>
 8004ff2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004ff6:	f200 8087 	bhi.w	8005108 <HAL_TIM_ConfigClockSource+0x16c>
 8004ffa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004ffe:	f000 8086 	beq.w	800510e <HAL_TIM_ConfigClockSource+0x172>
 8005002:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005006:	d87f      	bhi.n	8005108 <HAL_TIM_ConfigClockSource+0x16c>
 8005008:	2b70      	cmp	r3, #112	; 0x70
 800500a:	d01a      	beq.n	8005042 <HAL_TIM_ConfigClockSource+0xa6>
 800500c:	2b70      	cmp	r3, #112	; 0x70
 800500e:	d87b      	bhi.n	8005108 <HAL_TIM_ConfigClockSource+0x16c>
 8005010:	2b60      	cmp	r3, #96	; 0x60
 8005012:	d050      	beq.n	80050b6 <HAL_TIM_ConfigClockSource+0x11a>
 8005014:	2b60      	cmp	r3, #96	; 0x60
 8005016:	d877      	bhi.n	8005108 <HAL_TIM_ConfigClockSource+0x16c>
 8005018:	2b50      	cmp	r3, #80	; 0x50
 800501a:	d03c      	beq.n	8005096 <HAL_TIM_ConfigClockSource+0xfa>
 800501c:	2b50      	cmp	r3, #80	; 0x50
 800501e:	d873      	bhi.n	8005108 <HAL_TIM_ConfigClockSource+0x16c>
 8005020:	2b40      	cmp	r3, #64	; 0x40
 8005022:	d058      	beq.n	80050d6 <HAL_TIM_ConfigClockSource+0x13a>
 8005024:	2b40      	cmp	r3, #64	; 0x40
 8005026:	d86f      	bhi.n	8005108 <HAL_TIM_ConfigClockSource+0x16c>
 8005028:	2b30      	cmp	r3, #48	; 0x30
 800502a:	d064      	beq.n	80050f6 <HAL_TIM_ConfigClockSource+0x15a>
 800502c:	2b30      	cmp	r3, #48	; 0x30
 800502e:	d86b      	bhi.n	8005108 <HAL_TIM_ConfigClockSource+0x16c>
 8005030:	2b20      	cmp	r3, #32
 8005032:	d060      	beq.n	80050f6 <HAL_TIM_ConfigClockSource+0x15a>
 8005034:	2b20      	cmp	r3, #32
 8005036:	d867      	bhi.n	8005108 <HAL_TIM_ConfigClockSource+0x16c>
 8005038:	2b00      	cmp	r3, #0
 800503a:	d05c      	beq.n	80050f6 <HAL_TIM_ConfigClockSource+0x15a>
 800503c:	2b10      	cmp	r3, #16
 800503e:	d05a      	beq.n	80050f6 <HAL_TIM_ConfigClockSource+0x15a>
 8005040:	e062      	b.n	8005108 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	6818      	ldr	r0, [r3, #0]
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	6899      	ldr	r1, [r3, #8]
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	685a      	ldr	r2, [r3, #4]
 800504e:	683b      	ldr	r3, [r7, #0]
 8005050:	68db      	ldr	r3, [r3, #12]
 8005052:	f000 f944 	bl	80052de <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	689b      	ldr	r3, [r3, #8]
 800505c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800505e:	68bb      	ldr	r3, [r7, #8]
 8005060:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005064:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005066:	687b      	ldr	r3, [r7, #4]
 8005068:	681b      	ldr	r3, [r3, #0]
 800506a:	68ba      	ldr	r2, [r7, #8]
 800506c:	609a      	str	r2, [r3, #8]
      break;
 800506e:	e04f      	b.n	8005110 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	6818      	ldr	r0, [r3, #0]
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	6899      	ldr	r1, [r3, #8]
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	685a      	ldr	r2, [r3, #4]
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	68db      	ldr	r3, [r3, #12]
 8005080:	f000 f92d 	bl	80052de <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	681b      	ldr	r3, [r3, #0]
 8005088:	689a      	ldr	r2, [r3, #8]
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005092:	609a      	str	r2, [r3, #8]
      break;
 8005094:	e03c      	b.n	8005110 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	6818      	ldr	r0, [r3, #0]
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	6859      	ldr	r1, [r3, #4]
 800509e:	683b      	ldr	r3, [r7, #0]
 80050a0:	68db      	ldr	r3, [r3, #12]
 80050a2:	461a      	mov	r2, r3
 80050a4:	f000 f8a4 	bl	80051f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80050a8:	687b      	ldr	r3, [r7, #4]
 80050aa:	681b      	ldr	r3, [r3, #0]
 80050ac:	2150      	movs	r1, #80	; 0x50
 80050ae:	4618      	mov	r0, r3
 80050b0:	f000 f8fb 	bl	80052aa <TIM_ITRx_SetConfig>
      break;
 80050b4:	e02c      	b.n	8005110 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	6818      	ldr	r0, [r3, #0]
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	6859      	ldr	r1, [r3, #4]
 80050be:	683b      	ldr	r3, [r7, #0]
 80050c0:	68db      	ldr	r3, [r3, #12]
 80050c2:	461a      	mov	r2, r3
 80050c4:	f000 f8c2 	bl	800524c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	2160      	movs	r1, #96	; 0x60
 80050ce:	4618      	mov	r0, r3
 80050d0:	f000 f8eb 	bl	80052aa <TIM_ITRx_SetConfig>
      break;
 80050d4:	e01c      	b.n	8005110 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	6818      	ldr	r0, [r3, #0]
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	6859      	ldr	r1, [r3, #4]
 80050de:	683b      	ldr	r3, [r7, #0]
 80050e0:	68db      	ldr	r3, [r3, #12]
 80050e2:	461a      	mov	r2, r3
 80050e4:	f000 f884 	bl	80051f0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	2140      	movs	r1, #64	; 0x40
 80050ee:	4618      	mov	r0, r3
 80050f0:	f000 f8db 	bl	80052aa <TIM_ITRx_SetConfig>
      break;
 80050f4:	e00c      	b.n	8005110 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4619      	mov	r1, r3
 8005100:	4610      	mov	r0, r2
 8005102:	f000 f8d2 	bl	80052aa <TIM_ITRx_SetConfig>
      break;
 8005106:	e003      	b.n	8005110 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005108:	2301      	movs	r3, #1
 800510a:	73fb      	strb	r3, [r7, #15]
      break;
 800510c:	e000      	b.n	8005110 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800510e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2201      	movs	r2, #1
 8005114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005120:	7bfb      	ldrb	r3, [r7, #15]
}
 8005122:	4618      	mov	r0, r3
 8005124:	3710      	adds	r7, #16
 8005126:	46bd      	mov	sp, r7
 8005128:	bd80      	pop	{r7, pc}
	...

0800512c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800512c:	b480      	push	{r7}
 800512e:	b085      	sub	sp, #20
 8005130:	af00      	add	r7, sp, #0
 8005132:	6078      	str	r0, [r7, #4]
 8005134:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	4a29      	ldr	r2, [pc, #164]	; (80051e4 <TIM_Base_SetConfig+0xb8>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d00b      	beq.n	800515c <TIM_Base_SetConfig+0x30>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800514a:	d007      	beq.n	800515c <TIM_Base_SetConfig+0x30>
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	4a26      	ldr	r2, [pc, #152]	; (80051e8 <TIM_Base_SetConfig+0xbc>)
 8005150:	4293      	cmp	r3, r2
 8005152:	d003      	beq.n	800515c <TIM_Base_SetConfig+0x30>
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	4a25      	ldr	r2, [pc, #148]	; (80051ec <TIM_Base_SetConfig+0xc0>)
 8005158:	4293      	cmp	r3, r2
 800515a:	d108      	bne.n	800516e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005162:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	4313      	orrs	r3, r2
 800516c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	4a1c      	ldr	r2, [pc, #112]	; (80051e4 <TIM_Base_SetConfig+0xb8>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d00b      	beq.n	800518e <TIM_Base_SetConfig+0x62>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800517c:	d007      	beq.n	800518e <TIM_Base_SetConfig+0x62>
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	4a19      	ldr	r2, [pc, #100]	; (80051e8 <TIM_Base_SetConfig+0xbc>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d003      	beq.n	800518e <TIM_Base_SetConfig+0x62>
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	4a18      	ldr	r2, [pc, #96]	; (80051ec <TIM_Base_SetConfig+0xc0>)
 800518a:	4293      	cmp	r3, r2
 800518c:	d108      	bne.n	80051a0 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005194:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005196:	683b      	ldr	r3, [r7, #0]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	68fa      	ldr	r2, [r7, #12]
 800519c:	4313      	orrs	r3, r2
 800519e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80051a0:	68fb      	ldr	r3, [r7, #12]
 80051a2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80051a6:	683b      	ldr	r3, [r7, #0]
 80051a8:	695b      	ldr	r3, [r3, #20]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	68fa      	ldr	r2, [r7, #12]
 80051b2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	689a      	ldr	r2, [r3, #8]
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	681a      	ldr	r2, [r3, #0]
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	4a07      	ldr	r2, [pc, #28]	; (80051e4 <TIM_Base_SetConfig+0xb8>)
 80051c8:	4293      	cmp	r3, r2
 80051ca:	d103      	bne.n	80051d4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80051cc:	683b      	ldr	r3, [r7, #0]
 80051ce:	691a      	ldr	r2, [r3, #16]
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	615a      	str	r2, [r3, #20]
}
 80051da:	bf00      	nop
 80051dc:	3714      	adds	r7, #20
 80051de:	46bd      	mov	sp, r7
 80051e0:	bc80      	pop	{r7}
 80051e2:	4770      	bx	lr
 80051e4:	40012c00 	.word	0x40012c00
 80051e8:	40000400 	.word	0x40000400
 80051ec:	40000800 	.word	0x40000800

080051f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80051f0:	b480      	push	{r7}
 80051f2:	b087      	sub	sp, #28
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	60f8      	str	r0, [r7, #12]
 80051f8:	60b9      	str	r1, [r7, #8]
 80051fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	6a1b      	ldr	r3, [r3, #32]
 8005200:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	f023 0201 	bic.w	r2, r3, #1
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800521a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	011b      	lsls	r3, r3, #4
 8005220:	693a      	ldr	r2, [r7, #16]
 8005222:	4313      	orrs	r3, r2
 8005224:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005226:	697b      	ldr	r3, [r7, #20]
 8005228:	f023 030a 	bic.w	r3, r3, #10
 800522c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800522e:	697a      	ldr	r2, [r7, #20]
 8005230:	68bb      	ldr	r3, [r7, #8]
 8005232:	4313      	orrs	r3, r2
 8005234:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	693a      	ldr	r2, [r7, #16]
 800523a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	697a      	ldr	r2, [r7, #20]
 8005240:	621a      	str	r2, [r3, #32]
}
 8005242:	bf00      	nop
 8005244:	371c      	adds	r7, #28
 8005246:	46bd      	mov	sp, r7
 8005248:	bc80      	pop	{r7}
 800524a:	4770      	bx	lr

0800524c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800524c:	b480      	push	{r7}
 800524e:	b087      	sub	sp, #28
 8005250:	af00      	add	r7, sp, #0
 8005252:	60f8      	str	r0, [r7, #12]
 8005254:	60b9      	str	r1, [r7, #8]
 8005256:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	6a1b      	ldr	r3, [r3, #32]
 800525c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	6a1b      	ldr	r3, [r3, #32]
 8005262:	f023 0210 	bic.w	r2, r3, #16
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005276:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	031b      	lsls	r3, r3, #12
 800527c:	693a      	ldr	r2, [r7, #16]
 800527e:	4313      	orrs	r3, r2
 8005280:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005282:	697b      	ldr	r3, [r7, #20]
 8005284:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005288:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	011b      	lsls	r3, r3, #4
 800528e:	697a      	ldr	r2, [r7, #20]
 8005290:	4313      	orrs	r3, r2
 8005292:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	693a      	ldr	r2, [r7, #16]
 8005298:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	697a      	ldr	r2, [r7, #20]
 800529e:	621a      	str	r2, [r3, #32]
}
 80052a0:	bf00      	nop
 80052a2:	371c      	adds	r7, #28
 80052a4:	46bd      	mov	sp, r7
 80052a6:	bc80      	pop	{r7}
 80052a8:	4770      	bx	lr

080052aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80052aa:	b480      	push	{r7}
 80052ac:	b085      	sub	sp, #20
 80052ae:	af00      	add	r7, sp, #0
 80052b0:	6078      	str	r0, [r7, #4]
 80052b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80052ba:	68fb      	ldr	r3, [r7, #12]
 80052bc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80052c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80052c2:	683a      	ldr	r2, [r7, #0]
 80052c4:	68fb      	ldr	r3, [r7, #12]
 80052c6:	4313      	orrs	r3, r2
 80052c8:	f043 0307 	orr.w	r3, r3, #7
 80052cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	609a      	str	r2, [r3, #8]
}
 80052d4:	bf00      	nop
 80052d6:	3714      	adds	r7, #20
 80052d8:	46bd      	mov	sp, r7
 80052da:	bc80      	pop	{r7}
 80052dc:	4770      	bx	lr

080052de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80052de:	b480      	push	{r7}
 80052e0:	b087      	sub	sp, #28
 80052e2:	af00      	add	r7, sp, #0
 80052e4:	60f8      	str	r0, [r7, #12]
 80052e6:	60b9      	str	r1, [r7, #8]
 80052e8:	607a      	str	r2, [r7, #4]
 80052ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	689b      	ldr	r3, [r3, #8]
 80052f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80052f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	021a      	lsls	r2, r3, #8
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	431a      	orrs	r2, r3
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	4313      	orrs	r3, r2
 8005306:	697a      	ldr	r2, [r7, #20]
 8005308:	4313      	orrs	r3, r2
 800530a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	697a      	ldr	r2, [r7, #20]
 8005310:	609a      	str	r2, [r3, #8]
}
 8005312:	bf00      	nop
 8005314:	371c      	adds	r7, #28
 8005316:	46bd      	mov	sp, r7
 8005318:	bc80      	pop	{r7}
 800531a:	4770      	bx	lr

0800531c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800531c:	b480      	push	{r7}
 800531e:	b085      	sub	sp, #20
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
 8005324:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800532c:	2b01      	cmp	r3, #1
 800532e:	d101      	bne.n	8005334 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005330:	2302      	movs	r3, #2
 8005332:	e046      	b.n	80053c2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	2201      	movs	r2, #1
 8005338:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	2202      	movs	r2, #2
 8005340:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	689b      	ldr	r3, [r3, #8]
 8005352:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800535a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68fa      	ldr	r2, [r7, #12]
 8005362:	4313      	orrs	r3, r2
 8005364:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	68fa      	ldr	r2, [r7, #12]
 800536c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	4a16      	ldr	r2, [pc, #88]	; (80053cc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8005374:	4293      	cmp	r3, r2
 8005376:	d00e      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005380:	d009      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	4a12      	ldr	r2, [pc, #72]	; (80053d0 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8005388:	4293      	cmp	r3, r2
 800538a:	d004      	beq.n	8005396 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	4a10      	ldr	r2, [pc, #64]	; (80053d4 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8005392:	4293      	cmp	r3, r2
 8005394:	d10c      	bne.n	80053b0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005396:	68bb      	ldr	r3, [r7, #8]
 8005398:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800539c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800539e:	683b      	ldr	r3, [r7, #0]
 80053a0:	685b      	ldr	r3, [r3, #4]
 80053a2:	68ba      	ldr	r2, [r7, #8]
 80053a4:	4313      	orrs	r3, r2
 80053a6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	68ba      	ldr	r2, [r7, #8]
 80053ae:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	2201      	movs	r2, #1
 80053b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	2200      	movs	r2, #0
 80053bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80053c0:	2300      	movs	r3, #0
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	bc80      	pop	{r7}
 80053ca:	4770      	bx	lr
 80053cc:	40012c00 	.word	0x40012c00
 80053d0:	40000400 	.word	0x40000400
 80053d4:	40000800 	.word	0x40000800

080053d8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80053d8:	b580      	push	{r7, lr}
 80053da:	b082      	sub	sp, #8
 80053dc:	af00      	add	r7, sp, #0
 80053de:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d101      	bne.n	80053ea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80053e6:	2301      	movs	r3, #1
 80053e8:	e042      	b.n	8005470 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80053f0:	b2db      	uxtb	r3, r3
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d106      	bne.n	8005404 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	2200      	movs	r2, #0
 80053fa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80053fe:	6878      	ldr	r0, [r7, #4]
 8005400:	f7fd fb58 	bl	8002ab4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	2224      	movs	r2, #36	; 0x24
 8005408:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	68da      	ldr	r2, [r3, #12]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800541a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800541c:	6878      	ldr	r0, [r7, #4]
 800541e:	f000 fdc5 	bl	8005fac <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	691a      	ldr	r2, [r3, #16]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005430:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	695a      	ldr	r2, [r3, #20]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005440:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	681b      	ldr	r3, [r3, #0]
 8005446:	68da      	ldr	r2, [r3, #12]
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005450:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	2200      	movs	r2, #0
 8005456:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2220      	movs	r2, #32
 800545c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	2220      	movs	r2, #32
 8005464:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	2200      	movs	r2, #0
 800546c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800546e:	2300      	movs	r3, #0
}
 8005470:	4618      	mov	r0, r3
 8005472:	3708      	adds	r7, #8
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b08a      	sub	sp, #40	; 0x28
 800547c:	af02      	add	r7, sp, #8
 800547e:	60f8      	str	r0, [r7, #12]
 8005480:	60b9      	str	r1, [r7, #8]
 8005482:	603b      	str	r3, [r7, #0]
 8005484:	4613      	mov	r3, r2
 8005486:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005488:	2300      	movs	r3, #0
 800548a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800548c:	68fb      	ldr	r3, [r7, #12]
 800548e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005492:	b2db      	uxtb	r3, r3
 8005494:	2b20      	cmp	r3, #32
 8005496:	d16d      	bne.n	8005574 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d002      	beq.n	80054a4 <HAL_UART_Transmit+0x2c>
 800549e:	88fb      	ldrh	r3, [r7, #6]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d101      	bne.n	80054a8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80054a4:	2301      	movs	r3, #1
 80054a6:	e066      	b.n	8005576 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	2200      	movs	r2, #0
 80054ac:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	2221      	movs	r2, #33	; 0x21
 80054b2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80054b6:	f7fd fcdb 	bl	8002e70 <HAL_GetTick>
 80054ba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80054bc:	68fb      	ldr	r3, [r7, #12]
 80054be:	88fa      	ldrh	r2, [r7, #6]
 80054c0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	88fa      	ldrh	r2, [r7, #6]
 80054c6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	689b      	ldr	r3, [r3, #8]
 80054cc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054d0:	d108      	bne.n	80054e4 <HAL_UART_Transmit+0x6c>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	691b      	ldr	r3, [r3, #16]
 80054d6:	2b00      	cmp	r3, #0
 80054d8:	d104      	bne.n	80054e4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80054da:	2300      	movs	r3, #0
 80054dc:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80054de:	68bb      	ldr	r3, [r7, #8]
 80054e0:	61bb      	str	r3, [r7, #24]
 80054e2:	e003      	b.n	80054ec <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80054e8:	2300      	movs	r3, #0
 80054ea:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80054ec:	e02a      	b.n	8005544 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80054ee:	683b      	ldr	r3, [r7, #0]
 80054f0:	9300      	str	r3, [sp, #0]
 80054f2:	697b      	ldr	r3, [r7, #20]
 80054f4:	2200      	movs	r2, #0
 80054f6:	2180      	movs	r1, #128	; 0x80
 80054f8:	68f8      	ldr	r0, [r7, #12]
 80054fa:	f000 fb14 	bl	8005b26 <UART_WaitOnFlagUntilTimeout>
 80054fe:	4603      	mov	r3, r0
 8005500:	2b00      	cmp	r3, #0
 8005502:	d001      	beq.n	8005508 <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8005504:	2303      	movs	r3, #3
 8005506:	e036      	b.n	8005576 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8005508:	69fb      	ldr	r3, [r7, #28]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d10b      	bne.n	8005526 <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	881b      	ldrh	r3, [r3, #0]
 8005512:	461a      	mov	r2, r3
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800551c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800551e:	69bb      	ldr	r3, [r7, #24]
 8005520:	3302      	adds	r3, #2
 8005522:	61bb      	str	r3, [r7, #24]
 8005524:	e007      	b.n	8005536 <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005526:	69fb      	ldr	r3, [r7, #28]
 8005528:	781a      	ldrb	r2, [r3, #0]
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005530:	69fb      	ldr	r3, [r7, #28]
 8005532:	3301      	adds	r3, #1
 8005534:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800553a:	b29b      	uxth	r3, r3
 800553c:	3b01      	subs	r3, #1
 800553e:	b29a      	uxth	r2, r3
 8005540:	68fb      	ldr	r3, [r7, #12]
 8005542:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005548:	b29b      	uxth	r3, r3
 800554a:	2b00      	cmp	r3, #0
 800554c:	d1cf      	bne.n	80054ee <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800554e:	683b      	ldr	r3, [r7, #0]
 8005550:	9300      	str	r3, [sp, #0]
 8005552:	697b      	ldr	r3, [r7, #20]
 8005554:	2200      	movs	r2, #0
 8005556:	2140      	movs	r1, #64	; 0x40
 8005558:	68f8      	ldr	r0, [r7, #12]
 800555a:	f000 fae4 	bl	8005b26 <UART_WaitOnFlagUntilTimeout>
 800555e:	4603      	mov	r3, r0
 8005560:	2b00      	cmp	r3, #0
 8005562:	d001      	beq.n	8005568 <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8005564:	2303      	movs	r3, #3
 8005566:	e006      	b.n	8005576 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	2220      	movs	r2, #32
 800556c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8005570:	2300      	movs	r3, #0
 8005572:	e000      	b.n	8005576 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8005574:	2302      	movs	r3, #2
  }
}
 8005576:	4618      	mov	r0, r3
 8005578:	3720      	adds	r7, #32
 800557a:	46bd      	mov	sp, r7
 800557c:	bd80      	pop	{r7, pc}

0800557e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800557e:	b580      	push	{r7, lr}
 8005580:	b084      	sub	sp, #16
 8005582:	af00      	add	r7, sp, #0
 8005584:	60f8      	str	r0, [r7, #12]
 8005586:	60b9      	str	r1, [r7, #8]
 8005588:	4613      	mov	r3, r2
 800558a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005592:	b2db      	uxtb	r3, r3
 8005594:	2b20      	cmp	r3, #32
 8005596:	d112      	bne.n	80055be <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005598:	68bb      	ldr	r3, [r7, #8]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d002      	beq.n	80055a4 <HAL_UART_Receive_IT+0x26>
 800559e:	88fb      	ldrh	r3, [r7, #6]
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d101      	bne.n	80055a8 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80055a4:	2301      	movs	r3, #1
 80055a6:	e00b      	b.n	80055c0 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	2200      	movs	r2, #0
 80055ac:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80055ae:	88fb      	ldrh	r3, [r7, #6]
 80055b0:	461a      	mov	r2, r3
 80055b2:	68b9      	ldr	r1, [r7, #8]
 80055b4:	68f8      	ldr	r0, [r7, #12]
 80055b6:	f000 fb24 	bl	8005c02 <UART_Start_Receive_IT>
 80055ba:	4603      	mov	r3, r0
 80055bc:	e000      	b.n	80055c0 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80055be:	2302      	movs	r3, #2
  }
}
 80055c0:	4618      	mov	r0, r3
 80055c2:	3710      	adds	r7, #16
 80055c4:	46bd      	mov	sp, r7
 80055c6:	bd80      	pop	{r7, pc}

080055c8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80055c8:	b580      	push	{r7, lr}
 80055ca:	b0ba      	sub	sp, #232	; 0xe8
 80055cc:	af00      	add	r7, sp, #0
 80055ce:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68db      	ldr	r3, [r3, #12]
 80055e0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 80055ee:	2300      	movs	r3, #0
 80055f0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 80055f4:	2300      	movs	r3, #0
 80055f6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80055fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80055fe:	f003 030f 	and.w	r3, r3, #15
 8005602:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8005606:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800560a:	2b00      	cmp	r3, #0
 800560c:	d10f      	bne.n	800562e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800560e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005612:	f003 0320 	and.w	r3, r3, #32
 8005616:	2b00      	cmp	r3, #0
 8005618:	d009      	beq.n	800562e <HAL_UART_IRQHandler+0x66>
 800561a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800561e:	f003 0320 	and.w	r3, r3, #32
 8005622:	2b00      	cmp	r3, #0
 8005624:	d003      	beq.n	800562e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	f000 fc01 	bl	8005e2e <UART_Receive_IT>
      return;
 800562c:	e25b      	b.n	8005ae6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800562e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005632:	2b00      	cmp	r3, #0
 8005634:	f000 80de 	beq.w	80057f4 <HAL_UART_IRQHandler+0x22c>
 8005638:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800563c:	f003 0301 	and.w	r3, r3, #1
 8005640:	2b00      	cmp	r3, #0
 8005642:	d106      	bne.n	8005652 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005644:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005648:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800564c:	2b00      	cmp	r3, #0
 800564e:	f000 80d1 	beq.w	80057f4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005652:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005656:	f003 0301 	and.w	r3, r3, #1
 800565a:	2b00      	cmp	r3, #0
 800565c:	d00b      	beq.n	8005676 <HAL_UART_IRQHandler+0xae>
 800565e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005662:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005666:	2b00      	cmp	r3, #0
 8005668:	d005      	beq.n	8005676 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800566e:	f043 0201 	orr.w	r2, r3, #1
 8005672:	687b      	ldr	r3, [r7, #4]
 8005674:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005676:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800567a:	f003 0304 	and.w	r3, r3, #4
 800567e:	2b00      	cmp	r3, #0
 8005680:	d00b      	beq.n	800569a <HAL_UART_IRQHandler+0xd2>
 8005682:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005686:	f003 0301 	and.w	r3, r3, #1
 800568a:	2b00      	cmp	r3, #0
 800568c:	d005      	beq.n	800569a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005692:	f043 0202 	orr.w	r2, r3, #2
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800569a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d00b      	beq.n	80056be <HAL_UART_IRQHandler+0xf6>
 80056a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056aa:	f003 0301 	and.w	r3, r3, #1
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d005      	beq.n	80056be <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056b6:	f043 0204 	orr.w	r2, r3, #4
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80056be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056c2:	f003 0308 	and.w	r3, r3, #8
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	d011      	beq.n	80056ee <HAL_UART_IRQHandler+0x126>
 80056ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80056ce:	f003 0320 	and.w	r3, r3, #32
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d105      	bne.n	80056e2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80056d6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80056da:	f003 0301 	and.w	r3, r3, #1
 80056de:	2b00      	cmp	r3, #0
 80056e0:	d005      	beq.n	80056ee <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056e6:	f043 0208 	orr.w	r2, r3, #8
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f000 81f2 	beq.w	8005adc <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80056f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80056fc:	f003 0320 	and.w	r3, r3, #32
 8005700:	2b00      	cmp	r3, #0
 8005702:	d008      	beq.n	8005716 <HAL_UART_IRQHandler+0x14e>
 8005704:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005708:	f003 0320 	and.w	r3, r3, #32
 800570c:	2b00      	cmp	r3, #0
 800570e:	d002      	beq.n	8005716 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f000 fb8c 	bl	8005e2e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	695b      	ldr	r3, [r3, #20]
 800571c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005720:	2b00      	cmp	r3, #0
 8005722:	bf14      	ite	ne
 8005724:	2301      	movne	r3, #1
 8005726:	2300      	moveq	r3, #0
 8005728:	b2db      	uxtb	r3, r3
 800572a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005732:	f003 0308 	and.w	r3, r3, #8
 8005736:	2b00      	cmp	r3, #0
 8005738:	d103      	bne.n	8005742 <HAL_UART_IRQHandler+0x17a>
 800573a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800573e:	2b00      	cmp	r3, #0
 8005740:	d04f      	beq.n	80057e2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005742:	6878      	ldr	r0, [r7, #4]
 8005744:	f000 fa96 	bl	8005c74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	695b      	ldr	r3, [r3, #20]
 800574e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005752:	2b00      	cmp	r3, #0
 8005754:	d041      	beq.n	80057da <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	3314      	adds	r3, #20
 800575c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005760:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8005764:	e853 3f00 	ldrex	r3, [r3]
 8005768:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800576c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005770:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005774:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	681b      	ldr	r3, [r3, #0]
 800577c:	3314      	adds	r3, #20
 800577e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8005782:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8005786:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800578a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800578e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8005792:	e841 2300 	strex	r3, r2, [r1]
 8005796:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800579a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d1d9      	bne.n	8005756 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d013      	beq.n	80057d2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057ae:	4a7e      	ldr	r2, [pc, #504]	; (80059a8 <HAL_UART_IRQHandler+0x3e0>)
 80057b0:	635a      	str	r2, [r3, #52]	; 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057b6:	4618      	mov	r0, r3
 80057b8:	f7fe fb30 	bl	8003e1c <HAL_DMA_Abort_IT>
 80057bc:	4603      	mov	r3, r0
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d016      	beq.n	80057f0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80057c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80057c8:	687a      	ldr	r2, [r7, #4]
 80057ca:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80057cc:	4610      	mov	r0, r2
 80057ce:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057d0:	e00e      	b.n	80057f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80057d2:	6878      	ldr	r0, [r7, #4]
 80057d4:	f000 f993 	bl	8005afe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057d8:	e00a      	b.n	80057f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80057da:	6878      	ldr	r0, [r7, #4]
 80057dc:	f000 f98f 	bl	8005afe <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057e0:	e006      	b.n	80057f0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80057e2:	6878      	ldr	r0, [r7, #4]
 80057e4:	f000 f98b 	bl	8005afe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	2200      	movs	r2, #0
 80057ec:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 80057ee:	e175      	b.n	8005adc <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80057f0:	bf00      	nop
    return;
 80057f2:	e173      	b.n	8005adc <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80057f8:	2b01      	cmp	r3, #1
 80057fa:	f040 814f 	bne.w	8005a9c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80057fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005802:	f003 0310 	and.w	r3, r3, #16
 8005806:	2b00      	cmp	r3, #0
 8005808:	f000 8148 	beq.w	8005a9c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800580c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005810:	f003 0310 	and.w	r3, r3, #16
 8005814:	2b00      	cmp	r3, #0
 8005816:	f000 8141 	beq.w	8005a9c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800581a:	2300      	movs	r3, #0
 800581c:	60bb      	str	r3, [r7, #8]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	60bb      	str	r3, [r7, #8]
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	685b      	ldr	r3, [r3, #4]
 800582c:	60bb      	str	r3, [r7, #8]
 800582e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005830:	687b      	ldr	r3, [r7, #4]
 8005832:	681b      	ldr	r3, [r3, #0]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800583a:	2b00      	cmp	r3, #0
 800583c:	f000 80b6 	beq.w	80059ac <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005844:	681b      	ldr	r3, [r3, #0]
 8005846:	685b      	ldr	r3, [r3, #4]
 8005848:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800584c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8005850:	2b00      	cmp	r3, #0
 8005852:	f000 8145 	beq.w	8005ae0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800585a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800585e:	429a      	cmp	r2, r3
 8005860:	f080 813e 	bcs.w	8005ae0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800586a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005870:	699b      	ldr	r3, [r3, #24]
 8005872:	2b20      	cmp	r3, #32
 8005874:	f000 8088 	beq.w	8005988 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	330c      	adds	r3, #12
 800587e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005882:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005886:	e853 3f00 	ldrex	r3, [r3]
 800588a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800588e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005892:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005896:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	330c      	adds	r3, #12
 80058a0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80058a4:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80058a8:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ac:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80058b0:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80058b4:	e841 2300 	strex	r3, r2, [r1]
 80058b8:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80058bc:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d1d9      	bne.n	8005878 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	681b      	ldr	r3, [r3, #0]
 80058c8:	3314      	adds	r3, #20
 80058ca:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80058cc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80058ce:	e853 3f00 	ldrex	r3, [r3]
 80058d2:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80058d4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80058d6:	f023 0301 	bic.w	r3, r3, #1
 80058da:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	3314      	adds	r3, #20
 80058e4:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80058e8:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80058ec:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ee:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80058f0:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80058f4:	e841 2300 	strex	r3, r2, [r1]
 80058f8:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80058fa:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d1e1      	bne.n	80058c4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	3314      	adds	r3, #20
 8005906:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005908:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800590a:	e853 3f00 	ldrex	r3, [r3]
 800590e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8005910:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005912:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005916:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	3314      	adds	r3, #20
 8005920:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8005924:	66fa      	str	r2, [r7, #108]	; 0x6c
 8005926:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005928:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800592a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800592c:	e841 2300 	strex	r3, r2, [r1]
 8005930:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8005932:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8005934:	2b00      	cmp	r3, #0
 8005936:	d1e3      	bne.n	8005900 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2220      	movs	r2, #32
 800593c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2200      	movs	r2, #0
 8005944:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	330c      	adds	r3, #12
 800594c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005950:	e853 3f00 	ldrex	r3, [r3]
 8005954:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8005956:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005958:	f023 0310 	bic.w	r3, r3, #16
 800595c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	330c      	adds	r3, #12
 8005966:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800596a:	65ba      	str	r2, [r7, #88]	; 0x58
 800596c:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8005970:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8005972:	e841 2300 	strex	r3, r2, [r1]
 8005976:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8005978:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1e3      	bne.n	8005946 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005982:	4618      	mov	r0, r3
 8005984:	f7fe fa0e 	bl	8003da4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2202      	movs	r2, #2
 800598c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005996:	b29b      	uxth	r3, r3
 8005998:	1ad3      	subs	r3, r2, r3
 800599a:	b29b      	uxth	r3, r3
 800599c:	4619      	mov	r1, r3
 800599e:	6878      	ldr	r0, [r7, #4]
 80059a0:	f000 f8b6 	bl	8005b10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059a4:	e09c      	b.n	8005ae0 <HAL_UART_IRQHandler+0x518>
 80059a6:	bf00      	nop
 80059a8:	08005d39 	.word	0x08005d39
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059b4:	b29b      	uxth	r3, r3
 80059b6:	1ad3      	subs	r3, r2, r3
 80059b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80059c0:	b29b      	uxth	r3, r3
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	f000 808e 	beq.w	8005ae4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80059c8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	f000 8089 	beq.w	8005ae4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	330c      	adds	r3, #12
 80059d8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80059dc:	e853 3f00 	ldrex	r3, [r3]
 80059e0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80059e2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059e4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80059e8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	681b      	ldr	r3, [r3, #0]
 80059f0:	330c      	adds	r3, #12
 80059f2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80059f6:	647a      	str	r2, [r7, #68]	; 0x44
 80059f8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059fa:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80059fc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059fe:	e841 2300 	strex	r3, r2, [r1]
 8005a02:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8005a04:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d1e3      	bne.n	80059d2 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	681b      	ldr	r3, [r3, #0]
 8005a0e:	3314      	adds	r3, #20
 8005a10:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005a14:	e853 3f00 	ldrex	r3, [r3]
 8005a18:	623b      	str	r3, [r7, #32]
   return(result);
 8005a1a:	6a3b      	ldr	r3, [r7, #32]
 8005a1c:	f023 0301 	bic.w	r3, r3, #1
 8005a20:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	681b      	ldr	r3, [r3, #0]
 8005a28:	3314      	adds	r3, #20
 8005a2a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8005a2e:	633a      	str	r2, [r7, #48]	; 0x30
 8005a30:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a32:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8005a34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005a36:	e841 2300 	strex	r3, r2, [r1]
 8005a3a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8005a3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d1e3      	bne.n	8005a0a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2220      	movs	r2, #32
 8005a46:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	2200      	movs	r2, #0
 8005a4e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	330c      	adds	r3, #12
 8005a56:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005a58:	693b      	ldr	r3, [r7, #16]
 8005a5a:	e853 3f00 	ldrex	r3, [r3]
 8005a5e:	60fb      	str	r3, [r7, #12]
   return(result);
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	f023 0310 	bic.w	r3, r3, #16
 8005a66:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	681b      	ldr	r3, [r3, #0]
 8005a6e:	330c      	adds	r3, #12
 8005a70:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8005a74:	61fa      	str	r2, [r7, #28]
 8005a76:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005a78:	69b9      	ldr	r1, [r7, #24]
 8005a7a:	69fa      	ldr	r2, [r7, #28]
 8005a7c:	e841 2300 	strex	r3, r2, [r1]
 8005a80:	617b      	str	r3, [r7, #20]
   return(result);
 8005a82:	697b      	ldr	r3, [r7, #20]
 8005a84:	2b00      	cmp	r3, #0
 8005a86:	d1e3      	bne.n	8005a50 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2202      	movs	r2, #2
 8005a8c:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005a8e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8005a92:	4619      	mov	r1, r3
 8005a94:	6878      	ldr	r0, [r7, #4]
 8005a96:	f000 f83b 	bl	8005b10 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8005a9a:	e023      	b.n	8005ae4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005a9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005aa0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d009      	beq.n	8005abc <HAL_UART_IRQHandler+0x4f4>
 8005aa8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005aac:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d003      	beq.n	8005abc <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8005ab4:	6878      	ldr	r0, [r7, #4]
 8005ab6:	f000 f953 	bl	8005d60 <UART_Transmit_IT>
    return;
 8005aba:	e014      	b.n	8005ae6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8005abc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ac0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ac4:	2b00      	cmp	r3, #0
 8005ac6:	d00e      	beq.n	8005ae6 <HAL_UART_IRQHandler+0x51e>
 8005ac8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005acc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d008      	beq.n	8005ae6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005ad4:	6878      	ldr	r0, [r7, #4]
 8005ad6:	f000 f992 	bl	8005dfe <UART_EndTransmit_IT>
    return;
 8005ada:	e004      	b.n	8005ae6 <HAL_UART_IRQHandler+0x51e>
    return;
 8005adc:	bf00      	nop
 8005ade:	e002      	b.n	8005ae6 <HAL_UART_IRQHandler+0x51e>
      return;
 8005ae0:	bf00      	nop
 8005ae2:	e000      	b.n	8005ae6 <HAL_UART_IRQHandler+0x51e>
      return;
 8005ae4:	bf00      	nop
  }
}
 8005ae6:	37e8      	adds	r7, #232	; 0xe8
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	bd80      	pop	{r7, pc}

08005aec <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005aec:	b480      	push	{r7}
 8005aee:	b083      	sub	sp, #12
 8005af0:	af00      	add	r7, sp, #0
 8005af2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005af4:	bf00      	nop
 8005af6:	370c      	adds	r7, #12
 8005af8:	46bd      	mov	sp, r7
 8005afa:	bc80      	pop	{r7}
 8005afc:	4770      	bx	lr

08005afe <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005afe:	b480      	push	{r7}
 8005b00:	b083      	sub	sp, #12
 8005b02:	af00      	add	r7, sp, #0
 8005b04:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005b06:	bf00      	nop
 8005b08:	370c      	adds	r7, #12
 8005b0a:	46bd      	mov	sp, r7
 8005b0c:	bc80      	pop	{r7}
 8005b0e:	4770      	bx	lr

08005b10 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b083      	sub	sp, #12
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	6078      	str	r0, [r7, #4]
 8005b18:	460b      	mov	r3, r1
 8005b1a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005b1c:	bf00      	nop
 8005b1e:	370c      	adds	r7, #12
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bc80      	pop	{r7}
 8005b24:	4770      	bx	lr

08005b26 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005b26:	b580      	push	{r7, lr}
 8005b28:	b090      	sub	sp, #64	; 0x40
 8005b2a:	af00      	add	r7, sp, #0
 8005b2c:	60f8      	str	r0, [r7, #12]
 8005b2e:	60b9      	str	r1, [r7, #8]
 8005b30:	603b      	str	r3, [r7, #0]
 8005b32:	4613      	mov	r3, r2
 8005b34:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005b36:	e050      	b.n	8005bda <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005b38:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b3e:	d04c      	beq.n	8005bda <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8005b40:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d007      	beq.n	8005b56 <UART_WaitOnFlagUntilTimeout+0x30>
 8005b46:	f7fd f993 	bl	8002e70 <HAL_GetTick>
 8005b4a:	4602      	mov	r2, r0
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	1ad3      	subs	r3, r2, r3
 8005b50:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005b52:	429a      	cmp	r2, r3
 8005b54:	d241      	bcs.n	8005bda <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	330c      	adds	r3, #12
 8005b5c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005b60:	e853 3f00 	ldrex	r3, [r3]
 8005b64:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005b66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b68:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8005b6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	330c      	adds	r3, #12
 8005b74:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005b76:	637a      	str	r2, [r7, #52]	; 0x34
 8005b78:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b7a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8005b7c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005b7e:	e841 2300 	strex	r3, r2, [r1]
 8005b82:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8005b84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b86:	2b00      	cmp	r3, #0
 8005b88:	d1e5      	bne.n	8005b56 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	3314      	adds	r3, #20
 8005b90:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b92:	697b      	ldr	r3, [r7, #20]
 8005b94:	e853 3f00 	ldrex	r3, [r3]
 8005b98:	613b      	str	r3, [r7, #16]
   return(result);
 8005b9a:	693b      	ldr	r3, [r7, #16]
 8005b9c:	f023 0301 	bic.w	r3, r3, #1
 8005ba0:	63bb      	str	r3, [r7, #56]	; 0x38
 8005ba2:	68fb      	ldr	r3, [r7, #12]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	3314      	adds	r3, #20
 8005ba8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005baa:	623a      	str	r2, [r7, #32]
 8005bac:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bae:	69f9      	ldr	r1, [r7, #28]
 8005bb0:	6a3a      	ldr	r2, [r7, #32]
 8005bb2:	e841 2300 	strex	r3, r2, [r1]
 8005bb6:	61bb      	str	r3, [r7, #24]
   return(result);
 8005bb8:	69bb      	ldr	r3, [r7, #24]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1e5      	bne.n	8005b8a <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8005bbe:	68fb      	ldr	r3, [r7, #12]
 8005bc0:	2220      	movs	r2, #32
 8005bc2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8005bc6:	68fb      	ldr	r3, [r7, #12]
 8005bc8:	2220      	movs	r2, #32
 8005bca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	2200      	movs	r2, #0
 8005bd2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_TIMEOUT;
 8005bd6:	2303      	movs	r3, #3
 8005bd8:	e00f      	b.n	8005bfa <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005bda:	68fb      	ldr	r3, [r7, #12]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	681a      	ldr	r2, [r3, #0]
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	4013      	ands	r3, r2
 8005be4:	68ba      	ldr	r2, [r7, #8]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	bf0c      	ite	eq
 8005bea:	2301      	moveq	r3, #1
 8005bec:	2300      	movne	r3, #0
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	461a      	mov	r2, r3
 8005bf2:	79fb      	ldrb	r3, [r7, #7]
 8005bf4:	429a      	cmp	r2, r3
 8005bf6:	d09f      	beq.n	8005b38 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005bf8:	2300      	movs	r3, #0
}
 8005bfa:	4618      	mov	r0, r3
 8005bfc:	3740      	adds	r7, #64	; 0x40
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	bd80      	pop	{r7, pc}

08005c02 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c02:	b480      	push	{r7}
 8005c04:	b085      	sub	sp, #20
 8005c06:	af00      	add	r7, sp, #0
 8005c08:	60f8      	str	r0, [r7, #12]
 8005c0a:	60b9      	str	r1, [r7, #8]
 8005c0c:	4613      	mov	r3, r2
 8005c0e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	68ba      	ldr	r2, [r7, #8]
 8005c14:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	88fa      	ldrh	r2, [r7, #6]
 8005c1a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	88fa      	ldrh	r2, [r7, #6]
 8005c20:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	2200      	movs	r2, #0
 8005c26:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	2222      	movs	r2, #34	; 0x22
 8005c2c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	691b      	ldr	r3, [r3, #16]
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d007      	beq.n	8005c48 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68da      	ldr	r2, [r3, #12]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c46:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	695a      	ldr	r2, [r3, #20]
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	f042 0201 	orr.w	r2, r2, #1
 8005c56:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	68da      	ldr	r2, [r3, #12]
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	f042 0220 	orr.w	r2, r2, #32
 8005c66:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005c68:	2300      	movs	r3, #0
}
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	3714      	adds	r7, #20
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	bc80      	pop	{r7}
 8005c72:	4770      	bx	lr

08005c74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005c74:	b480      	push	{r7}
 8005c76:	b095      	sub	sp, #84	; 0x54
 8005c78:	af00      	add	r7, sp, #0
 8005c7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	330c      	adds	r3, #12
 8005c82:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c86:	e853 3f00 	ldrex	r3, [r3]
 8005c8a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005c8c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c8e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005c92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	330c      	adds	r3, #12
 8005c9a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c9c:	643a      	str	r2, [r7, #64]	; 0x40
 8005c9e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005ca0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005ca2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ca4:	e841 2300 	strex	r3, r2, [r1]
 8005ca8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005caa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1e5      	bne.n	8005c7c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	3314      	adds	r3, #20
 8005cb6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cb8:	6a3b      	ldr	r3, [r7, #32]
 8005cba:	e853 3f00 	ldrex	r3, [r3]
 8005cbe:	61fb      	str	r3, [r7, #28]
   return(result);
 8005cc0:	69fb      	ldr	r3, [r7, #28]
 8005cc2:	f023 0301 	bic.w	r3, r3, #1
 8005cc6:	64bb      	str	r3, [r7, #72]	; 0x48
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	3314      	adds	r3, #20
 8005cce:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005cd0:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005cd2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005cd4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8005cd6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cd8:	e841 2300 	strex	r3, r2, [r1]
 8005cdc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005cde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d1e5      	bne.n	8005cb0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ce8:	2b01      	cmp	r3, #1
 8005cea:	d119      	bne.n	8005d20 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	330c      	adds	r3, #12
 8005cf2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	e853 3f00 	ldrex	r3, [r3]
 8005cfa:	60bb      	str	r3, [r7, #8]
   return(result);
 8005cfc:	68bb      	ldr	r3, [r7, #8]
 8005cfe:	f023 0310 	bic.w	r3, r3, #16
 8005d02:	647b      	str	r3, [r7, #68]	; 0x44
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	330c      	adds	r3, #12
 8005d0a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d0c:	61ba      	str	r2, [r7, #24]
 8005d0e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d10:	6979      	ldr	r1, [r7, #20]
 8005d12:	69ba      	ldr	r2, [r7, #24]
 8005d14:	e841 2300 	strex	r3, r2, [r1]
 8005d18:	613b      	str	r3, [r7, #16]
   return(result);
 8005d1a:	693b      	ldr	r3, [r7, #16]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d1e5      	bne.n	8005cec <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2220      	movs	r2, #32
 8005d24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	2200      	movs	r2, #0
 8005d2c:	631a      	str	r2, [r3, #48]	; 0x30
}
 8005d2e:	bf00      	nop
 8005d30:	3754      	adds	r7, #84	; 0x54
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bc80      	pop	{r7}
 8005d36:	4770      	bx	lr

08005d38 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b084      	sub	sp, #16
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d44:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	2200      	movs	r2, #0
 8005d50:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f7ff fed3 	bl	8005afe <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005d58:	bf00      	nop
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005d60:	b480      	push	{r7}
 8005d62:	b085      	sub	sp, #20
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005d68:	687b      	ldr	r3, [r7, #4]
 8005d6a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005d6e:	b2db      	uxtb	r3, r3
 8005d70:	2b21      	cmp	r3, #33	; 0x21
 8005d72:	d13e      	bne.n	8005df2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	689b      	ldr	r3, [r3, #8]
 8005d78:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d7c:	d114      	bne.n	8005da8 <UART_Transmit_IT+0x48>
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d110      	bne.n	8005da8 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	881b      	ldrh	r3, [r3, #0]
 8005d90:	461a      	mov	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d9a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a1b      	ldr	r3, [r3, #32]
 8005da0:	1c9a      	adds	r2, r3, #2
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	621a      	str	r2, [r3, #32]
 8005da6:	e008      	b.n	8005dba <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	6a1b      	ldr	r3, [r3, #32]
 8005dac:	1c59      	adds	r1, r3, #1
 8005dae:	687a      	ldr	r2, [r7, #4]
 8005db0:	6211      	str	r1, [r2, #32]
 8005db2:	781a      	ldrb	r2, [r3, #0]
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005dbe:	b29b      	uxth	r3, r3
 8005dc0:	3b01      	subs	r3, #1
 8005dc2:	b29b      	uxth	r3, r3
 8005dc4:	687a      	ldr	r2, [r7, #4]
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d10f      	bne.n	8005dee <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	68da      	ldr	r2, [r3, #12]
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005ddc:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	68da      	ldr	r2, [r3, #12]
 8005de4:	687b      	ldr	r3, [r7, #4]
 8005de6:	681b      	ldr	r3, [r3, #0]
 8005de8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005dec:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005dee:	2300      	movs	r3, #0
 8005df0:	e000      	b.n	8005df4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005df2:	2302      	movs	r3, #2
  }
}
 8005df4:	4618      	mov	r0, r3
 8005df6:	3714      	adds	r7, #20
 8005df8:	46bd      	mov	sp, r7
 8005dfa:	bc80      	pop	{r7}
 8005dfc:	4770      	bx	lr

08005dfe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005dfe:	b580      	push	{r7, lr}
 8005e00:	b082      	sub	sp, #8
 8005e02:	af00      	add	r7, sp, #0
 8005e04:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	681b      	ldr	r3, [r3, #0]
 8005e0a:	68da      	ldr	r2, [r3, #12]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e14:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2220      	movs	r2, #32
 8005e1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005e1e:	6878      	ldr	r0, [r7, #4]
 8005e20:	f7ff fe64 	bl	8005aec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005e24:	2300      	movs	r3, #0
}
 8005e26:	4618      	mov	r0, r3
 8005e28:	3708      	adds	r7, #8
 8005e2a:	46bd      	mov	sp, r7
 8005e2c:	bd80      	pop	{r7, pc}

08005e2e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005e2e:	b580      	push	{r7, lr}
 8005e30:	b08c      	sub	sp, #48	; 0x30
 8005e32:	af00      	add	r7, sp, #0
 8005e34:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005e3c:	b2db      	uxtb	r3, r3
 8005e3e:	2b22      	cmp	r3, #34	; 0x22
 8005e40:	f040 80ae 	bne.w	8005fa0 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	689b      	ldr	r3, [r3, #8]
 8005e48:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e4c:	d117      	bne.n	8005e7e <UART_Receive_IT+0x50>
 8005e4e:	687b      	ldr	r3, [r7, #4]
 8005e50:	691b      	ldr	r3, [r3, #16]
 8005e52:	2b00      	cmp	r3, #0
 8005e54:	d113      	bne.n	8005e7e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005e56:	2300      	movs	r3, #0
 8005e58:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e5e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	685b      	ldr	r3, [r3, #4]
 8005e66:	b29b      	uxth	r3, r3
 8005e68:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005e6c:	b29a      	uxth	r2, r3
 8005e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e70:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e76:	1c9a      	adds	r2, r3, #2
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	629a      	str	r2, [r3, #40]	; 0x28
 8005e7c:	e026      	b.n	8005ecc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e82:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005e84:	2300      	movs	r3, #0
 8005e86:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	689b      	ldr	r3, [r3, #8]
 8005e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005e90:	d007      	beq.n	8005ea2 <UART_Receive_IT+0x74>
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	689b      	ldr	r3, [r3, #8]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d10a      	bne.n	8005eb0 <UART_Receive_IT+0x82>
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d106      	bne.n	8005eb0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	685b      	ldr	r3, [r3, #4]
 8005ea8:	b2da      	uxtb	r2, r3
 8005eaa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005eac:	701a      	strb	r2, [r3, #0]
 8005eae:	e008      	b.n	8005ec2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	681b      	ldr	r3, [r3, #0]
 8005eb4:	685b      	ldr	r3, [r3, #4]
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005ebc:	b2da      	uxtb	r2, r3
 8005ebe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005ec0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ec6:	1c5a      	adds	r2, r3, #1
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8005ed0:	b29b      	uxth	r3, r3
 8005ed2:	3b01      	subs	r3, #1
 8005ed4:	b29b      	uxth	r3, r3
 8005ed6:	687a      	ldr	r2, [r7, #4]
 8005ed8:	4619      	mov	r1, r3
 8005eda:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d15d      	bne.n	8005f9c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	68da      	ldr	r2, [r3, #12]
 8005ee6:	687b      	ldr	r3, [r7, #4]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	f022 0220 	bic.w	r2, r2, #32
 8005eee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	68da      	ldr	r2, [r3, #12]
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8005efe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	695a      	ldr	r2, [r3, #20]
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	681b      	ldr	r3, [r3, #0]
 8005f0a:	f022 0201 	bic.w	r2, r2, #1
 8005f0e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	2220      	movs	r2, #32
 8005f14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2200      	movs	r2, #0
 8005f1c:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f22:	2b01      	cmp	r3, #1
 8005f24:	d135      	bne.n	8005f92 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	2200      	movs	r2, #0
 8005f2a:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	330c      	adds	r3, #12
 8005f32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f34:	697b      	ldr	r3, [r7, #20]
 8005f36:	e853 3f00 	ldrex	r3, [r3]
 8005f3a:	613b      	str	r3, [r7, #16]
   return(result);
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	f023 0310 	bic.w	r3, r3, #16
 8005f42:	627b      	str	r3, [r7, #36]	; 0x24
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	681b      	ldr	r3, [r3, #0]
 8005f48:	330c      	adds	r3, #12
 8005f4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005f4c:	623a      	str	r2, [r7, #32]
 8005f4e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f50:	69f9      	ldr	r1, [r7, #28]
 8005f52:	6a3a      	ldr	r2, [r7, #32]
 8005f54:	e841 2300 	strex	r3, r2, [r1]
 8005f58:	61bb      	str	r3, [r7, #24]
   return(result);
 8005f5a:	69bb      	ldr	r3, [r7, #24]
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d1e5      	bne.n	8005f2c <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	681b      	ldr	r3, [r3, #0]
 8005f66:	f003 0310 	and.w	r3, r3, #16
 8005f6a:	2b10      	cmp	r3, #16
 8005f6c:	d10a      	bne.n	8005f84 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005f6e:	2300      	movs	r3, #0
 8005f70:	60fb      	str	r3, [r7, #12]
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	681b      	ldr	r3, [r3, #0]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	60fb      	str	r3, [r7, #12]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	60fb      	str	r3, [r7, #12]
 8005f82:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005f88:	4619      	mov	r1, r3
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f7ff fdc0 	bl	8005b10 <HAL_UARTEx_RxEventCallback>
 8005f90:	e002      	b.n	8005f98 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7fc fa56 	bl	8002444 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005f98:	2300      	movs	r3, #0
 8005f9a:	e002      	b.n	8005fa2 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005f9c:	2300      	movs	r3, #0
 8005f9e:	e000      	b.n	8005fa2 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005fa0:	2302      	movs	r3, #2
  }
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3730      	adds	r7, #48	; 0x30
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
	...

08005fac <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	691b      	ldr	r3, [r3, #16]
 8005fba:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	68da      	ldr	r2, [r3, #12]
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	430a      	orrs	r2, r1
 8005fc8:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	689a      	ldr	r2, [r3, #8]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	691b      	ldr	r3, [r3, #16]
 8005fd2:	431a      	orrs	r2, r3
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	695b      	ldr	r3, [r3, #20]
 8005fd8:	4313      	orrs	r3, r2
 8005fda:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	68db      	ldr	r3, [r3, #12]
 8005fe2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 8005fe6:	f023 030c 	bic.w	r3, r3, #12
 8005fea:	687a      	ldr	r2, [r7, #4]
 8005fec:	6812      	ldr	r2, [r2, #0]
 8005fee:	68b9      	ldr	r1, [r7, #8]
 8005ff0:	430b      	orrs	r3, r1
 8005ff2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	695b      	ldr	r3, [r3, #20]
 8005ffa:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	699a      	ldr	r2, [r3, #24]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	681b      	ldr	r3, [r3, #0]
 8006006:	430a      	orrs	r2, r1
 8006008:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a2c      	ldr	r2, [pc, #176]	; (80060c0 <UART_SetConfig+0x114>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d103      	bne.n	800601c <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8006014:	f7fe fe40 	bl	8004c98 <HAL_RCC_GetPCLK2Freq>
 8006018:	60f8      	str	r0, [r7, #12]
 800601a:	e002      	b.n	8006022 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 800601c:	f7fe fe28 	bl	8004c70 <HAL_RCC_GetPCLK1Freq>
 8006020:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006022:	68fa      	ldr	r2, [r7, #12]
 8006024:	4613      	mov	r3, r2
 8006026:	009b      	lsls	r3, r3, #2
 8006028:	4413      	add	r3, r2
 800602a:	009a      	lsls	r2, r3, #2
 800602c:	441a      	add	r2, r3
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	685b      	ldr	r3, [r3, #4]
 8006032:	009b      	lsls	r3, r3, #2
 8006034:	fbb2 f3f3 	udiv	r3, r2, r3
 8006038:	4a22      	ldr	r2, [pc, #136]	; (80060c4 <UART_SetConfig+0x118>)
 800603a:	fba2 2303 	umull	r2, r3, r2, r3
 800603e:	095b      	lsrs	r3, r3, #5
 8006040:	0119      	lsls	r1, r3, #4
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	4613      	mov	r3, r2
 8006046:	009b      	lsls	r3, r3, #2
 8006048:	4413      	add	r3, r2
 800604a:	009a      	lsls	r2, r3, #2
 800604c:	441a      	add	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	685b      	ldr	r3, [r3, #4]
 8006052:	009b      	lsls	r3, r3, #2
 8006054:	fbb2 f2f3 	udiv	r2, r2, r3
 8006058:	4b1a      	ldr	r3, [pc, #104]	; (80060c4 <UART_SetConfig+0x118>)
 800605a:	fba3 0302 	umull	r0, r3, r3, r2
 800605e:	095b      	lsrs	r3, r3, #5
 8006060:	2064      	movs	r0, #100	; 0x64
 8006062:	fb00 f303 	mul.w	r3, r0, r3
 8006066:	1ad3      	subs	r3, r2, r3
 8006068:	011b      	lsls	r3, r3, #4
 800606a:	3332      	adds	r3, #50	; 0x32
 800606c:	4a15      	ldr	r2, [pc, #84]	; (80060c4 <UART_SetConfig+0x118>)
 800606e:	fba2 2303 	umull	r2, r3, r2, r3
 8006072:	095b      	lsrs	r3, r3, #5
 8006074:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006078:	4419      	add	r1, r3
 800607a:	68fa      	ldr	r2, [r7, #12]
 800607c:	4613      	mov	r3, r2
 800607e:	009b      	lsls	r3, r3, #2
 8006080:	4413      	add	r3, r2
 8006082:	009a      	lsls	r2, r3, #2
 8006084:	441a      	add	r2, r3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	685b      	ldr	r3, [r3, #4]
 800608a:	009b      	lsls	r3, r3, #2
 800608c:	fbb2 f2f3 	udiv	r2, r2, r3
 8006090:	4b0c      	ldr	r3, [pc, #48]	; (80060c4 <UART_SetConfig+0x118>)
 8006092:	fba3 0302 	umull	r0, r3, r3, r2
 8006096:	095b      	lsrs	r3, r3, #5
 8006098:	2064      	movs	r0, #100	; 0x64
 800609a:	fb00 f303 	mul.w	r3, r0, r3
 800609e:	1ad3      	subs	r3, r2, r3
 80060a0:	011b      	lsls	r3, r3, #4
 80060a2:	3332      	adds	r3, #50	; 0x32
 80060a4:	4a07      	ldr	r2, [pc, #28]	; (80060c4 <UART_SetConfig+0x118>)
 80060a6:	fba2 2303 	umull	r2, r3, r2, r3
 80060aa:	095b      	lsrs	r3, r3, #5
 80060ac:	f003 020f 	and.w	r2, r3, #15
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	440a      	add	r2, r1
 80060b6:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80060b8:	bf00      	nop
 80060ba:	3710      	adds	r7, #16
 80060bc:	46bd      	mov	sp, r7
 80060be:	bd80      	pop	{r7, pc}
 80060c0:	40013800 	.word	0x40013800
 80060c4:	51eb851f 	.word	0x51eb851f

080060c8 <__errno>:
 80060c8:	4b01      	ldr	r3, [pc, #4]	; (80060d0 <__errno+0x8>)
 80060ca:	6818      	ldr	r0, [r3, #0]
 80060cc:	4770      	bx	lr
 80060ce:	bf00      	nop
 80060d0:	20000210 	.word	0x20000210

080060d4 <__libc_init_array>:
 80060d4:	b570      	push	{r4, r5, r6, lr}
 80060d6:	2600      	movs	r6, #0
 80060d8:	4d0c      	ldr	r5, [pc, #48]	; (800610c <__libc_init_array+0x38>)
 80060da:	4c0d      	ldr	r4, [pc, #52]	; (8006110 <__libc_init_array+0x3c>)
 80060dc:	1b64      	subs	r4, r4, r5
 80060de:	10a4      	asrs	r4, r4, #2
 80060e0:	42a6      	cmp	r6, r4
 80060e2:	d109      	bne.n	80060f8 <__libc_init_array+0x24>
 80060e4:	f001 f942 	bl	800736c <_init>
 80060e8:	2600      	movs	r6, #0
 80060ea:	4d0a      	ldr	r5, [pc, #40]	; (8006114 <__libc_init_array+0x40>)
 80060ec:	4c0a      	ldr	r4, [pc, #40]	; (8006118 <__libc_init_array+0x44>)
 80060ee:	1b64      	subs	r4, r4, r5
 80060f0:	10a4      	asrs	r4, r4, #2
 80060f2:	42a6      	cmp	r6, r4
 80060f4:	d105      	bne.n	8006102 <__libc_init_array+0x2e>
 80060f6:	bd70      	pop	{r4, r5, r6, pc}
 80060f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80060fc:	4798      	blx	r3
 80060fe:	3601      	adds	r6, #1
 8006100:	e7ee      	b.n	80060e0 <__libc_init_array+0xc>
 8006102:	f855 3b04 	ldr.w	r3, [r5], #4
 8006106:	4798      	blx	r3
 8006108:	3601      	adds	r6, #1
 800610a:	e7f2      	b.n	80060f2 <__libc_init_array+0x1e>
 800610c:	08007530 	.word	0x08007530
 8006110:	08007530 	.word	0x08007530
 8006114:	08007530 	.word	0x08007530
 8006118:	08007534 	.word	0x08007534

0800611c <memcpy>:
 800611c:	440a      	add	r2, r1
 800611e:	4291      	cmp	r1, r2
 8006120:	f100 33ff 	add.w	r3, r0, #4294967295
 8006124:	d100      	bne.n	8006128 <memcpy+0xc>
 8006126:	4770      	bx	lr
 8006128:	b510      	push	{r4, lr}
 800612a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800612e:	4291      	cmp	r1, r2
 8006130:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006134:	d1f9      	bne.n	800612a <memcpy+0xe>
 8006136:	bd10      	pop	{r4, pc}

08006138 <memset>:
 8006138:	4603      	mov	r3, r0
 800613a:	4402      	add	r2, r0
 800613c:	4293      	cmp	r3, r2
 800613e:	d100      	bne.n	8006142 <memset+0xa>
 8006140:	4770      	bx	lr
 8006142:	f803 1b01 	strb.w	r1, [r3], #1
 8006146:	e7f9      	b.n	800613c <memset+0x4>

08006148 <rand>:
 8006148:	4b16      	ldr	r3, [pc, #88]	; (80061a4 <rand+0x5c>)
 800614a:	b510      	push	{r4, lr}
 800614c:	681c      	ldr	r4, [r3, #0]
 800614e:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8006150:	b9b3      	cbnz	r3, 8006180 <rand+0x38>
 8006152:	2018      	movs	r0, #24
 8006154:	f000 f866 	bl	8006224 <malloc>
 8006158:	4602      	mov	r2, r0
 800615a:	63a0      	str	r0, [r4, #56]	; 0x38
 800615c:	b920      	cbnz	r0, 8006168 <rand+0x20>
 800615e:	214e      	movs	r1, #78	; 0x4e
 8006160:	4b11      	ldr	r3, [pc, #68]	; (80061a8 <rand+0x60>)
 8006162:	4812      	ldr	r0, [pc, #72]	; (80061ac <rand+0x64>)
 8006164:	f000 f82e 	bl	80061c4 <__assert_func>
 8006168:	4911      	ldr	r1, [pc, #68]	; (80061b0 <rand+0x68>)
 800616a:	4b12      	ldr	r3, [pc, #72]	; (80061b4 <rand+0x6c>)
 800616c:	e9c0 1300 	strd	r1, r3, [r0]
 8006170:	4b11      	ldr	r3, [pc, #68]	; (80061b8 <rand+0x70>)
 8006172:	2100      	movs	r1, #0
 8006174:	6083      	str	r3, [r0, #8]
 8006176:	230b      	movs	r3, #11
 8006178:	8183      	strh	r3, [r0, #12]
 800617a:	2001      	movs	r0, #1
 800617c:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8006180:	6ba4      	ldr	r4, [r4, #56]	; 0x38
 8006182:	4a0e      	ldr	r2, [pc, #56]	; (80061bc <rand+0x74>)
 8006184:	6920      	ldr	r0, [r4, #16]
 8006186:	6963      	ldr	r3, [r4, #20]
 8006188:	4342      	muls	r2, r0
 800618a:	490d      	ldr	r1, [pc, #52]	; (80061c0 <rand+0x78>)
 800618c:	fb01 2203 	mla	r2, r1, r3, r2
 8006190:	fba0 0101 	umull	r0, r1, r0, r1
 8006194:	1c43      	adds	r3, r0, #1
 8006196:	eb42 0001 	adc.w	r0, r2, r1
 800619a:	e9c4 3004 	strd	r3, r0, [r4, #16]
 800619e:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 80061a2:	bd10      	pop	{r4, pc}
 80061a4:	20000210 	.word	0x20000210
 80061a8:	080073ec 	.word	0x080073ec
 80061ac:	08007403 	.word	0x08007403
 80061b0:	abcd330e 	.word	0xabcd330e
 80061b4:	e66d1234 	.word	0xe66d1234
 80061b8:	0005deec 	.word	0x0005deec
 80061bc:	5851f42d 	.word	0x5851f42d
 80061c0:	4c957f2d 	.word	0x4c957f2d

080061c4 <__assert_func>:
 80061c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80061c6:	4614      	mov	r4, r2
 80061c8:	461a      	mov	r2, r3
 80061ca:	4b09      	ldr	r3, [pc, #36]	; (80061f0 <__assert_func+0x2c>)
 80061cc:	4605      	mov	r5, r0
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	68d8      	ldr	r0, [r3, #12]
 80061d2:	b14c      	cbz	r4, 80061e8 <__assert_func+0x24>
 80061d4:	4b07      	ldr	r3, [pc, #28]	; (80061f4 <__assert_func+0x30>)
 80061d6:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80061da:	9100      	str	r1, [sp, #0]
 80061dc:	462b      	mov	r3, r5
 80061de:	4906      	ldr	r1, [pc, #24]	; (80061f8 <__assert_func+0x34>)
 80061e0:	f000 f80e 	bl	8006200 <fiprintf>
 80061e4:	f000 fcc0 	bl	8006b68 <abort>
 80061e8:	4b04      	ldr	r3, [pc, #16]	; (80061fc <__assert_func+0x38>)
 80061ea:	461c      	mov	r4, r3
 80061ec:	e7f3      	b.n	80061d6 <__assert_func+0x12>
 80061ee:	bf00      	nop
 80061f0:	20000210 	.word	0x20000210
 80061f4:	0800745e 	.word	0x0800745e
 80061f8:	0800746b 	.word	0x0800746b
 80061fc:	08007499 	.word	0x08007499

08006200 <fiprintf>:
 8006200:	b40e      	push	{r1, r2, r3}
 8006202:	b503      	push	{r0, r1, lr}
 8006204:	4601      	mov	r1, r0
 8006206:	ab03      	add	r3, sp, #12
 8006208:	4805      	ldr	r0, [pc, #20]	; (8006220 <fiprintf+0x20>)
 800620a:	f853 2b04 	ldr.w	r2, [r3], #4
 800620e:	6800      	ldr	r0, [r0, #0]
 8006210:	9301      	str	r3, [sp, #4]
 8006212:	f000 f913 	bl	800643c <_vfiprintf_r>
 8006216:	b002      	add	sp, #8
 8006218:	f85d eb04 	ldr.w	lr, [sp], #4
 800621c:	b003      	add	sp, #12
 800621e:	4770      	bx	lr
 8006220:	20000210 	.word	0x20000210

08006224 <malloc>:
 8006224:	4b02      	ldr	r3, [pc, #8]	; (8006230 <malloc+0xc>)
 8006226:	4601      	mov	r1, r0
 8006228:	6818      	ldr	r0, [r3, #0]
 800622a:	f000 b86b 	b.w	8006304 <_malloc_r>
 800622e:	bf00      	nop
 8006230:	20000210 	.word	0x20000210

08006234 <_free_r>:
 8006234:	b538      	push	{r3, r4, r5, lr}
 8006236:	4605      	mov	r5, r0
 8006238:	2900      	cmp	r1, #0
 800623a:	d040      	beq.n	80062be <_free_r+0x8a>
 800623c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006240:	1f0c      	subs	r4, r1, #4
 8006242:	2b00      	cmp	r3, #0
 8006244:	bfb8      	it	lt
 8006246:	18e4      	addlt	r4, r4, r3
 8006248:	f000 fec0 	bl	8006fcc <__malloc_lock>
 800624c:	4a1c      	ldr	r2, [pc, #112]	; (80062c0 <_free_r+0x8c>)
 800624e:	6813      	ldr	r3, [r2, #0]
 8006250:	b933      	cbnz	r3, 8006260 <_free_r+0x2c>
 8006252:	6063      	str	r3, [r4, #4]
 8006254:	6014      	str	r4, [r2, #0]
 8006256:	4628      	mov	r0, r5
 8006258:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800625c:	f000 bebc 	b.w	8006fd8 <__malloc_unlock>
 8006260:	42a3      	cmp	r3, r4
 8006262:	d908      	bls.n	8006276 <_free_r+0x42>
 8006264:	6820      	ldr	r0, [r4, #0]
 8006266:	1821      	adds	r1, r4, r0
 8006268:	428b      	cmp	r3, r1
 800626a:	bf01      	itttt	eq
 800626c:	6819      	ldreq	r1, [r3, #0]
 800626e:	685b      	ldreq	r3, [r3, #4]
 8006270:	1809      	addeq	r1, r1, r0
 8006272:	6021      	streq	r1, [r4, #0]
 8006274:	e7ed      	b.n	8006252 <_free_r+0x1e>
 8006276:	461a      	mov	r2, r3
 8006278:	685b      	ldr	r3, [r3, #4]
 800627a:	b10b      	cbz	r3, 8006280 <_free_r+0x4c>
 800627c:	42a3      	cmp	r3, r4
 800627e:	d9fa      	bls.n	8006276 <_free_r+0x42>
 8006280:	6811      	ldr	r1, [r2, #0]
 8006282:	1850      	adds	r0, r2, r1
 8006284:	42a0      	cmp	r0, r4
 8006286:	d10b      	bne.n	80062a0 <_free_r+0x6c>
 8006288:	6820      	ldr	r0, [r4, #0]
 800628a:	4401      	add	r1, r0
 800628c:	1850      	adds	r0, r2, r1
 800628e:	4283      	cmp	r3, r0
 8006290:	6011      	str	r1, [r2, #0]
 8006292:	d1e0      	bne.n	8006256 <_free_r+0x22>
 8006294:	6818      	ldr	r0, [r3, #0]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	4401      	add	r1, r0
 800629a:	6011      	str	r1, [r2, #0]
 800629c:	6053      	str	r3, [r2, #4]
 800629e:	e7da      	b.n	8006256 <_free_r+0x22>
 80062a0:	d902      	bls.n	80062a8 <_free_r+0x74>
 80062a2:	230c      	movs	r3, #12
 80062a4:	602b      	str	r3, [r5, #0]
 80062a6:	e7d6      	b.n	8006256 <_free_r+0x22>
 80062a8:	6820      	ldr	r0, [r4, #0]
 80062aa:	1821      	adds	r1, r4, r0
 80062ac:	428b      	cmp	r3, r1
 80062ae:	bf01      	itttt	eq
 80062b0:	6819      	ldreq	r1, [r3, #0]
 80062b2:	685b      	ldreq	r3, [r3, #4]
 80062b4:	1809      	addeq	r1, r1, r0
 80062b6:	6021      	streq	r1, [r4, #0]
 80062b8:	6063      	str	r3, [r4, #4]
 80062ba:	6054      	str	r4, [r2, #4]
 80062bc:	e7cb      	b.n	8006256 <_free_r+0x22>
 80062be:	bd38      	pop	{r3, r4, r5, pc}
 80062c0:	20000c30 	.word	0x20000c30

080062c4 <sbrk_aligned>:
 80062c4:	b570      	push	{r4, r5, r6, lr}
 80062c6:	4e0e      	ldr	r6, [pc, #56]	; (8006300 <sbrk_aligned+0x3c>)
 80062c8:	460c      	mov	r4, r1
 80062ca:	6831      	ldr	r1, [r6, #0]
 80062cc:	4605      	mov	r5, r0
 80062ce:	b911      	cbnz	r1, 80062d6 <sbrk_aligned+0x12>
 80062d0:	f000 fb7a 	bl	80069c8 <_sbrk_r>
 80062d4:	6030      	str	r0, [r6, #0]
 80062d6:	4621      	mov	r1, r4
 80062d8:	4628      	mov	r0, r5
 80062da:	f000 fb75 	bl	80069c8 <_sbrk_r>
 80062de:	1c43      	adds	r3, r0, #1
 80062e0:	d00a      	beq.n	80062f8 <sbrk_aligned+0x34>
 80062e2:	1cc4      	adds	r4, r0, #3
 80062e4:	f024 0403 	bic.w	r4, r4, #3
 80062e8:	42a0      	cmp	r0, r4
 80062ea:	d007      	beq.n	80062fc <sbrk_aligned+0x38>
 80062ec:	1a21      	subs	r1, r4, r0
 80062ee:	4628      	mov	r0, r5
 80062f0:	f000 fb6a 	bl	80069c8 <_sbrk_r>
 80062f4:	3001      	adds	r0, #1
 80062f6:	d101      	bne.n	80062fc <sbrk_aligned+0x38>
 80062f8:	f04f 34ff 	mov.w	r4, #4294967295
 80062fc:	4620      	mov	r0, r4
 80062fe:	bd70      	pop	{r4, r5, r6, pc}
 8006300:	20000c34 	.word	0x20000c34

08006304 <_malloc_r>:
 8006304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006308:	1ccd      	adds	r5, r1, #3
 800630a:	f025 0503 	bic.w	r5, r5, #3
 800630e:	3508      	adds	r5, #8
 8006310:	2d0c      	cmp	r5, #12
 8006312:	bf38      	it	cc
 8006314:	250c      	movcc	r5, #12
 8006316:	2d00      	cmp	r5, #0
 8006318:	4607      	mov	r7, r0
 800631a:	db01      	blt.n	8006320 <_malloc_r+0x1c>
 800631c:	42a9      	cmp	r1, r5
 800631e:	d905      	bls.n	800632c <_malloc_r+0x28>
 8006320:	230c      	movs	r3, #12
 8006322:	2600      	movs	r6, #0
 8006324:	603b      	str	r3, [r7, #0]
 8006326:	4630      	mov	r0, r6
 8006328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800632c:	4e2e      	ldr	r6, [pc, #184]	; (80063e8 <_malloc_r+0xe4>)
 800632e:	f000 fe4d 	bl	8006fcc <__malloc_lock>
 8006332:	6833      	ldr	r3, [r6, #0]
 8006334:	461c      	mov	r4, r3
 8006336:	bb34      	cbnz	r4, 8006386 <_malloc_r+0x82>
 8006338:	4629      	mov	r1, r5
 800633a:	4638      	mov	r0, r7
 800633c:	f7ff ffc2 	bl	80062c4 <sbrk_aligned>
 8006340:	1c43      	adds	r3, r0, #1
 8006342:	4604      	mov	r4, r0
 8006344:	d14d      	bne.n	80063e2 <_malloc_r+0xde>
 8006346:	6834      	ldr	r4, [r6, #0]
 8006348:	4626      	mov	r6, r4
 800634a:	2e00      	cmp	r6, #0
 800634c:	d140      	bne.n	80063d0 <_malloc_r+0xcc>
 800634e:	6823      	ldr	r3, [r4, #0]
 8006350:	4631      	mov	r1, r6
 8006352:	4638      	mov	r0, r7
 8006354:	eb04 0803 	add.w	r8, r4, r3
 8006358:	f000 fb36 	bl	80069c8 <_sbrk_r>
 800635c:	4580      	cmp	r8, r0
 800635e:	d13a      	bne.n	80063d6 <_malloc_r+0xd2>
 8006360:	6821      	ldr	r1, [r4, #0]
 8006362:	3503      	adds	r5, #3
 8006364:	1a6d      	subs	r5, r5, r1
 8006366:	f025 0503 	bic.w	r5, r5, #3
 800636a:	3508      	adds	r5, #8
 800636c:	2d0c      	cmp	r5, #12
 800636e:	bf38      	it	cc
 8006370:	250c      	movcc	r5, #12
 8006372:	4638      	mov	r0, r7
 8006374:	4629      	mov	r1, r5
 8006376:	f7ff ffa5 	bl	80062c4 <sbrk_aligned>
 800637a:	3001      	adds	r0, #1
 800637c:	d02b      	beq.n	80063d6 <_malloc_r+0xd2>
 800637e:	6823      	ldr	r3, [r4, #0]
 8006380:	442b      	add	r3, r5
 8006382:	6023      	str	r3, [r4, #0]
 8006384:	e00e      	b.n	80063a4 <_malloc_r+0xa0>
 8006386:	6822      	ldr	r2, [r4, #0]
 8006388:	1b52      	subs	r2, r2, r5
 800638a:	d41e      	bmi.n	80063ca <_malloc_r+0xc6>
 800638c:	2a0b      	cmp	r2, #11
 800638e:	d916      	bls.n	80063be <_malloc_r+0xba>
 8006390:	1961      	adds	r1, r4, r5
 8006392:	42a3      	cmp	r3, r4
 8006394:	6025      	str	r5, [r4, #0]
 8006396:	bf18      	it	ne
 8006398:	6059      	strne	r1, [r3, #4]
 800639a:	6863      	ldr	r3, [r4, #4]
 800639c:	bf08      	it	eq
 800639e:	6031      	streq	r1, [r6, #0]
 80063a0:	5162      	str	r2, [r4, r5]
 80063a2:	604b      	str	r3, [r1, #4]
 80063a4:	4638      	mov	r0, r7
 80063a6:	f104 060b 	add.w	r6, r4, #11
 80063aa:	f000 fe15 	bl	8006fd8 <__malloc_unlock>
 80063ae:	f026 0607 	bic.w	r6, r6, #7
 80063b2:	1d23      	adds	r3, r4, #4
 80063b4:	1af2      	subs	r2, r6, r3
 80063b6:	d0b6      	beq.n	8006326 <_malloc_r+0x22>
 80063b8:	1b9b      	subs	r3, r3, r6
 80063ba:	50a3      	str	r3, [r4, r2]
 80063bc:	e7b3      	b.n	8006326 <_malloc_r+0x22>
 80063be:	6862      	ldr	r2, [r4, #4]
 80063c0:	42a3      	cmp	r3, r4
 80063c2:	bf0c      	ite	eq
 80063c4:	6032      	streq	r2, [r6, #0]
 80063c6:	605a      	strne	r2, [r3, #4]
 80063c8:	e7ec      	b.n	80063a4 <_malloc_r+0xa0>
 80063ca:	4623      	mov	r3, r4
 80063cc:	6864      	ldr	r4, [r4, #4]
 80063ce:	e7b2      	b.n	8006336 <_malloc_r+0x32>
 80063d0:	4634      	mov	r4, r6
 80063d2:	6876      	ldr	r6, [r6, #4]
 80063d4:	e7b9      	b.n	800634a <_malloc_r+0x46>
 80063d6:	230c      	movs	r3, #12
 80063d8:	4638      	mov	r0, r7
 80063da:	603b      	str	r3, [r7, #0]
 80063dc:	f000 fdfc 	bl	8006fd8 <__malloc_unlock>
 80063e0:	e7a1      	b.n	8006326 <_malloc_r+0x22>
 80063e2:	6025      	str	r5, [r4, #0]
 80063e4:	e7de      	b.n	80063a4 <_malloc_r+0xa0>
 80063e6:	bf00      	nop
 80063e8:	20000c30 	.word	0x20000c30

080063ec <__sfputc_r>:
 80063ec:	6893      	ldr	r3, [r2, #8]
 80063ee:	b410      	push	{r4}
 80063f0:	3b01      	subs	r3, #1
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	6093      	str	r3, [r2, #8]
 80063f6:	da07      	bge.n	8006408 <__sfputc_r+0x1c>
 80063f8:	6994      	ldr	r4, [r2, #24]
 80063fa:	42a3      	cmp	r3, r4
 80063fc:	db01      	blt.n	8006402 <__sfputc_r+0x16>
 80063fe:	290a      	cmp	r1, #10
 8006400:	d102      	bne.n	8006408 <__sfputc_r+0x1c>
 8006402:	bc10      	pop	{r4}
 8006404:	f000 baf0 	b.w	80069e8 <__swbuf_r>
 8006408:	6813      	ldr	r3, [r2, #0]
 800640a:	1c58      	adds	r0, r3, #1
 800640c:	6010      	str	r0, [r2, #0]
 800640e:	7019      	strb	r1, [r3, #0]
 8006410:	4608      	mov	r0, r1
 8006412:	bc10      	pop	{r4}
 8006414:	4770      	bx	lr

08006416 <__sfputs_r>:
 8006416:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006418:	4606      	mov	r6, r0
 800641a:	460f      	mov	r7, r1
 800641c:	4614      	mov	r4, r2
 800641e:	18d5      	adds	r5, r2, r3
 8006420:	42ac      	cmp	r4, r5
 8006422:	d101      	bne.n	8006428 <__sfputs_r+0x12>
 8006424:	2000      	movs	r0, #0
 8006426:	e007      	b.n	8006438 <__sfputs_r+0x22>
 8006428:	463a      	mov	r2, r7
 800642a:	4630      	mov	r0, r6
 800642c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006430:	f7ff ffdc 	bl	80063ec <__sfputc_r>
 8006434:	1c43      	adds	r3, r0, #1
 8006436:	d1f3      	bne.n	8006420 <__sfputs_r+0xa>
 8006438:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800643c <_vfiprintf_r>:
 800643c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006440:	460d      	mov	r5, r1
 8006442:	4614      	mov	r4, r2
 8006444:	4698      	mov	r8, r3
 8006446:	4606      	mov	r6, r0
 8006448:	b09d      	sub	sp, #116	; 0x74
 800644a:	b118      	cbz	r0, 8006454 <_vfiprintf_r+0x18>
 800644c:	6983      	ldr	r3, [r0, #24]
 800644e:	b90b      	cbnz	r3, 8006454 <_vfiprintf_r+0x18>
 8006450:	f000 fca8 	bl	8006da4 <__sinit>
 8006454:	4b89      	ldr	r3, [pc, #548]	; (800667c <_vfiprintf_r+0x240>)
 8006456:	429d      	cmp	r5, r3
 8006458:	d11b      	bne.n	8006492 <_vfiprintf_r+0x56>
 800645a:	6875      	ldr	r5, [r6, #4]
 800645c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800645e:	07d9      	lsls	r1, r3, #31
 8006460:	d405      	bmi.n	800646e <_vfiprintf_r+0x32>
 8006462:	89ab      	ldrh	r3, [r5, #12]
 8006464:	059a      	lsls	r2, r3, #22
 8006466:	d402      	bmi.n	800646e <_vfiprintf_r+0x32>
 8006468:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800646a:	f000 fd39 	bl	8006ee0 <__retarget_lock_acquire_recursive>
 800646e:	89ab      	ldrh	r3, [r5, #12]
 8006470:	071b      	lsls	r3, r3, #28
 8006472:	d501      	bpl.n	8006478 <_vfiprintf_r+0x3c>
 8006474:	692b      	ldr	r3, [r5, #16]
 8006476:	b9eb      	cbnz	r3, 80064b4 <_vfiprintf_r+0x78>
 8006478:	4629      	mov	r1, r5
 800647a:	4630      	mov	r0, r6
 800647c:	f000 fb06 	bl	8006a8c <__swsetup_r>
 8006480:	b1c0      	cbz	r0, 80064b4 <_vfiprintf_r+0x78>
 8006482:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006484:	07dc      	lsls	r4, r3, #31
 8006486:	d50e      	bpl.n	80064a6 <_vfiprintf_r+0x6a>
 8006488:	f04f 30ff 	mov.w	r0, #4294967295
 800648c:	b01d      	add	sp, #116	; 0x74
 800648e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006492:	4b7b      	ldr	r3, [pc, #492]	; (8006680 <_vfiprintf_r+0x244>)
 8006494:	429d      	cmp	r5, r3
 8006496:	d101      	bne.n	800649c <_vfiprintf_r+0x60>
 8006498:	68b5      	ldr	r5, [r6, #8]
 800649a:	e7df      	b.n	800645c <_vfiprintf_r+0x20>
 800649c:	4b79      	ldr	r3, [pc, #484]	; (8006684 <_vfiprintf_r+0x248>)
 800649e:	429d      	cmp	r5, r3
 80064a0:	bf08      	it	eq
 80064a2:	68f5      	ldreq	r5, [r6, #12]
 80064a4:	e7da      	b.n	800645c <_vfiprintf_r+0x20>
 80064a6:	89ab      	ldrh	r3, [r5, #12]
 80064a8:	0598      	lsls	r0, r3, #22
 80064aa:	d4ed      	bmi.n	8006488 <_vfiprintf_r+0x4c>
 80064ac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80064ae:	f000 fd18 	bl	8006ee2 <__retarget_lock_release_recursive>
 80064b2:	e7e9      	b.n	8006488 <_vfiprintf_r+0x4c>
 80064b4:	2300      	movs	r3, #0
 80064b6:	9309      	str	r3, [sp, #36]	; 0x24
 80064b8:	2320      	movs	r3, #32
 80064ba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80064be:	2330      	movs	r3, #48	; 0x30
 80064c0:	f04f 0901 	mov.w	r9, #1
 80064c4:	f8cd 800c 	str.w	r8, [sp, #12]
 80064c8:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 8006688 <_vfiprintf_r+0x24c>
 80064cc:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80064d0:	4623      	mov	r3, r4
 80064d2:	469a      	mov	sl, r3
 80064d4:	f813 2b01 	ldrb.w	r2, [r3], #1
 80064d8:	b10a      	cbz	r2, 80064de <_vfiprintf_r+0xa2>
 80064da:	2a25      	cmp	r2, #37	; 0x25
 80064dc:	d1f9      	bne.n	80064d2 <_vfiprintf_r+0x96>
 80064de:	ebba 0b04 	subs.w	fp, sl, r4
 80064e2:	d00b      	beq.n	80064fc <_vfiprintf_r+0xc0>
 80064e4:	465b      	mov	r3, fp
 80064e6:	4622      	mov	r2, r4
 80064e8:	4629      	mov	r1, r5
 80064ea:	4630      	mov	r0, r6
 80064ec:	f7ff ff93 	bl	8006416 <__sfputs_r>
 80064f0:	3001      	adds	r0, #1
 80064f2:	f000 80aa 	beq.w	800664a <_vfiprintf_r+0x20e>
 80064f6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80064f8:	445a      	add	r2, fp
 80064fa:	9209      	str	r2, [sp, #36]	; 0x24
 80064fc:	f89a 3000 	ldrb.w	r3, [sl]
 8006500:	2b00      	cmp	r3, #0
 8006502:	f000 80a2 	beq.w	800664a <_vfiprintf_r+0x20e>
 8006506:	2300      	movs	r3, #0
 8006508:	f04f 32ff 	mov.w	r2, #4294967295
 800650c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006510:	f10a 0a01 	add.w	sl, sl, #1
 8006514:	9304      	str	r3, [sp, #16]
 8006516:	9307      	str	r3, [sp, #28]
 8006518:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800651c:	931a      	str	r3, [sp, #104]	; 0x68
 800651e:	4654      	mov	r4, sl
 8006520:	2205      	movs	r2, #5
 8006522:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006526:	4858      	ldr	r0, [pc, #352]	; (8006688 <_vfiprintf_r+0x24c>)
 8006528:	f000 fd42 	bl	8006fb0 <memchr>
 800652c:	9a04      	ldr	r2, [sp, #16]
 800652e:	b9d8      	cbnz	r0, 8006568 <_vfiprintf_r+0x12c>
 8006530:	06d1      	lsls	r1, r2, #27
 8006532:	bf44      	itt	mi
 8006534:	2320      	movmi	r3, #32
 8006536:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800653a:	0713      	lsls	r3, r2, #28
 800653c:	bf44      	itt	mi
 800653e:	232b      	movmi	r3, #43	; 0x2b
 8006540:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006544:	f89a 3000 	ldrb.w	r3, [sl]
 8006548:	2b2a      	cmp	r3, #42	; 0x2a
 800654a:	d015      	beq.n	8006578 <_vfiprintf_r+0x13c>
 800654c:	4654      	mov	r4, sl
 800654e:	2000      	movs	r0, #0
 8006550:	f04f 0c0a 	mov.w	ip, #10
 8006554:	9a07      	ldr	r2, [sp, #28]
 8006556:	4621      	mov	r1, r4
 8006558:	f811 3b01 	ldrb.w	r3, [r1], #1
 800655c:	3b30      	subs	r3, #48	; 0x30
 800655e:	2b09      	cmp	r3, #9
 8006560:	d94e      	bls.n	8006600 <_vfiprintf_r+0x1c4>
 8006562:	b1b0      	cbz	r0, 8006592 <_vfiprintf_r+0x156>
 8006564:	9207      	str	r2, [sp, #28]
 8006566:	e014      	b.n	8006592 <_vfiprintf_r+0x156>
 8006568:	eba0 0308 	sub.w	r3, r0, r8
 800656c:	fa09 f303 	lsl.w	r3, r9, r3
 8006570:	4313      	orrs	r3, r2
 8006572:	46a2      	mov	sl, r4
 8006574:	9304      	str	r3, [sp, #16]
 8006576:	e7d2      	b.n	800651e <_vfiprintf_r+0xe2>
 8006578:	9b03      	ldr	r3, [sp, #12]
 800657a:	1d19      	adds	r1, r3, #4
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	9103      	str	r1, [sp, #12]
 8006580:	2b00      	cmp	r3, #0
 8006582:	bfbb      	ittet	lt
 8006584:	425b      	neglt	r3, r3
 8006586:	f042 0202 	orrlt.w	r2, r2, #2
 800658a:	9307      	strge	r3, [sp, #28]
 800658c:	9307      	strlt	r3, [sp, #28]
 800658e:	bfb8      	it	lt
 8006590:	9204      	strlt	r2, [sp, #16]
 8006592:	7823      	ldrb	r3, [r4, #0]
 8006594:	2b2e      	cmp	r3, #46	; 0x2e
 8006596:	d10c      	bne.n	80065b2 <_vfiprintf_r+0x176>
 8006598:	7863      	ldrb	r3, [r4, #1]
 800659a:	2b2a      	cmp	r3, #42	; 0x2a
 800659c:	d135      	bne.n	800660a <_vfiprintf_r+0x1ce>
 800659e:	9b03      	ldr	r3, [sp, #12]
 80065a0:	3402      	adds	r4, #2
 80065a2:	1d1a      	adds	r2, r3, #4
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	9203      	str	r2, [sp, #12]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	bfb8      	it	lt
 80065ac:	f04f 33ff 	movlt.w	r3, #4294967295
 80065b0:	9305      	str	r3, [sp, #20]
 80065b2:	f8df a0d8 	ldr.w	sl, [pc, #216]	; 800668c <_vfiprintf_r+0x250>
 80065b6:	2203      	movs	r2, #3
 80065b8:	4650      	mov	r0, sl
 80065ba:	7821      	ldrb	r1, [r4, #0]
 80065bc:	f000 fcf8 	bl	8006fb0 <memchr>
 80065c0:	b140      	cbz	r0, 80065d4 <_vfiprintf_r+0x198>
 80065c2:	2340      	movs	r3, #64	; 0x40
 80065c4:	eba0 000a 	sub.w	r0, r0, sl
 80065c8:	fa03 f000 	lsl.w	r0, r3, r0
 80065cc:	9b04      	ldr	r3, [sp, #16]
 80065ce:	3401      	adds	r4, #1
 80065d0:	4303      	orrs	r3, r0
 80065d2:	9304      	str	r3, [sp, #16]
 80065d4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80065d8:	2206      	movs	r2, #6
 80065da:	482d      	ldr	r0, [pc, #180]	; (8006690 <_vfiprintf_r+0x254>)
 80065dc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80065e0:	f000 fce6 	bl	8006fb0 <memchr>
 80065e4:	2800      	cmp	r0, #0
 80065e6:	d03f      	beq.n	8006668 <_vfiprintf_r+0x22c>
 80065e8:	4b2a      	ldr	r3, [pc, #168]	; (8006694 <_vfiprintf_r+0x258>)
 80065ea:	bb1b      	cbnz	r3, 8006634 <_vfiprintf_r+0x1f8>
 80065ec:	9b03      	ldr	r3, [sp, #12]
 80065ee:	3307      	adds	r3, #7
 80065f0:	f023 0307 	bic.w	r3, r3, #7
 80065f4:	3308      	adds	r3, #8
 80065f6:	9303      	str	r3, [sp, #12]
 80065f8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80065fa:	443b      	add	r3, r7
 80065fc:	9309      	str	r3, [sp, #36]	; 0x24
 80065fe:	e767      	b.n	80064d0 <_vfiprintf_r+0x94>
 8006600:	460c      	mov	r4, r1
 8006602:	2001      	movs	r0, #1
 8006604:	fb0c 3202 	mla	r2, ip, r2, r3
 8006608:	e7a5      	b.n	8006556 <_vfiprintf_r+0x11a>
 800660a:	2300      	movs	r3, #0
 800660c:	f04f 0c0a 	mov.w	ip, #10
 8006610:	4619      	mov	r1, r3
 8006612:	3401      	adds	r4, #1
 8006614:	9305      	str	r3, [sp, #20]
 8006616:	4620      	mov	r0, r4
 8006618:	f810 2b01 	ldrb.w	r2, [r0], #1
 800661c:	3a30      	subs	r2, #48	; 0x30
 800661e:	2a09      	cmp	r2, #9
 8006620:	d903      	bls.n	800662a <_vfiprintf_r+0x1ee>
 8006622:	2b00      	cmp	r3, #0
 8006624:	d0c5      	beq.n	80065b2 <_vfiprintf_r+0x176>
 8006626:	9105      	str	r1, [sp, #20]
 8006628:	e7c3      	b.n	80065b2 <_vfiprintf_r+0x176>
 800662a:	4604      	mov	r4, r0
 800662c:	2301      	movs	r3, #1
 800662e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006632:	e7f0      	b.n	8006616 <_vfiprintf_r+0x1da>
 8006634:	ab03      	add	r3, sp, #12
 8006636:	9300      	str	r3, [sp, #0]
 8006638:	462a      	mov	r2, r5
 800663a:	4630      	mov	r0, r6
 800663c:	4b16      	ldr	r3, [pc, #88]	; (8006698 <_vfiprintf_r+0x25c>)
 800663e:	a904      	add	r1, sp, #16
 8006640:	f3af 8000 	nop.w
 8006644:	4607      	mov	r7, r0
 8006646:	1c78      	adds	r0, r7, #1
 8006648:	d1d6      	bne.n	80065f8 <_vfiprintf_r+0x1bc>
 800664a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800664c:	07d9      	lsls	r1, r3, #31
 800664e:	d405      	bmi.n	800665c <_vfiprintf_r+0x220>
 8006650:	89ab      	ldrh	r3, [r5, #12]
 8006652:	059a      	lsls	r2, r3, #22
 8006654:	d402      	bmi.n	800665c <_vfiprintf_r+0x220>
 8006656:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006658:	f000 fc43 	bl	8006ee2 <__retarget_lock_release_recursive>
 800665c:	89ab      	ldrh	r3, [r5, #12]
 800665e:	065b      	lsls	r3, r3, #25
 8006660:	f53f af12 	bmi.w	8006488 <_vfiprintf_r+0x4c>
 8006664:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006666:	e711      	b.n	800648c <_vfiprintf_r+0x50>
 8006668:	ab03      	add	r3, sp, #12
 800666a:	9300      	str	r3, [sp, #0]
 800666c:	462a      	mov	r2, r5
 800666e:	4630      	mov	r0, r6
 8006670:	4b09      	ldr	r3, [pc, #36]	; (8006698 <_vfiprintf_r+0x25c>)
 8006672:	a904      	add	r1, sp, #16
 8006674:	f000 f882 	bl	800677c <_printf_i>
 8006678:	e7e4      	b.n	8006644 <_vfiprintf_r+0x208>
 800667a:	bf00      	nop
 800667c:	080074f0 	.word	0x080074f0
 8006680:	08007510 	.word	0x08007510
 8006684:	080074d0 	.word	0x080074d0
 8006688:	0800749a 	.word	0x0800749a
 800668c:	080074a0 	.word	0x080074a0
 8006690:	080074a4 	.word	0x080074a4
 8006694:	00000000 	.word	0x00000000
 8006698:	08006417 	.word	0x08006417

0800669c <_printf_common>:
 800669c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066a0:	4616      	mov	r6, r2
 80066a2:	4699      	mov	r9, r3
 80066a4:	688a      	ldr	r2, [r1, #8]
 80066a6:	690b      	ldr	r3, [r1, #16]
 80066a8:	4607      	mov	r7, r0
 80066aa:	4293      	cmp	r3, r2
 80066ac:	bfb8      	it	lt
 80066ae:	4613      	movlt	r3, r2
 80066b0:	6033      	str	r3, [r6, #0]
 80066b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80066b6:	460c      	mov	r4, r1
 80066b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80066bc:	b10a      	cbz	r2, 80066c2 <_printf_common+0x26>
 80066be:	3301      	adds	r3, #1
 80066c0:	6033      	str	r3, [r6, #0]
 80066c2:	6823      	ldr	r3, [r4, #0]
 80066c4:	0699      	lsls	r1, r3, #26
 80066c6:	bf42      	ittt	mi
 80066c8:	6833      	ldrmi	r3, [r6, #0]
 80066ca:	3302      	addmi	r3, #2
 80066cc:	6033      	strmi	r3, [r6, #0]
 80066ce:	6825      	ldr	r5, [r4, #0]
 80066d0:	f015 0506 	ands.w	r5, r5, #6
 80066d4:	d106      	bne.n	80066e4 <_printf_common+0x48>
 80066d6:	f104 0a19 	add.w	sl, r4, #25
 80066da:	68e3      	ldr	r3, [r4, #12]
 80066dc:	6832      	ldr	r2, [r6, #0]
 80066de:	1a9b      	subs	r3, r3, r2
 80066e0:	42ab      	cmp	r3, r5
 80066e2:	dc28      	bgt.n	8006736 <_printf_common+0x9a>
 80066e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80066e8:	1e13      	subs	r3, r2, #0
 80066ea:	6822      	ldr	r2, [r4, #0]
 80066ec:	bf18      	it	ne
 80066ee:	2301      	movne	r3, #1
 80066f0:	0692      	lsls	r2, r2, #26
 80066f2:	d42d      	bmi.n	8006750 <_printf_common+0xb4>
 80066f4:	4649      	mov	r1, r9
 80066f6:	4638      	mov	r0, r7
 80066f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80066fc:	47c0      	blx	r8
 80066fe:	3001      	adds	r0, #1
 8006700:	d020      	beq.n	8006744 <_printf_common+0xa8>
 8006702:	6823      	ldr	r3, [r4, #0]
 8006704:	68e5      	ldr	r5, [r4, #12]
 8006706:	f003 0306 	and.w	r3, r3, #6
 800670a:	2b04      	cmp	r3, #4
 800670c:	bf18      	it	ne
 800670e:	2500      	movne	r5, #0
 8006710:	6832      	ldr	r2, [r6, #0]
 8006712:	f04f 0600 	mov.w	r6, #0
 8006716:	68a3      	ldr	r3, [r4, #8]
 8006718:	bf08      	it	eq
 800671a:	1aad      	subeq	r5, r5, r2
 800671c:	6922      	ldr	r2, [r4, #16]
 800671e:	bf08      	it	eq
 8006720:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006724:	4293      	cmp	r3, r2
 8006726:	bfc4      	itt	gt
 8006728:	1a9b      	subgt	r3, r3, r2
 800672a:	18ed      	addgt	r5, r5, r3
 800672c:	341a      	adds	r4, #26
 800672e:	42b5      	cmp	r5, r6
 8006730:	d11a      	bne.n	8006768 <_printf_common+0xcc>
 8006732:	2000      	movs	r0, #0
 8006734:	e008      	b.n	8006748 <_printf_common+0xac>
 8006736:	2301      	movs	r3, #1
 8006738:	4652      	mov	r2, sl
 800673a:	4649      	mov	r1, r9
 800673c:	4638      	mov	r0, r7
 800673e:	47c0      	blx	r8
 8006740:	3001      	adds	r0, #1
 8006742:	d103      	bne.n	800674c <_printf_common+0xb0>
 8006744:	f04f 30ff 	mov.w	r0, #4294967295
 8006748:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800674c:	3501      	adds	r5, #1
 800674e:	e7c4      	b.n	80066da <_printf_common+0x3e>
 8006750:	2030      	movs	r0, #48	; 0x30
 8006752:	18e1      	adds	r1, r4, r3
 8006754:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006758:	1c5a      	adds	r2, r3, #1
 800675a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800675e:	4422      	add	r2, r4
 8006760:	3302      	adds	r3, #2
 8006762:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006766:	e7c5      	b.n	80066f4 <_printf_common+0x58>
 8006768:	2301      	movs	r3, #1
 800676a:	4622      	mov	r2, r4
 800676c:	4649      	mov	r1, r9
 800676e:	4638      	mov	r0, r7
 8006770:	47c0      	blx	r8
 8006772:	3001      	adds	r0, #1
 8006774:	d0e6      	beq.n	8006744 <_printf_common+0xa8>
 8006776:	3601      	adds	r6, #1
 8006778:	e7d9      	b.n	800672e <_printf_common+0x92>
	...

0800677c <_printf_i>:
 800677c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006780:	7e0f      	ldrb	r7, [r1, #24]
 8006782:	4691      	mov	r9, r2
 8006784:	2f78      	cmp	r7, #120	; 0x78
 8006786:	4680      	mov	r8, r0
 8006788:	460c      	mov	r4, r1
 800678a:	469a      	mov	sl, r3
 800678c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800678e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006792:	d807      	bhi.n	80067a4 <_printf_i+0x28>
 8006794:	2f62      	cmp	r7, #98	; 0x62
 8006796:	d80a      	bhi.n	80067ae <_printf_i+0x32>
 8006798:	2f00      	cmp	r7, #0
 800679a:	f000 80d9 	beq.w	8006950 <_printf_i+0x1d4>
 800679e:	2f58      	cmp	r7, #88	; 0x58
 80067a0:	f000 80a4 	beq.w	80068ec <_printf_i+0x170>
 80067a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80067a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80067ac:	e03a      	b.n	8006824 <_printf_i+0xa8>
 80067ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80067b2:	2b15      	cmp	r3, #21
 80067b4:	d8f6      	bhi.n	80067a4 <_printf_i+0x28>
 80067b6:	a101      	add	r1, pc, #4	; (adr r1, 80067bc <_printf_i+0x40>)
 80067b8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067bc:	08006815 	.word	0x08006815
 80067c0:	08006829 	.word	0x08006829
 80067c4:	080067a5 	.word	0x080067a5
 80067c8:	080067a5 	.word	0x080067a5
 80067cc:	080067a5 	.word	0x080067a5
 80067d0:	080067a5 	.word	0x080067a5
 80067d4:	08006829 	.word	0x08006829
 80067d8:	080067a5 	.word	0x080067a5
 80067dc:	080067a5 	.word	0x080067a5
 80067e0:	080067a5 	.word	0x080067a5
 80067e4:	080067a5 	.word	0x080067a5
 80067e8:	08006937 	.word	0x08006937
 80067ec:	08006859 	.word	0x08006859
 80067f0:	08006919 	.word	0x08006919
 80067f4:	080067a5 	.word	0x080067a5
 80067f8:	080067a5 	.word	0x080067a5
 80067fc:	08006959 	.word	0x08006959
 8006800:	080067a5 	.word	0x080067a5
 8006804:	08006859 	.word	0x08006859
 8006808:	080067a5 	.word	0x080067a5
 800680c:	080067a5 	.word	0x080067a5
 8006810:	08006921 	.word	0x08006921
 8006814:	682b      	ldr	r3, [r5, #0]
 8006816:	1d1a      	adds	r2, r3, #4
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	602a      	str	r2, [r5, #0]
 800681c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006820:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006824:	2301      	movs	r3, #1
 8006826:	e0a4      	b.n	8006972 <_printf_i+0x1f6>
 8006828:	6820      	ldr	r0, [r4, #0]
 800682a:	6829      	ldr	r1, [r5, #0]
 800682c:	0606      	lsls	r6, r0, #24
 800682e:	f101 0304 	add.w	r3, r1, #4
 8006832:	d50a      	bpl.n	800684a <_printf_i+0xce>
 8006834:	680e      	ldr	r6, [r1, #0]
 8006836:	602b      	str	r3, [r5, #0]
 8006838:	2e00      	cmp	r6, #0
 800683a:	da03      	bge.n	8006844 <_printf_i+0xc8>
 800683c:	232d      	movs	r3, #45	; 0x2d
 800683e:	4276      	negs	r6, r6
 8006840:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006844:	230a      	movs	r3, #10
 8006846:	485e      	ldr	r0, [pc, #376]	; (80069c0 <_printf_i+0x244>)
 8006848:	e019      	b.n	800687e <_printf_i+0x102>
 800684a:	680e      	ldr	r6, [r1, #0]
 800684c:	f010 0f40 	tst.w	r0, #64	; 0x40
 8006850:	602b      	str	r3, [r5, #0]
 8006852:	bf18      	it	ne
 8006854:	b236      	sxthne	r6, r6
 8006856:	e7ef      	b.n	8006838 <_printf_i+0xbc>
 8006858:	682b      	ldr	r3, [r5, #0]
 800685a:	6820      	ldr	r0, [r4, #0]
 800685c:	1d19      	adds	r1, r3, #4
 800685e:	6029      	str	r1, [r5, #0]
 8006860:	0601      	lsls	r1, r0, #24
 8006862:	d501      	bpl.n	8006868 <_printf_i+0xec>
 8006864:	681e      	ldr	r6, [r3, #0]
 8006866:	e002      	b.n	800686e <_printf_i+0xf2>
 8006868:	0646      	lsls	r6, r0, #25
 800686a:	d5fb      	bpl.n	8006864 <_printf_i+0xe8>
 800686c:	881e      	ldrh	r6, [r3, #0]
 800686e:	2f6f      	cmp	r7, #111	; 0x6f
 8006870:	bf0c      	ite	eq
 8006872:	2308      	moveq	r3, #8
 8006874:	230a      	movne	r3, #10
 8006876:	4852      	ldr	r0, [pc, #328]	; (80069c0 <_printf_i+0x244>)
 8006878:	2100      	movs	r1, #0
 800687a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800687e:	6865      	ldr	r5, [r4, #4]
 8006880:	2d00      	cmp	r5, #0
 8006882:	bfa8      	it	ge
 8006884:	6821      	ldrge	r1, [r4, #0]
 8006886:	60a5      	str	r5, [r4, #8]
 8006888:	bfa4      	itt	ge
 800688a:	f021 0104 	bicge.w	r1, r1, #4
 800688e:	6021      	strge	r1, [r4, #0]
 8006890:	b90e      	cbnz	r6, 8006896 <_printf_i+0x11a>
 8006892:	2d00      	cmp	r5, #0
 8006894:	d04d      	beq.n	8006932 <_printf_i+0x1b6>
 8006896:	4615      	mov	r5, r2
 8006898:	fbb6 f1f3 	udiv	r1, r6, r3
 800689c:	fb03 6711 	mls	r7, r3, r1, r6
 80068a0:	5dc7      	ldrb	r7, [r0, r7]
 80068a2:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80068a6:	4637      	mov	r7, r6
 80068a8:	42bb      	cmp	r3, r7
 80068aa:	460e      	mov	r6, r1
 80068ac:	d9f4      	bls.n	8006898 <_printf_i+0x11c>
 80068ae:	2b08      	cmp	r3, #8
 80068b0:	d10b      	bne.n	80068ca <_printf_i+0x14e>
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	07de      	lsls	r6, r3, #31
 80068b6:	d508      	bpl.n	80068ca <_printf_i+0x14e>
 80068b8:	6923      	ldr	r3, [r4, #16]
 80068ba:	6861      	ldr	r1, [r4, #4]
 80068bc:	4299      	cmp	r1, r3
 80068be:	bfde      	ittt	le
 80068c0:	2330      	movle	r3, #48	; 0x30
 80068c2:	f805 3c01 	strble.w	r3, [r5, #-1]
 80068c6:	f105 35ff 	addle.w	r5, r5, #4294967295
 80068ca:	1b52      	subs	r2, r2, r5
 80068cc:	6122      	str	r2, [r4, #16]
 80068ce:	464b      	mov	r3, r9
 80068d0:	4621      	mov	r1, r4
 80068d2:	4640      	mov	r0, r8
 80068d4:	f8cd a000 	str.w	sl, [sp]
 80068d8:	aa03      	add	r2, sp, #12
 80068da:	f7ff fedf 	bl	800669c <_printf_common>
 80068de:	3001      	adds	r0, #1
 80068e0:	d14c      	bne.n	800697c <_printf_i+0x200>
 80068e2:	f04f 30ff 	mov.w	r0, #4294967295
 80068e6:	b004      	add	sp, #16
 80068e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80068ec:	4834      	ldr	r0, [pc, #208]	; (80069c0 <_printf_i+0x244>)
 80068ee:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80068f2:	6829      	ldr	r1, [r5, #0]
 80068f4:	6823      	ldr	r3, [r4, #0]
 80068f6:	f851 6b04 	ldr.w	r6, [r1], #4
 80068fa:	6029      	str	r1, [r5, #0]
 80068fc:	061d      	lsls	r5, r3, #24
 80068fe:	d514      	bpl.n	800692a <_printf_i+0x1ae>
 8006900:	07df      	lsls	r7, r3, #31
 8006902:	bf44      	itt	mi
 8006904:	f043 0320 	orrmi.w	r3, r3, #32
 8006908:	6023      	strmi	r3, [r4, #0]
 800690a:	b91e      	cbnz	r6, 8006914 <_printf_i+0x198>
 800690c:	6823      	ldr	r3, [r4, #0]
 800690e:	f023 0320 	bic.w	r3, r3, #32
 8006912:	6023      	str	r3, [r4, #0]
 8006914:	2310      	movs	r3, #16
 8006916:	e7af      	b.n	8006878 <_printf_i+0xfc>
 8006918:	6823      	ldr	r3, [r4, #0]
 800691a:	f043 0320 	orr.w	r3, r3, #32
 800691e:	6023      	str	r3, [r4, #0]
 8006920:	2378      	movs	r3, #120	; 0x78
 8006922:	4828      	ldr	r0, [pc, #160]	; (80069c4 <_printf_i+0x248>)
 8006924:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8006928:	e7e3      	b.n	80068f2 <_printf_i+0x176>
 800692a:	0659      	lsls	r1, r3, #25
 800692c:	bf48      	it	mi
 800692e:	b2b6      	uxthmi	r6, r6
 8006930:	e7e6      	b.n	8006900 <_printf_i+0x184>
 8006932:	4615      	mov	r5, r2
 8006934:	e7bb      	b.n	80068ae <_printf_i+0x132>
 8006936:	682b      	ldr	r3, [r5, #0]
 8006938:	6826      	ldr	r6, [r4, #0]
 800693a:	1d18      	adds	r0, r3, #4
 800693c:	6961      	ldr	r1, [r4, #20]
 800693e:	6028      	str	r0, [r5, #0]
 8006940:	0635      	lsls	r5, r6, #24
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	d501      	bpl.n	800694a <_printf_i+0x1ce>
 8006946:	6019      	str	r1, [r3, #0]
 8006948:	e002      	b.n	8006950 <_printf_i+0x1d4>
 800694a:	0670      	lsls	r0, r6, #25
 800694c:	d5fb      	bpl.n	8006946 <_printf_i+0x1ca>
 800694e:	8019      	strh	r1, [r3, #0]
 8006950:	2300      	movs	r3, #0
 8006952:	4615      	mov	r5, r2
 8006954:	6123      	str	r3, [r4, #16]
 8006956:	e7ba      	b.n	80068ce <_printf_i+0x152>
 8006958:	682b      	ldr	r3, [r5, #0]
 800695a:	2100      	movs	r1, #0
 800695c:	1d1a      	adds	r2, r3, #4
 800695e:	602a      	str	r2, [r5, #0]
 8006960:	681d      	ldr	r5, [r3, #0]
 8006962:	6862      	ldr	r2, [r4, #4]
 8006964:	4628      	mov	r0, r5
 8006966:	f000 fb23 	bl	8006fb0 <memchr>
 800696a:	b108      	cbz	r0, 8006970 <_printf_i+0x1f4>
 800696c:	1b40      	subs	r0, r0, r5
 800696e:	6060      	str	r0, [r4, #4]
 8006970:	6863      	ldr	r3, [r4, #4]
 8006972:	6123      	str	r3, [r4, #16]
 8006974:	2300      	movs	r3, #0
 8006976:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800697a:	e7a8      	b.n	80068ce <_printf_i+0x152>
 800697c:	462a      	mov	r2, r5
 800697e:	4649      	mov	r1, r9
 8006980:	4640      	mov	r0, r8
 8006982:	6923      	ldr	r3, [r4, #16]
 8006984:	47d0      	blx	sl
 8006986:	3001      	adds	r0, #1
 8006988:	d0ab      	beq.n	80068e2 <_printf_i+0x166>
 800698a:	6823      	ldr	r3, [r4, #0]
 800698c:	079b      	lsls	r3, r3, #30
 800698e:	d413      	bmi.n	80069b8 <_printf_i+0x23c>
 8006990:	68e0      	ldr	r0, [r4, #12]
 8006992:	9b03      	ldr	r3, [sp, #12]
 8006994:	4298      	cmp	r0, r3
 8006996:	bfb8      	it	lt
 8006998:	4618      	movlt	r0, r3
 800699a:	e7a4      	b.n	80068e6 <_printf_i+0x16a>
 800699c:	2301      	movs	r3, #1
 800699e:	4632      	mov	r2, r6
 80069a0:	4649      	mov	r1, r9
 80069a2:	4640      	mov	r0, r8
 80069a4:	47d0      	blx	sl
 80069a6:	3001      	adds	r0, #1
 80069a8:	d09b      	beq.n	80068e2 <_printf_i+0x166>
 80069aa:	3501      	adds	r5, #1
 80069ac:	68e3      	ldr	r3, [r4, #12]
 80069ae:	9903      	ldr	r1, [sp, #12]
 80069b0:	1a5b      	subs	r3, r3, r1
 80069b2:	42ab      	cmp	r3, r5
 80069b4:	dcf2      	bgt.n	800699c <_printf_i+0x220>
 80069b6:	e7eb      	b.n	8006990 <_printf_i+0x214>
 80069b8:	2500      	movs	r5, #0
 80069ba:	f104 0619 	add.w	r6, r4, #25
 80069be:	e7f5      	b.n	80069ac <_printf_i+0x230>
 80069c0:	080074ab 	.word	0x080074ab
 80069c4:	080074bc 	.word	0x080074bc

080069c8 <_sbrk_r>:
 80069c8:	b538      	push	{r3, r4, r5, lr}
 80069ca:	2300      	movs	r3, #0
 80069cc:	4d05      	ldr	r5, [pc, #20]	; (80069e4 <_sbrk_r+0x1c>)
 80069ce:	4604      	mov	r4, r0
 80069d0:	4608      	mov	r0, r1
 80069d2:	602b      	str	r3, [r5, #0]
 80069d4:	f7fc f992 	bl	8002cfc <_sbrk>
 80069d8:	1c43      	adds	r3, r0, #1
 80069da:	d102      	bne.n	80069e2 <_sbrk_r+0x1a>
 80069dc:	682b      	ldr	r3, [r5, #0]
 80069de:	b103      	cbz	r3, 80069e2 <_sbrk_r+0x1a>
 80069e0:	6023      	str	r3, [r4, #0]
 80069e2:	bd38      	pop	{r3, r4, r5, pc}
 80069e4:	20000c3c 	.word	0x20000c3c

080069e8 <__swbuf_r>:
 80069e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069ea:	460e      	mov	r6, r1
 80069ec:	4614      	mov	r4, r2
 80069ee:	4605      	mov	r5, r0
 80069f0:	b118      	cbz	r0, 80069fa <__swbuf_r+0x12>
 80069f2:	6983      	ldr	r3, [r0, #24]
 80069f4:	b90b      	cbnz	r3, 80069fa <__swbuf_r+0x12>
 80069f6:	f000 f9d5 	bl	8006da4 <__sinit>
 80069fa:	4b21      	ldr	r3, [pc, #132]	; (8006a80 <__swbuf_r+0x98>)
 80069fc:	429c      	cmp	r4, r3
 80069fe:	d12b      	bne.n	8006a58 <__swbuf_r+0x70>
 8006a00:	686c      	ldr	r4, [r5, #4]
 8006a02:	69a3      	ldr	r3, [r4, #24]
 8006a04:	60a3      	str	r3, [r4, #8]
 8006a06:	89a3      	ldrh	r3, [r4, #12]
 8006a08:	071a      	lsls	r2, r3, #28
 8006a0a:	d52f      	bpl.n	8006a6c <__swbuf_r+0x84>
 8006a0c:	6923      	ldr	r3, [r4, #16]
 8006a0e:	b36b      	cbz	r3, 8006a6c <__swbuf_r+0x84>
 8006a10:	6923      	ldr	r3, [r4, #16]
 8006a12:	6820      	ldr	r0, [r4, #0]
 8006a14:	b2f6      	uxtb	r6, r6
 8006a16:	1ac0      	subs	r0, r0, r3
 8006a18:	6963      	ldr	r3, [r4, #20]
 8006a1a:	4637      	mov	r7, r6
 8006a1c:	4283      	cmp	r3, r0
 8006a1e:	dc04      	bgt.n	8006a2a <__swbuf_r+0x42>
 8006a20:	4621      	mov	r1, r4
 8006a22:	4628      	mov	r0, r5
 8006a24:	f000 f92a 	bl	8006c7c <_fflush_r>
 8006a28:	bb30      	cbnz	r0, 8006a78 <__swbuf_r+0x90>
 8006a2a:	68a3      	ldr	r3, [r4, #8]
 8006a2c:	3001      	adds	r0, #1
 8006a2e:	3b01      	subs	r3, #1
 8006a30:	60a3      	str	r3, [r4, #8]
 8006a32:	6823      	ldr	r3, [r4, #0]
 8006a34:	1c5a      	adds	r2, r3, #1
 8006a36:	6022      	str	r2, [r4, #0]
 8006a38:	701e      	strb	r6, [r3, #0]
 8006a3a:	6963      	ldr	r3, [r4, #20]
 8006a3c:	4283      	cmp	r3, r0
 8006a3e:	d004      	beq.n	8006a4a <__swbuf_r+0x62>
 8006a40:	89a3      	ldrh	r3, [r4, #12]
 8006a42:	07db      	lsls	r3, r3, #31
 8006a44:	d506      	bpl.n	8006a54 <__swbuf_r+0x6c>
 8006a46:	2e0a      	cmp	r6, #10
 8006a48:	d104      	bne.n	8006a54 <__swbuf_r+0x6c>
 8006a4a:	4621      	mov	r1, r4
 8006a4c:	4628      	mov	r0, r5
 8006a4e:	f000 f915 	bl	8006c7c <_fflush_r>
 8006a52:	b988      	cbnz	r0, 8006a78 <__swbuf_r+0x90>
 8006a54:	4638      	mov	r0, r7
 8006a56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006a58:	4b0a      	ldr	r3, [pc, #40]	; (8006a84 <__swbuf_r+0x9c>)
 8006a5a:	429c      	cmp	r4, r3
 8006a5c:	d101      	bne.n	8006a62 <__swbuf_r+0x7a>
 8006a5e:	68ac      	ldr	r4, [r5, #8]
 8006a60:	e7cf      	b.n	8006a02 <__swbuf_r+0x1a>
 8006a62:	4b09      	ldr	r3, [pc, #36]	; (8006a88 <__swbuf_r+0xa0>)
 8006a64:	429c      	cmp	r4, r3
 8006a66:	bf08      	it	eq
 8006a68:	68ec      	ldreq	r4, [r5, #12]
 8006a6a:	e7ca      	b.n	8006a02 <__swbuf_r+0x1a>
 8006a6c:	4621      	mov	r1, r4
 8006a6e:	4628      	mov	r0, r5
 8006a70:	f000 f80c 	bl	8006a8c <__swsetup_r>
 8006a74:	2800      	cmp	r0, #0
 8006a76:	d0cb      	beq.n	8006a10 <__swbuf_r+0x28>
 8006a78:	f04f 37ff 	mov.w	r7, #4294967295
 8006a7c:	e7ea      	b.n	8006a54 <__swbuf_r+0x6c>
 8006a7e:	bf00      	nop
 8006a80:	080074f0 	.word	0x080074f0
 8006a84:	08007510 	.word	0x08007510
 8006a88:	080074d0 	.word	0x080074d0

08006a8c <__swsetup_r>:
 8006a8c:	4b32      	ldr	r3, [pc, #200]	; (8006b58 <__swsetup_r+0xcc>)
 8006a8e:	b570      	push	{r4, r5, r6, lr}
 8006a90:	681d      	ldr	r5, [r3, #0]
 8006a92:	4606      	mov	r6, r0
 8006a94:	460c      	mov	r4, r1
 8006a96:	b125      	cbz	r5, 8006aa2 <__swsetup_r+0x16>
 8006a98:	69ab      	ldr	r3, [r5, #24]
 8006a9a:	b913      	cbnz	r3, 8006aa2 <__swsetup_r+0x16>
 8006a9c:	4628      	mov	r0, r5
 8006a9e:	f000 f981 	bl	8006da4 <__sinit>
 8006aa2:	4b2e      	ldr	r3, [pc, #184]	; (8006b5c <__swsetup_r+0xd0>)
 8006aa4:	429c      	cmp	r4, r3
 8006aa6:	d10f      	bne.n	8006ac8 <__swsetup_r+0x3c>
 8006aa8:	686c      	ldr	r4, [r5, #4]
 8006aaa:	89a3      	ldrh	r3, [r4, #12]
 8006aac:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006ab0:	0719      	lsls	r1, r3, #28
 8006ab2:	d42c      	bmi.n	8006b0e <__swsetup_r+0x82>
 8006ab4:	06dd      	lsls	r5, r3, #27
 8006ab6:	d411      	bmi.n	8006adc <__swsetup_r+0x50>
 8006ab8:	2309      	movs	r3, #9
 8006aba:	6033      	str	r3, [r6, #0]
 8006abc:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8006ac4:	81a3      	strh	r3, [r4, #12]
 8006ac6:	e03e      	b.n	8006b46 <__swsetup_r+0xba>
 8006ac8:	4b25      	ldr	r3, [pc, #148]	; (8006b60 <__swsetup_r+0xd4>)
 8006aca:	429c      	cmp	r4, r3
 8006acc:	d101      	bne.n	8006ad2 <__swsetup_r+0x46>
 8006ace:	68ac      	ldr	r4, [r5, #8]
 8006ad0:	e7eb      	b.n	8006aaa <__swsetup_r+0x1e>
 8006ad2:	4b24      	ldr	r3, [pc, #144]	; (8006b64 <__swsetup_r+0xd8>)
 8006ad4:	429c      	cmp	r4, r3
 8006ad6:	bf08      	it	eq
 8006ad8:	68ec      	ldreq	r4, [r5, #12]
 8006ada:	e7e6      	b.n	8006aaa <__swsetup_r+0x1e>
 8006adc:	0758      	lsls	r0, r3, #29
 8006ade:	d512      	bpl.n	8006b06 <__swsetup_r+0x7a>
 8006ae0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ae2:	b141      	cbz	r1, 8006af6 <__swsetup_r+0x6a>
 8006ae4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006ae8:	4299      	cmp	r1, r3
 8006aea:	d002      	beq.n	8006af2 <__swsetup_r+0x66>
 8006aec:	4630      	mov	r0, r6
 8006aee:	f7ff fba1 	bl	8006234 <_free_r>
 8006af2:	2300      	movs	r3, #0
 8006af4:	6363      	str	r3, [r4, #52]	; 0x34
 8006af6:	89a3      	ldrh	r3, [r4, #12]
 8006af8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006afc:	81a3      	strh	r3, [r4, #12]
 8006afe:	2300      	movs	r3, #0
 8006b00:	6063      	str	r3, [r4, #4]
 8006b02:	6923      	ldr	r3, [r4, #16]
 8006b04:	6023      	str	r3, [r4, #0]
 8006b06:	89a3      	ldrh	r3, [r4, #12]
 8006b08:	f043 0308 	orr.w	r3, r3, #8
 8006b0c:	81a3      	strh	r3, [r4, #12]
 8006b0e:	6923      	ldr	r3, [r4, #16]
 8006b10:	b94b      	cbnz	r3, 8006b26 <__swsetup_r+0x9a>
 8006b12:	89a3      	ldrh	r3, [r4, #12]
 8006b14:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006b18:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006b1c:	d003      	beq.n	8006b26 <__swsetup_r+0x9a>
 8006b1e:	4621      	mov	r1, r4
 8006b20:	4630      	mov	r0, r6
 8006b22:	f000 fa05 	bl	8006f30 <__smakebuf_r>
 8006b26:	89a0      	ldrh	r0, [r4, #12]
 8006b28:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006b2c:	f010 0301 	ands.w	r3, r0, #1
 8006b30:	d00a      	beq.n	8006b48 <__swsetup_r+0xbc>
 8006b32:	2300      	movs	r3, #0
 8006b34:	60a3      	str	r3, [r4, #8]
 8006b36:	6963      	ldr	r3, [r4, #20]
 8006b38:	425b      	negs	r3, r3
 8006b3a:	61a3      	str	r3, [r4, #24]
 8006b3c:	6923      	ldr	r3, [r4, #16]
 8006b3e:	b943      	cbnz	r3, 8006b52 <__swsetup_r+0xc6>
 8006b40:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006b44:	d1ba      	bne.n	8006abc <__swsetup_r+0x30>
 8006b46:	bd70      	pop	{r4, r5, r6, pc}
 8006b48:	0781      	lsls	r1, r0, #30
 8006b4a:	bf58      	it	pl
 8006b4c:	6963      	ldrpl	r3, [r4, #20]
 8006b4e:	60a3      	str	r3, [r4, #8]
 8006b50:	e7f4      	b.n	8006b3c <__swsetup_r+0xb0>
 8006b52:	2000      	movs	r0, #0
 8006b54:	e7f7      	b.n	8006b46 <__swsetup_r+0xba>
 8006b56:	bf00      	nop
 8006b58:	20000210 	.word	0x20000210
 8006b5c:	080074f0 	.word	0x080074f0
 8006b60:	08007510 	.word	0x08007510
 8006b64:	080074d0 	.word	0x080074d0

08006b68 <abort>:
 8006b68:	2006      	movs	r0, #6
 8006b6a:	b508      	push	{r3, lr}
 8006b6c:	f000 fa62 	bl	8007034 <raise>
 8006b70:	2001      	movs	r0, #1
 8006b72:	f7fc f850 	bl	8002c16 <_exit>
	...

08006b78 <__sflush_r>:
 8006b78:	898a      	ldrh	r2, [r1, #12]
 8006b7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b7c:	4605      	mov	r5, r0
 8006b7e:	0710      	lsls	r0, r2, #28
 8006b80:	460c      	mov	r4, r1
 8006b82:	d457      	bmi.n	8006c34 <__sflush_r+0xbc>
 8006b84:	684b      	ldr	r3, [r1, #4]
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	dc04      	bgt.n	8006b94 <__sflush_r+0x1c>
 8006b8a:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006b8c:	2b00      	cmp	r3, #0
 8006b8e:	dc01      	bgt.n	8006b94 <__sflush_r+0x1c>
 8006b90:	2000      	movs	r0, #0
 8006b92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006b94:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006b96:	2e00      	cmp	r6, #0
 8006b98:	d0fa      	beq.n	8006b90 <__sflush_r+0x18>
 8006b9a:	2300      	movs	r3, #0
 8006b9c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006ba0:	682f      	ldr	r7, [r5, #0]
 8006ba2:	602b      	str	r3, [r5, #0]
 8006ba4:	d032      	beq.n	8006c0c <__sflush_r+0x94>
 8006ba6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006ba8:	89a3      	ldrh	r3, [r4, #12]
 8006baa:	075a      	lsls	r2, r3, #29
 8006bac:	d505      	bpl.n	8006bba <__sflush_r+0x42>
 8006bae:	6863      	ldr	r3, [r4, #4]
 8006bb0:	1ac0      	subs	r0, r0, r3
 8006bb2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006bb4:	b10b      	cbz	r3, 8006bba <__sflush_r+0x42>
 8006bb6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006bb8:	1ac0      	subs	r0, r0, r3
 8006bba:	2300      	movs	r3, #0
 8006bbc:	4602      	mov	r2, r0
 8006bbe:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006bc0:	4628      	mov	r0, r5
 8006bc2:	6a21      	ldr	r1, [r4, #32]
 8006bc4:	47b0      	blx	r6
 8006bc6:	1c43      	adds	r3, r0, #1
 8006bc8:	89a3      	ldrh	r3, [r4, #12]
 8006bca:	d106      	bne.n	8006bda <__sflush_r+0x62>
 8006bcc:	6829      	ldr	r1, [r5, #0]
 8006bce:	291d      	cmp	r1, #29
 8006bd0:	d82c      	bhi.n	8006c2c <__sflush_r+0xb4>
 8006bd2:	4a29      	ldr	r2, [pc, #164]	; (8006c78 <__sflush_r+0x100>)
 8006bd4:	40ca      	lsrs	r2, r1
 8006bd6:	07d6      	lsls	r6, r2, #31
 8006bd8:	d528      	bpl.n	8006c2c <__sflush_r+0xb4>
 8006bda:	2200      	movs	r2, #0
 8006bdc:	6062      	str	r2, [r4, #4]
 8006bde:	6922      	ldr	r2, [r4, #16]
 8006be0:	04d9      	lsls	r1, r3, #19
 8006be2:	6022      	str	r2, [r4, #0]
 8006be4:	d504      	bpl.n	8006bf0 <__sflush_r+0x78>
 8006be6:	1c42      	adds	r2, r0, #1
 8006be8:	d101      	bne.n	8006bee <__sflush_r+0x76>
 8006bea:	682b      	ldr	r3, [r5, #0]
 8006bec:	b903      	cbnz	r3, 8006bf0 <__sflush_r+0x78>
 8006bee:	6560      	str	r0, [r4, #84]	; 0x54
 8006bf0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006bf2:	602f      	str	r7, [r5, #0]
 8006bf4:	2900      	cmp	r1, #0
 8006bf6:	d0cb      	beq.n	8006b90 <__sflush_r+0x18>
 8006bf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006bfc:	4299      	cmp	r1, r3
 8006bfe:	d002      	beq.n	8006c06 <__sflush_r+0x8e>
 8006c00:	4628      	mov	r0, r5
 8006c02:	f7ff fb17 	bl	8006234 <_free_r>
 8006c06:	2000      	movs	r0, #0
 8006c08:	6360      	str	r0, [r4, #52]	; 0x34
 8006c0a:	e7c2      	b.n	8006b92 <__sflush_r+0x1a>
 8006c0c:	6a21      	ldr	r1, [r4, #32]
 8006c0e:	2301      	movs	r3, #1
 8006c10:	4628      	mov	r0, r5
 8006c12:	47b0      	blx	r6
 8006c14:	1c41      	adds	r1, r0, #1
 8006c16:	d1c7      	bne.n	8006ba8 <__sflush_r+0x30>
 8006c18:	682b      	ldr	r3, [r5, #0]
 8006c1a:	2b00      	cmp	r3, #0
 8006c1c:	d0c4      	beq.n	8006ba8 <__sflush_r+0x30>
 8006c1e:	2b1d      	cmp	r3, #29
 8006c20:	d001      	beq.n	8006c26 <__sflush_r+0xae>
 8006c22:	2b16      	cmp	r3, #22
 8006c24:	d101      	bne.n	8006c2a <__sflush_r+0xb2>
 8006c26:	602f      	str	r7, [r5, #0]
 8006c28:	e7b2      	b.n	8006b90 <__sflush_r+0x18>
 8006c2a:	89a3      	ldrh	r3, [r4, #12]
 8006c2c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c30:	81a3      	strh	r3, [r4, #12]
 8006c32:	e7ae      	b.n	8006b92 <__sflush_r+0x1a>
 8006c34:	690f      	ldr	r7, [r1, #16]
 8006c36:	2f00      	cmp	r7, #0
 8006c38:	d0aa      	beq.n	8006b90 <__sflush_r+0x18>
 8006c3a:	0793      	lsls	r3, r2, #30
 8006c3c:	bf18      	it	ne
 8006c3e:	2300      	movne	r3, #0
 8006c40:	680e      	ldr	r6, [r1, #0]
 8006c42:	bf08      	it	eq
 8006c44:	694b      	ldreq	r3, [r1, #20]
 8006c46:	1bf6      	subs	r6, r6, r7
 8006c48:	600f      	str	r7, [r1, #0]
 8006c4a:	608b      	str	r3, [r1, #8]
 8006c4c:	2e00      	cmp	r6, #0
 8006c4e:	dd9f      	ble.n	8006b90 <__sflush_r+0x18>
 8006c50:	4633      	mov	r3, r6
 8006c52:	463a      	mov	r2, r7
 8006c54:	4628      	mov	r0, r5
 8006c56:	6a21      	ldr	r1, [r4, #32]
 8006c58:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006c5c:	47e0      	blx	ip
 8006c5e:	2800      	cmp	r0, #0
 8006c60:	dc06      	bgt.n	8006c70 <__sflush_r+0xf8>
 8006c62:	89a3      	ldrh	r3, [r4, #12]
 8006c64:	f04f 30ff 	mov.w	r0, #4294967295
 8006c68:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006c6c:	81a3      	strh	r3, [r4, #12]
 8006c6e:	e790      	b.n	8006b92 <__sflush_r+0x1a>
 8006c70:	4407      	add	r7, r0
 8006c72:	1a36      	subs	r6, r6, r0
 8006c74:	e7ea      	b.n	8006c4c <__sflush_r+0xd4>
 8006c76:	bf00      	nop
 8006c78:	20400001 	.word	0x20400001

08006c7c <_fflush_r>:
 8006c7c:	b538      	push	{r3, r4, r5, lr}
 8006c7e:	690b      	ldr	r3, [r1, #16]
 8006c80:	4605      	mov	r5, r0
 8006c82:	460c      	mov	r4, r1
 8006c84:	b913      	cbnz	r3, 8006c8c <_fflush_r+0x10>
 8006c86:	2500      	movs	r5, #0
 8006c88:	4628      	mov	r0, r5
 8006c8a:	bd38      	pop	{r3, r4, r5, pc}
 8006c8c:	b118      	cbz	r0, 8006c96 <_fflush_r+0x1a>
 8006c8e:	6983      	ldr	r3, [r0, #24]
 8006c90:	b90b      	cbnz	r3, 8006c96 <_fflush_r+0x1a>
 8006c92:	f000 f887 	bl	8006da4 <__sinit>
 8006c96:	4b14      	ldr	r3, [pc, #80]	; (8006ce8 <_fflush_r+0x6c>)
 8006c98:	429c      	cmp	r4, r3
 8006c9a:	d11b      	bne.n	8006cd4 <_fflush_r+0x58>
 8006c9c:	686c      	ldr	r4, [r5, #4]
 8006c9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	d0ef      	beq.n	8006c86 <_fflush_r+0xa>
 8006ca6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ca8:	07d0      	lsls	r0, r2, #31
 8006caa:	d404      	bmi.n	8006cb6 <_fflush_r+0x3a>
 8006cac:	0599      	lsls	r1, r3, #22
 8006cae:	d402      	bmi.n	8006cb6 <_fflush_r+0x3a>
 8006cb0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cb2:	f000 f915 	bl	8006ee0 <__retarget_lock_acquire_recursive>
 8006cb6:	4628      	mov	r0, r5
 8006cb8:	4621      	mov	r1, r4
 8006cba:	f7ff ff5d 	bl	8006b78 <__sflush_r>
 8006cbe:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006cc0:	4605      	mov	r5, r0
 8006cc2:	07da      	lsls	r2, r3, #31
 8006cc4:	d4e0      	bmi.n	8006c88 <_fflush_r+0xc>
 8006cc6:	89a3      	ldrh	r3, [r4, #12]
 8006cc8:	059b      	lsls	r3, r3, #22
 8006cca:	d4dd      	bmi.n	8006c88 <_fflush_r+0xc>
 8006ccc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006cce:	f000 f908 	bl	8006ee2 <__retarget_lock_release_recursive>
 8006cd2:	e7d9      	b.n	8006c88 <_fflush_r+0xc>
 8006cd4:	4b05      	ldr	r3, [pc, #20]	; (8006cec <_fflush_r+0x70>)
 8006cd6:	429c      	cmp	r4, r3
 8006cd8:	d101      	bne.n	8006cde <_fflush_r+0x62>
 8006cda:	68ac      	ldr	r4, [r5, #8]
 8006cdc:	e7df      	b.n	8006c9e <_fflush_r+0x22>
 8006cde:	4b04      	ldr	r3, [pc, #16]	; (8006cf0 <_fflush_r+0x74>)
 8006ce0:	429c      	cmp	r4, r3
 8006ce2:	bf08      	it	eq
 8006ce4:	68ec      	ldreq	r4, [r5, #12]
 8006ce6:	e7da      	b.n	8006c9e <_fflush_r+0x22>
 8006ce8:	080074f0 	.word	0x080074f0
 8006cec:	08007510 	.word	0x08007510
 8006cf0:	080074d0 	.word	0x080074d0

08006cf4 <std>:
 8006cf4:	2300      	movs	r3, #0
 8006cf6:	b510      	push	{r4, lr}
 8006cf8:	4604      	mov	r4, r0
 8006cfa:	e9c0 3300 	strd	r3, r3, [r0]
 8006cfe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006d02:	6083      	str	r3, [r0, #8]
 8006d04:	8181      	strh	r1, [r0, #12]
 8006d06:	6643      	str	r3, [r0, #100]	; 0x64
 8006d08:	81c2      	strh	r2, [r0, #14]
 8006d0a:	6183      	str	r3, [r0, #24]
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	2208      	movs	r2, #8
 8006d10:	305c      	adds	r0, #92	; 0x5c
 8006d12:	f7ff fa11 	bl	8006138 <memset>
 8006d16:	4b05      	ldr	r3, [pc, #20]	; (8006d2c <std+0x38>)
 8006d18:	6224      	str	r4, [r4, #32]
 8006d1a:	6263      	str	r3, [r4, #36]	; 0x24
 8006d1c:	4b04      	ldr	r3, [pc, #16]	; (8006d30 <std+0x3c>)
 8006d1e:	62a3      	str	r3, [r4, #40]	; 0x28
 8006d20:	4b04      	ldr	r3, [pc, #16]	; (8006d34 <std+0x40>)
 8006d22:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006d24:	4b04      	ldr	r3, [pc, #16]	; (8006d38 <std+0x44>)
 8006d26:	6323      	str	r3, [r4, #48]	; 0x30
 8006d28:	bd10      	pop	{r4, pc}
 8006d2a:	bf00      	nop
 8006d2c:	0800706d 	.word	0x0800706d
 8006d30:	0800708f 	.word	0x0800708f
 8006d34:	080070c7 	.word	0x080070c7
 8006d38:	080070eb 	.word	0x080070eb

08006d3c <_cleanup_r>:
 8006d3c:	4901      	ldr	r1, [pc, #4]	; (8006d44 <_cleanup_r+0x8>)
 8006d3e:	f000 b8af 	b.w	8006ea0 <_fwalk_reent>
 8006d42:	bf00      	nop
 8006d44:	08006c7d 	.word	0x08006c7d

08006d48 <__sfmoreglue>:
 8006d48:	2268      	movs	r2, #104	; 0x68
 8006d4a:	b570      	push	{r4, r5, r6, lr}
 8006d4c:	1e4d      	subs	r5, r1, #1
 8006d4e:	4355      	muls	r5, r2
 8006d50:	460e      	mov	r6, r1
 8006d52:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006d56:	f7ff fad5 	bl	8006304 <_malloc_r>
 8006d5a:	4604      	mov	r4, r0
 8006d5c:	b140      	cbz	r0, 8006d70 <__sfmoreglue+0x28>
 8006d5e:	2100      	movs	r1, #0
 8006d60:	e9c0 1600 	strd	r1, r6, [r0]
 8006d64:	300c      	adds	r0, #12
 8006d66:	60a0      	str	r0, [r4, #8]
 8006d68:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006d6c:	f7ff f9e4 	bl	8006138 <memset>
 8006d70:	4620      	mov	r0, r4
 8006d72:	bd70      	pop	{r4, r5, r6, pc}

08006d74 <__sfp_lock_acquire>:
 8006d74:	4801      	ldr	r0, [pc, #4]	; (8006d7c <__sfp_lock_acquire+0x8>)
 8006d76:	f000 b8b3 	b.w	8006ee0 <__retarget_lock_acquire_recursive>
 8006d7a:	bf00      	nop
 8006d7c:	20000c39 	.word	0x20000c39

08006d80 <__sfp_lock_release>:
 8006d80:	4801      	ldr	r0, [pc, #4]	; (8006d88 <__sfp_lock_release+0x8>)
 8006d82:	f000 b8ae 	b.w	8006ee2 <__retarget_lock_release_recursive>
 8006d86:	bf00      	nop
 8006d88:	20000c39 	.word	0x20000c39

08006d8c <__sinit_lock_acquire>:
 8006d8c:	4801      	ldr	r0, [pc, #4]	; (8006d94 <__sinit_lock_acquire+0x8>)
 8006d8e:	f000 b8a7 	b.w	8006ee0 <__retarget_lock_acquire_recursive>
 8006d92:	bf00      	nop
 8006d94:	20000c3a 	.word	0x20000c3a

08006d98 <__sinit_lock_release>:
 8006d98:	4801      	ldr	r0, [pc, #4]	; (8006da0 <__sinit_lock_release+0x8>)
 8006d9a:	f000 b8a2 	b.w	8006ee2 <__retarget_lock_release_recursive>
 8006d9e:	bf00      	nop
 8006da0:	20000c3a 	.word	0x20000c3a

08006da4 <__sinit>:
 8006da4:	b510      	push	{r4, lr}
 8006da6:	4604      	mov	r4, r0
 8006da8:	f7ff fff0 	bl	8006d8c <__sinit_lock_acquire>
 8006dac:	69a3      	ldr	r3, [r4, #24]
 8006dae:	b11b      	cbz	r3, 8006db8 <__sinit+0x14>
 8006db0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006db4:	f7ff bff0 	b.w	8006d98 <__sinit_lock_release>
 8006db8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006dbc:	6523      	str	r3, [r4, #80]	; 0x50
 8006dbe:	4b13      	ldr	r3, [pc, #76]	; (8006e0c <__sinit+0x68>)
 8006dc0:	4a13      	ldr	r2, [pc, #76]	; (8006e10 <__sinit+0x6c>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	62a2      	str	r2, [r4, #40]	; 0x28
 8006dc6:	42a3      	cmp	r3, r4
 8006dc8:	bf08      	it	eq
 8006dca:	2301      	moveq	r3, #1
 8006dcc:	4620      	mov	r0, r4
 8006dce:	bf08      	it	eq
 8006dd0:	61a3      	streq	r3, [r4, #24]
 8006dd2:	f000 f81f 	bl	8006e14 <__sfp>
 8006dd6:	6060      	str	r0, [r4, #4]
 8006dd8:	4620      	mov	r0, r4
 8006dda:	f000 f81b 	bl	8006e14 <__sfp>
 8006dde:	60a0      	str	r0, [r4, #8]
 8006de0:	4620      	mov	r0, r4
 8006de2:	f000 f817 	bl	8006e14 <__sfp>
 8006de6:	2200      	movs	r2, #0
 8006de8:	2104      	movs	r1, #4
 8006dea:	60e0      	str	r0, [r4, #12]
 8006dec:	6860      	ldr	r0, [r4, #4]
 8006dee:	f7ff ff81 	bl	8006cf4 <std>
 8006df2:	2201      	movs	r2, #1
 8006df4:	2109      	movs	r1, #9
 8006df6:	68a0      	ldr	r0, [r4, #8]
 8006df8:	f7ff ff7c 	bl	8006cf4 <std>
 8006dfc:	2202      	movs	r2, #2
 8006dfe:	2112      	movs	r1, #18
 8006e00:	68e0      	ldr	r0, [r4, #12]
 8006e02:	f7ff ff77 	bl	8006cf4 <std>
 8006e06:	2301      	movs	r3, #1
 8006e08:	61a3      	str	r3, [r4, #24]
 8006e0a:	e7d1      	b.n	8006db0 <__sinit+0xc>
 8006e0c:	080073e8 	.word	0x080073e8
 8006e10:	08006d3d 	.word	0x08006d3d

08006e14 <__sfp>:
 8006e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e16:	4607      	mov	r7, r0
 8006e18:	f7ff ffac 	bl	8006d74 <__sfp_lock_acquire>
 8006e1c:	4b1e      	ldr	r3, [pc, #120]	; (8006e98 <__sfp+0x84>)
 8006e1e:	681e      	ldr	r6, [r3, #0]
 8006e20:	69b3      	ldr	r3, [r6, #24]
 8006e22:	b913      	cbnz	r3, 8006e2a <__sfp+0x16>
 8006e24:	4630      	mov	r0, r6
 8006e26:	f7ff ffbd 	bl	8006da4 <__sinit>
 8006e2a:	3648      	adds	r6, #72	; 0x48
 8006e2c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006e30:	3b01      	subs	r3, #1
 8006e32:	d503      	bpl.n	8006e3c <__sfp+0x28>
 8006e34:	6833      	ldr	r3, [r6, #0]
 8006e36:	b30b      	cbz	r3, 8006e7c <__sfp+0x68>
 8006e38:	6836      	ldr	r6, [r6, #0]
 8006e3a:	e7f7      	b.n	8006e2c <__sfp+0x18>
 8006e3c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006e40:	b9d5      	cbnz	r5, 8006e78 <__sfp+0x64>
 8006e42:	4b16      	ldr	r3, [pc, #88]	; (8006e9c <__sfp+0x88>)
 8006e44:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006e48:	60e3      	str	r3, [r4, #12]
 8006e4a:	6665      	str	r5, [r4, #100]	; 0x64
 8006e4c:	f000 f847 	bl	8006ede <__retarget_lock_init_recursive>
 8006e50:	f7ff ff96 	bl	8006d80 <__sfp_lock_release>
 8006e54:	2208      	movs	r2, #8
 8006e56:	4629      	mov	r1, r5
 8006e58:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006e5c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006e60:	6025      	str	r5, [r4, #0]
 8006e62:	61a5      	str	r5, [r4, #24]
 8006e64:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006e68:	f7ff f966 	bl	8006138 <memset>
 8006e6c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006e70:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006e74:	4620      	mov	r0, r4
 8006e76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006e78:	3468      	adds	r4, #104	; 0x68
 8006e7a:	e7d9      	b.n	8006e30 <__sfp+0x1c>
 8006e7c:	2104      	movs	r1, #4
 8006e7e:	4638      	mov	r0, r7
 8006e80:	f7ff ff62 	bl	8006d48 <__sfmoreglue>
 8006e84:	4604      	mov	r4, r0
 8006e86:	6030      	str	r0, [r6, #0]
 8006e88:	2800      	cmp	r0, #0
 8006e8a:	d1d5      	bne.n	8006e38 <__sfp+0x24>
 8006e8c:	f7ff ff78 	bl	8006d80 <__sfp_lock_release>
 8006e90:	230c      	movs	r3, #12
 8006e92:	603b      	str	r3, [r7, #0]
 8006e94:	e7ee      	b.n	8006e74 <__sfp+0x60>
 8006e96:	bf00      	nop
 8006e98:	080073e8 	.word	0x080073e8
 8006e9c:	ffff0001 	.word	0xffff0001

08006ea0 <_fwalk_reent>:
 8006ea0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006ea4:	4606      	mov	r6, r0
 8006ea6:	4688      	mov	r8, r1
 8006ea8:	2700      	movs	r7, #0
 8006eaa:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006eae:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006eb2:	f1b9 0901 	subs.w	r9, r9, #1
 8006eb6:	d505      	bpl.n	8006ec4 <_fwalk_reent+0x24>
 8006eb8:	6824      	ldr	r4, [r4, #0]
 8006eba:	2c00      	cmp	r4, #0
 8006ebc:	d1f7      	bne.n	8006eae <_fwalk_reent+0xe>
 8006ebe:	4638      	mov	r0, r7
 8006ec0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006ec4:	89ab      	ldrh	r3, [r5, #12]
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d907      	bls.n	8006eda <_fwalk_reent+0x3a>
 8006eca:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006ece:	3301      	adds	r3, #1
 8006ed0:	d003      	beq.n	8006eda <_fwalk_reent+0x3a>
 8006ed2:	4629      	mov	r1, r5
 8006ed4:	4630      	mov	r0, r6
 8006ed6:	47c0      	blx	r8
 8006ed8:	4307      	orrs	r7, r0
 8006eda:	3568      	adds	r5, #104	; 0x68
 8006edc:	e7e9      	b.n	8006eb2 <_fwalk_reent+0x12>

08006ede <__retarget_lock_init_recursive>:
 8006ede:	4770      	bx	lr

08006ee0 <__retarget_lock_acquire_recursive>:
 8006ee0:	4770      	bx	lr

08006ee2 <__retarget_lock_release_recursive>:
 8006ee2:	4770      	bx	lr

08006ee4 <__swhatbuf_r>:
 8006ee4:	b570      	push	{r4, r5, r6, lr}
 8006ee6:	460e      	mov	r6, r1
 8006ee8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006eec:	4614      	mov	r4, r2
 8006eee:	2900      	cmp	r1, #0
 8006ef0:	461d      	mov	r5, r3
 8006ef2:	b096      	sub	sp, #88	; 0x58
 8006ef4:	da08      	bge.n	8006f08 <__swhatbuf_r+0x24>
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 8006efc:	602a      	str	r2, [r5, #0]
 8006efe:	061a      	lsls	r2, r3, #24
 8006f00:	d410      	bmi.n	8006f24 <__swhatbuf_r+0x40>
 8006f02:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006f06:	e00e      	b.n	8006f26 <__swhatbuf_r+0x42>
 8006f08:	466a      	mov	r2, sp
 8006f0a:	f000 f915 	bl	8007138 <_fstat_r>
 8006f0e:	2800      	cmp	r0, #0
 8006f10:	dbf1      	blt.n	8006ef6 <__swhatbuf_r+0x12>
 8006f12:	9a01      	ldr	r2, [sp, #4]
 8006f14:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006f18:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006f1c:	425a      	negs	r2, r3
 8006f1e:	415a      	adcs	r2, r3
 8006f20:	602a      	str	r2, [r5, #0]
 8006f22:	e7ee      	b.n	8006f02 <__swhatbuf_r+0x1e>
 8006f24:	2340      	movs	r3, #64	; 0x40
 8006f26:	2000      	movs	r0, #0
 8006f28:	6023      	str	r3, [r4, #0]
 8006f2a:	b016      	add	sp, #88	; 0x58
 8006f2c:	bd70      	pop	{r4, r5, r6, pc}
	...

08006f30 <__smakebuf_r>:
 8006f30:	898b      	ldrh	r3, [r1, #12]
 8006f32:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006f34:	079d      	lsls	r5, r3, #30
 8006f36:	4606      	mov	r6, r0
 8006f38:	460c      	mov	r4, r1
 8006f3a:	d507      	bpl.n	8006f4c <__smakebuf_r+0x1c>
 8006f3c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006f40:	6023      	str	r3, [r4, #0]
 8006f42:	6123      	str	r3, [r4, #16]
 8006f44:	2301      	movs	r3, #1
 8006f46:	6163      	str	r3, [r4, #20]
 8006f48:	b002      	add	sp, #8
 8006f4a:	bd70      	pop	{r4, r5, r6, pc}
 8006f4c:	466a      	mov	r2, sp
 8006f4e:	ab01      	add	r3, sp, #4
 8006f50:	f7ff ffc8 	bl	8006ee4 <__swhatbuf_r>
 8006f54:	9900      	ldr	r1, [sp, #0]
 8006f56:	4605      	mov	r5, r0
 8006f58:	4630      	mov	r0, r6
 8006f5a:	f7ff f9d3 	bl	8006304 <_malloc_r>
 8006f5e:	b948      	cbnz	r0, 8006f74 <__smakebuf_r+0x44>
 8006f60:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006f64:	059a      	lsls	r2, r3, #22
 8006f66:	d4ef      	bmi.n	8006f48 <__smakebuf_r+0x18>
 8006f68:	f023 0303 	bic.w	r3, r3, #3
 8006f6c:	f043 0302 	orr.w	r3, r3, #2
 8006f70:	81a3      	strh	r3, [r4, #12]
 8006f72:	e7e3      	b.n	8006f3c <__smakebuf_r+0xc>
 8006f74:	4b0d      	ldr	r3, [pc, #52]	; (8006fac <__smakebuf_r+0x7c>)
 8006f76:	62b3      	str	r3, [r6, #40]	; 0x28
 8006f78:	89a3      	ldrh	r3, [r4, #12]
 8006f7a:	6020      	str	r0, [r4, #0]
 8006f7c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f80:	81a3      	strh	r3, [r4, #12]
 8006f82:	9b00      	ldr	r3, [sp, #0]
 8006f84:	6120      	str	r0, [r4, #16]
 8006f86:	6163      	str	r3, [r4, #20]
 8006f88:	9b01      	ldr	r3, [sp, #4]
 8006f8a:	b15b      	cbz	r3, 8006fa4 <__smakebuf_r+0x74>
 8006f8c:	4630      	mov	r0, r6
 8006f8e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f92:	f000 f8e3 	bl	800715c <_isatty_r>
 8006f96:	b128      	cbz	r0, 8006fa4 <__smakebuf_r+0x74>
 8006f98:	89a3      	ldrh	r3, [r4, #12]
 8006f9a:	f023 0303 	bic.w	r3, r3, #3
 8006f9e:	f043 0301 	orr.w	r3, r3, #1
 8006fa2:	81a3      	strh	r3, [r4, #12]
 8006fa4:	89a0      	ldrh	r0, [r4, #12]
 8006fa6:	4305      	orrs	r5, r0
 8006fa8:	81a5      	strh	r5, [r4, #12]
 8006faa:	e7cd      	b.n	8006f48 <__smakebuf_r+0x18>
 8006fac:	08006d3d 	.word	0x08006d3d

08006fb0 <memchr>:
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	b510      	push	{r4, lr}
 8006fb4:	b2c9      	uxtb	r1, r1
 8006fb6:	4402      	add	r2, r0
 8006fb8:	4293      	cmp	r3, r2
 8006fba:	4618      	mov	r0, r3
 8006fbc:	d101      	bne.n	8006fc2 <memchr+0x12>
 8006fbe:	2000      	movs	r0, #0
 8006fc0:	e003      	b.n	8006fca <memchr+0x1a>
 8006fc2:	7804      	ldrb	r4, [r0, #0]
 8006fc4:	3301      	adds	r3, #1
 8006fc6:	428c      	cmp	r4, r1
 8006fc8:	d1f6      	bne.n	8006fb8 <memchr+0x8>
 8006fca:	bd10      	pop	{r4, pc}

08006fcc <__malloc_lock>:
 8006fcc:	4801      	ldr	r0, [pc, #4]	; (8006fd4 <__malloc_lock+0x8>)
 8006fce:	f7ff bf87 	b.w	8006ee0 <__retarget_lock_acquire_recursive>
 8006fd2:	bf00      	nop
 8006fd4:	20000c38 	.word	0x20000c38

08006fd8 <__malloc_unlock>:
 8006fd8:	4801      	ldr	r0, [pc, #4]	; (8006fe0 <__malloc_unlock+0x8>)
 8006fda:	f7ff bf82 	b.w	8006ee2 <__retarget_lock_release_recursive>
 8006fde:	bf00      	nop
 8006fe0:	20000c38 	.word	0x20000c38

08006fe4 <_raise_r>:
 8006fe4:	291f      	cmp	r1, #31
 8006fe6:	b538      	push	{r3, r4, r5, lr}
 8006fe8:	4604      	mov	r4, r0
 8006fea:	460d      	mov	r5, r1
 8006fec:	d904      	bls.n	8006ff8 <_raise_r+0x14>
 8006fee:	2316      	movs	r3, #22
 8006ff0:	6003      	str	r3, [r0, #0]
 8006ff2:	f04f 30ff 	mov.w	r0, #4294967295
 8006ff6:	bd38      	pop	{r3, r4, r5, pc}
 8006ff8:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006ffa:	b112      	cbz	r2, 8007002 <_raise_r+0x1e>
 8006ffc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007000:	b94b      	cbnz	r3, 8007016 <_raise_r+0x32>
 8007002:	4620      	mov	r0, r4
 8007004:	f000 f830 	bl	8007068 <_getpid_r>
 8007008:	462a      	mov	r2, r5
 800700a:	4601      	mov	r1, r0
 800700c:	4620      	mov	r0, r4
 800700e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007012:	f000 b817 	b.w	8007044 <_kill_r>
 8007016:	2b01      	cmp	r3, #1
 8007018:	d00a      	beq.n	8007030 <_raise_r+0x4c>
 800701a:	1c59      	adds	r1, r3, #1
 800701c:	d103      	bne.n	8007026 <_raise_r+0x42>
 800701e:	2316      	movs	r3, #22
 8007020:	6003      	str	r3, [r0, #0]
 8007022:	2001      	movs	r0, #1
 8007024:	e7e7      	b.n	8006ff6 <_raise_r+0x12>
 8007026:	2400      	movs	r4, #0
 8007028:	4628      	mov	r0, r5
 800702a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800702e:	4798      	blx	r3
 8007030:	2000      	movs	r0, #0
 8007032:	e7e0      	b.n	8006ff6 <_raise_r+0x12>

08007034 <raise>:
 8007034:	4b02      	ldr	r3, [pc, #8]	; (8007040 <raise+0xc>)
 8007036:	4601      	mov	r1, r0
 8007038:	6818      	ldr	r0, [r3, #0]
 800703a:	f7ff bfd3 	b.w	8006fe4 <_raise_r>
 800703e:	bf00      	nop
 8007040:	20000210 	.word	0x20000210

08007044 <_kill_r>:
 8007044:	b538      	push	{r3, r4, r5, lr}
 8007046:	2300      	movs	r3, #0
 8007048:	4d06      	ldr	r5, [pc, #24]	; (8007064 <_kill_r+0x20>)
 800704a:	4604      	mov	r4, r0
 800704c:	4608      	mov	r0, r1
 800704e:	4611      	mov	r1, r2
 8007050:	602b      	str	r3, [r5, #0]
 8007052:	f7fb fdd0 	bl	8002bf6 <_kill>
 8007056:	1c43      	adds	r3, r0, #1
 8007058:	d102      	bne.n	8007060 <_kill_r+0x1c>
 800705a:	682b      	ldr	r3, [r5, #0]
 800705c:	b103      	cbz	r3, 8007060 <_kill_r+0x1c>
 800705e:	6023      	str	r3, [r4, #0]
 8007060:	bd38      	pop	{r3, r4, r5, pc}
 8007062:	bf00      	nop
 8007064:	20000c3c 	.word	0x20000c3c

08007068 <_getpid_r>:
 8007068:	f7fb bdbe 	b.w	8002be8 <_getpid>

0800706c <__sread>:
 800706c:	b510      	push	{r4, lr}
 800706e:	460c      	mov	r4, r1
 8007070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007074:	f000 f894 	bl	80071a0 <_read_r>
 8007078:	2800      	cmp	r0, #0
 800707a:	bfab      	itete	ge
 800707c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800707e:	89a3      	ldrhlt	r3, [r4, #12]
 8007080:	181b      	addge	r3, r3, r0
 8007082:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007086:	bfac      	ite	ge
 8007088:	6563      	strge	r3, [r4, #84]	; 0x54
 800708a:	81a3      	strhlt	r3, [r4, #12]
 800708c:	bd10      	pop	{r4, pc}

0800708e <__swrite>:
 800708e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007092:	461f      	mov	r7, r3
 8007094:	898b      	ldrh	r3, [r1, #12]
 8007096:	4605      	mov	r5, r0
 8007098:	05db      	lsls	r3, r3, #23
 800709a:	460c      	mov	r4, r1
 800709c:	4616      	mov	r6, r2
 800709e:	d505      	bpl.n	80070ac <__swrite+0x1e>
 80070a0:	2302      	movs	r3, #2
 80070a2:	2200      	movs	r2, #0
 80070a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070a8:	f000 f868 	bl	800717c <_lseek_r>
 80070ac:	89a3      	ldrh	r3, [r4, #12]
 80070ae:	4632      	mov	r2, r6
 80070b0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80070b4:	81a3      	strh	r3, [r4, #12]
 80070b6:	4628      	mov	r0, r5
 80070b8:	463b      	mov	r3, r7
 80070ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80070be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80070c2:	f000 b817 	b.w	80070f4 <_write_r>

080070c6 <__sseek>:
 80070c6:	b510      	push	{r4, lr}
 80070c8:	460c      	mov	r4, r1
 80070ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070ce:	f000 f855 	bl	800717c <_lseek_r>
 80070d2:	1c43      	adds	r3, r0, #1
 80070d4:	89a3      	ldrh	r3, [r4, #12]
 80070d6:	bf15      	itete	ne
 80070d8:	6560      	strne	r0, [r4, #84]	; 0x54
 80070da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80070de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80070e2:	81a3      	strheq	r3, [r4, #12]
 80070e4:	bf18      	it	ne
 80070e6:	81a3      	strhne	r3, [r4, #12]
 80070e8:	bd10      	pop	{r4, pc}

080070ea <__sclose>:
 80070ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070ee:	f000 b813 	b.w	8007118 <_close_r>
	...

080070f4 <_write_r>:
 80070f4:	b538      	push	{r3, r4, r5, lr}
 80070f6:	4604      	mov	r4, r0
 80070f8:	4608      	mov	r0, r1
 80070fa:	4611      	mov	r1, r2
 80070fc:	2200      	movs	r2, #0
 80070fe:	4d05      	ldr	r5, [pc, #20]	; (8007114 <_write_r+0x20>)
 8007100:	602a      	str	r2, [r5, #0]
 8007102:	461a      	mov	r2, r3
 8007104:	f7fb fdae 	bl	8002c64 <_write>
 8007108:	1c43      	adds	r3, r0, #1
 800710a:	d102      	bne.n	8007112 <_write_r+0x1e>
 800710c:	682b      	ldr	r3, [r5, #0]
 800710e:	b103      	cbz	r3, 8007112 <_write_r+0x1e>
 8007110:	6023      	str	r3, [r4, #0]
 8007112:	bd38      	pop	{r3, r4, r5, pc}
 8007114:	20000c3c 	.word	0x20000c3c

08007118 <_close_r>:
 8007118:	b538      	push	{r3, r4, r5, lr}
 800711a:	2300      	movs	r3, #0
 800711c:	4d05      	ldr	r5, [pc, #20]	; (8007134 <_close_r+0x1c>)
 800711e:	4604      	mov	r4, r0
 8007120:	4608      	mov	r0, r1
 8007122:	602b      	str	r3, [r5, #0]
 8007124:	f7fb fdba 	bl	8002c9c <_close>
 8007128:	1c43      	adds	r3, r0, #1
 800712a:	d102      	bne.n	8007132 <_close_r+0x1a>
 800712c:	682b      	ldr	r3, [r5, #0]
 800712e:	b103      	cbz	r3, 8007132 <_close_r+0x1a>
 8007130:	6023      	str	r3, [r4, #0]
 8007132:	bd38      	pop	{r3, r4, r5, pc}
 8007134:	20000c3c 	.word	0x20000c3c

08007138 <_fstat_r>:
 8007138:	b538      	push	{r3, r4, r5, lr}
 800713a:	2300      	movs	r3, #0
 800713c:	4d06      	ldr	r5, [pc, #24]	; (8007158 <_fstat_r+0x20>)
 800713e:	4604      	mov	r4, r0
 8007140:	4608      	mov	r0, r1
 8007142:	4611      	mov	r1, r2
 8007144:	602b      	str	r3, [r5, #0]
 8007146:	f7fb fdb4 	bl	8002cb2 <_fstat>
 800714a:	1c43      	adds	r3, r0, #1
 800714c:	d102      	bne.n	8007154 <_fstat_r+0x1c>
 800714e:	682b      	ldr	r3, [r5, #0]
 8007150:	b103      	cbz	r3, 8007154 <_fstat_r+0x1c>
 8007152:	6023      	str	r3, [r4, #0]
 8007154:	bd38      	pop	{r3, r4, r5, pc}
 8007156:	bf00      	nop
 8007158:	20000c3c 	.word	0x20000c3c

0800715c <_isatty_r>:
 800715c:	b538      	push	{r3, r4, r5, lr}
 800715e:	2300      	movs	r3, #0
 8007160:	4d05      	ldr	r5, [pc, #20]	; (8007178 <_isatty_r+0x1c>)
 8007162:	4604      	mov	r4, r0
 8007164:	4608      	mov	r0, r1
 8007166:	602b      	str	r3, [r5, #0]
 8007168:	f7fb fdb2 	bl	8002cd0 <_isatty>
 800716c:	1c43      	adds	r3, r0, #1
 800716e:	d102      	bne.n	8007176 <_isatty_r+0x1a>
 8007170:	682b      	ldr	r3, [r5, #0]
 8007172:	b103      	cbz	r3, 8007176 <_isatty_r+0x1a>
 8007174:	6023      	str	r3, [r4, #0]
 8007176:	bd38      	pop	{r3, r4, r5, pc}
 8007178:	20000c3c 	.word	0x20000c3c

0800717c <_lseek_r>:
 800717c:	b538      	push	{r3, r4, r5, lr}
 800717e:	4604      	mov	r4, r0
 8007180:	4608      	mov	r0, r1
 8007182:	4611      	mov	r1, r2
 8007184:	2200      	movs	r2, #0
 8007186:	4d05      	ldr	r5, [pc, #20]	; (800719c <_lseek_r+0x20>)
 8007188:	602a      	str	r2, [r5, #0]
 800718a:	461a      	mov	r2, r3
 800718c:	f7fb fdaa 	bl	8002ce4 <_lseek>
 8007190:	1c43      	adds	r3, r0, #1
 8007192:	d102      	bne.n	800719a <_lseek_r+0x1e>
 8007194:	682b      	ldr	r3, [r5, #0]
 8007196:	b103      	cbz	r3, 800719a <_lseek_r+0x1e>
 8007198:	6023      	str	r3, [r4, #0]
 800719a:	bd38      	pop	{r3, r4, r5, pc}
 800719c:	20000c3c 	.word	0x20000c3c

080071a0 <_read_r>:
 80071a0:	b538      	push	{r3, r4, r5, lr}
 80071a2:	4604      	mov	r4, r0
 80071a4:	4608      	mov	r0, r1
 80071a6:	4611      	mov	r1, r2
 80071a8:	2200      	movs	r2, #0
 80071aa:	4d05      	ldr	r5, [pc, #20]	; (80071c0 <_read_r+0x20>)
 80071ac:	602a      	str	r2, [r5, #0]
 80071ae:	461a      	mov	r2, r3
 80071b0:	f7fb fd3b 	bl	8002c2a <_read>
 80071b4:	1c43      	adds	r3, r0, #1
 80071b6:	d102      	bne.n	80071be <_read_r+0x1e>
 80071b8:	682b      	ldr	r3, [r5, #0]
 80071ba:	b103      	cbz	r3, 80071be <_read_r+0x1e>
 80071bc:	6023      	str	r3, [r4, #0]
 80071be:	bd38      	pop	{r3, r4, r5, pc}
 80071c0:	20000c3c 	.word	0x20000c3c

080071c4 <sqrt>:
 80071c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80071c6:	4606      	mov	r6, r0
 80071c8:	460f      	mov	r7, r1
 80071ca:	f000 f81f 	bl	800720c <__ieee754_sqrt>
 80071ce:	4632      	mov	r2, r6
 80071d0:	4604      	mov	r4, r0
 80071d2:	460d      	mov	r5, r1
 80071d4:	463b      	mov	r3, r7
 80071d6:	4630      	mov	r0, r6
 80071d8:	4639      	mov	r1, r7
 80071da:	f7f9 fc0f 	bl	80009fc <__aeabi_dcmpun>
 80071de:	b990      	cbnz	r0, 8007206 <sqrt+0x42>
 80071e0:	2200      	movs	r2, #0
 80071e2:	2300      	movs	r3, #0
 80071e4:	4630      	mov	r0, r6
 80071e6:	4639      	mov	r1, r7
 80071e8:	f7f9 fbe0 	bl	80009ac <__aeabi_dcmplt>
 80071ec:	b158      	cbz	r0, 8007206 <sqrt+0x42>
 80071ee:	f7fe ff6b 	bl	80060c8 <__errno>
 80071f2:	2321      	movs	r3, #33	; 0x21
 80071f4:	2200      	movs	r2, #0
 80071f6:	6003      	str	r3, [r0, #0]
 80071f8:	2300      	movs	r3, #0
 80071fa:	4610      	mov	r0, r2
 80071fc:	4619      	mov	r1, r3
 80071fe:	f7f9 fa8d 	bl	800071c <__aeabi_ddiv>
 8007202:	4604      	mov	r4, r0
 8007204:	460d      	mov	r5, r1
 8007206:	4620      	mov	r0, r4
 8007208:	4629      	mov	r1, r5
 800720a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800720c <__ieee754_sqrt>:
 800720c:	f8df c158 	ldr.w	ip, [pc, #344]	; 8007368 <__ieee754_sqrt+0x15c>
 8007210:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007214:	ea3c 0c01 	bics.w	ip, ip, r1
 8007218:	4606      	mov	r6, r0
 800721a:	460d      	mov	r5, r1
 800721c:	460c      	mov	r4, r1
 800721e:	460a      	mov	r2, r1
 8007220:	4607      	mov	r7, r0
 8007222:	4603      	mov	r3, r0
 8007224:	d10f      	bne.n	8007246 <__ieee754_sqrt+0x3a>
 8007226:	4602      	mov	r2, r0
 8007228:	460b      	mov	r3, r1
 800722a:	f7f9 f94d 	bl	80004c8 <__aeabi_dmul>
 800722e:	4602      	mov	r2, r0
 8007230:	460b      	mov	r3, r1
 8007232:	4630      	mov	r0, r6
 8007234:	4629      	mov	r1, r5
 8007236:	f7f8 ff91 	bl	800015c <__adddf3>
 800723a:	4606      	mov	r6, r0
 800723c:	460d      	mov	r5, r1
 800723e:	4630      	mov	r0, r6
 8007240:	4629      	mov	r1, r5
 8007242:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007246:	2900      	cmp	r1, #0
 8007248:	dc0e      	bgt.n	8007268 <__ieee754_sqrt+0x5c>
 800724a:	f021 4c00 	bic.w	ip, r1, #2147483648	; 0x80000000
 800724e:	ea5c 0707 	orrs.w	r7, ip, r7
 8007252:	d0f4      	beq.n	800723e <__ieee754_sqrt+0x32>
 8007254:	b141      	cbz	r1, 8007268 <__ieee754_sqrt+0x5c>
 8007256:	4602      	mov	r2, r0
 8007258:	460b      	mov	r3, r1
 800725a:	f7f8 ff7d 	bl	8000158 <__aeabi_dsub>
 800725e:	4602      	mov	r2, r0
 8007260:	460b      	mov	r3, r1
 8007262:	f7f9 fa5b 	bl	800071c <__aeabi_ddiv>
 8007266:	e7e8      	b.n	800723a <__ieee754_sqrt+0x2e>
 8007268:	1521      	asrs	r1, r4, #20
 800726a:	d075      	beq.n	8007358 <__ieee754_sqrt+0x14c>
 800726c:	07cc      	lsls	r4, r1, #31
 800726e:	f04f 0400 	mov.w	r4, #0
 8007272:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007276:	f2a1 37ff 	subw	r7, r1, #1023	; 0x3ff
 800727a:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 800727e:	bf5e      	ittt	pl
 8007280:	0fd9      	lsrpl	r1, r3, #31
 8007282:	005b      	lslpl	r3, r3, #1
 8007284:	eb01 0242 	addpl.w	r2, r1, r2, lsl #1
 8007288:	0fd9      	lsrs	r1, r3, #31
 800728a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 800728e:	2516      	movs	r5, #22
 8007290:	4620      	mov	r0, r4
 8007292:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007296:	107f      	asrs	r7, r7, #1
 8007298:	005b      	lsls	r3, r3, #1
 800729a:	1846      	adds	r6, r0, r1
 800729c:	4296      	cmp	r6, r2
 800729e:	bfde      	ittt	le
 80072a0:	1b92      	suble	r2, r2, r6
 80072a2:	1870      	addle	r0, r6, r1
 80072a4:	1864      	addle	r4, r4, r1
 80072a6:	0052      	lsls	r2, r2, #1
 80072a8:	3d01      	subs	r5, #1
 80072aa:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80072ae:	ea4f 0151 	mov.w	r1, r1, lsr #1
 80072b2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80072b6:	d1f0      	bne.n	800729a <__ieee754_sqrt+0x8e>
 80072b8:	4629      	mov	r1, r5
 80072ba:	f04f 0e20 	mov.w	lr, #32
 80072be:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 80072c2:	4282      	cmp	r2, r0
 80072c4:	eb06 0c05 	add.w	ip, r6, r5
 80072c8:	dc02      	bgt.n	80072d0 <__ieee754_sqrt+0xc4>
 80072ca:	d113      	bne.n	80072f4 <__ieee754_sqrt+0xe8>
 80072cc:	459c      	cmp	ip, r3
 80072ce:	d811      	bhi.n	80072f4 <__ieee754_sqrt+0xe8>
 80072d0:	f1bc 0f00 	cmp.w	ip, #0
 80072d4:	eb0c 0506 	add.w	r5, ip, r6
 80072d8:	da43      	bge.n	8007362 <__ieee754_sqrt+0x156>
 80072da:	2d00      	cmp	r5, #0
 80072dc:	db41      	blt.n	8007362 <__ieee754_sqrt+0x156>
 80072de:	f100 0801 	add.w	r8, r0, #1
 80072e2:	1a12      	subs	r2, r2, r0
 80072e4:	4640      	mov	r0, r8
 80072e6:	459c      	cmp	ip, r3
 80072e8:	bf88      	it	hi
 80072ea:	f102 32ff 	addhi.w	r2, r2, #4294967295
 80072ee:	eba3 030c 	sub.w	r3, r3, ip
 80072f2:	4431      	add	r1, r6
 80072f4:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 80072f8:	f1be 0e01 	subs.w	lr, lr, #1
 80072fc:	eb0c 0242 	add.w	r2, ip, r2, lsl #1
 8007300:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007304:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8007308:	d1db      	bne.n	80072c2 <__ieee754_sqrt+0xb6>
 800730a:	4313      	orrs	r3, r2
 800730c:	d006      	beq.n	800731c <__ieee754_sqrt+0x110>
 800730e:	1c48      	adds	r0, r1, #1
 8007310:	bf0b      	itete	eq
 8007312:	4671      	moveq	r1, lr
 8007314:	3101      	addne	r1, #1
 8007316:	3401      	addeq	r4, #1
 8007318:	f021 0101 	bicne.w	r1, r1, #1
 800731c:	1063      	asrs	r3, r4, #1
 800731e:	0849      	lsrs	r1, r1, #1
 8007320:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007324:	07e2      	lsls	r2, r4, #31
 8007326:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800732a:	bf48      	it	mi
 800732c:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8007330:	460e      	mov	r6, r1
 8007332:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 8007336:	e782      	b.n	800723e <__ieee754_sqrt+0x32>
 8007338:	0ada      	lsrs	r2, r3, #11
 800733a:	3815      	subs	r0, #21
 800733c:	055b      	lsls	r3, r3, #21
 800733e:	2a00      	cmp	r2, #0
 8007340:	d0fa      	beq.n	8007338 <__ieee754_sqrt+0x12c>
 8007342:	02d5      	lsls	r5, r2, #11
 8007344:	d50a      	bpl.n	800735c <__ieee754_sqrt+0x150>
 8007346:	f1c1 0420 	rsb	r4, r1, #32
 800734a:	fa23 f404 	lsr.w	r4, r3, r4
 800734e:	1e4d      	subs	r5, r1, #1
 8007350:	408b      	lsls	r3, r1
 8007352:	4322      	orrs	r2, r4
 8007354:	1b41      	subs	r1, r0, r5
 8007356:	e789      	b.n	800726c <__ieee754_sqrt+0x60>
 8007358:	4608      	mov	r0, r1
 800735a:	e7f0      	b.n	800733e <__ieee754_sqrt+0x132>
 800735c:	0052      	lsls	r2, r2, #1
 800735e:	3101      	adds	r1, #1
 8007360:	e7ef      	b.n	8007342 <__ieee754_sqrt+0x136>
 8007362:	4680      	mov	r8, r0
 8007364:	e7bd      	b.n	80072e2 <__ieee754_sqrt+0xd6>
 8007366:	bf00      	nop
 8007368:	7ff00000 	.word	0x7ff00000

0800736c <_init>:
 800736c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800736e:	bf00      	nop
 8007370:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007372:	bc08      	pop	{r3}
 8007374:	469e      	mov	lr, r3
 8007376:	4770      	bx	lr

08007378 <_fini>:
 8007378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800737a:	bf00      	nop
 800737c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800737e:	bc08      	pop	{r3}
 8007380:	469e      	mov	lr, r3
 8007382:	4770      	bx	lr
